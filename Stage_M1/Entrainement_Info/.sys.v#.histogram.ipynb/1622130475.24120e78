{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0c2ab6c",
   "metadata": {},
   "source": [
    "# How to make an histogram - pandas & root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4dff3cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7ac3173e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "20d2410e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "569338c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install xrootd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bf8603e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0864936c",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = uproot.open(filename)[\"DecayTree\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b3da791",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<TTree 'DecayTree' (26 branches) at 0x0001114f5940>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fd1aaac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2adbf07",
   "metadata": {},
   "source": [
    "## Pandas "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3deebbba",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "054d46db",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = tree.arrays(library=\"pandas\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "11afcf77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ab4378af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B_FlightDistance</th>\n",
       "      <th>B_VertexChi2</th>\n",
       "      <th>H1_PX</th>\n",
       "      <th>H1_PY</th>\n",
       "      <th>H1_PZ</th>\n",
       "      <th>H1_ProbK</th>\n",
       "      <th>H1_ProbPi</th>\n",
       "      <th>H1_Charge</th>\n",
       "      <th>H1_IPChi2</th>\n",
       "      <th>H1_isMuon</th>\n",
       "      <th>...</th>\n",
       "      <th>H2_IPChi2</th>\n",
       "      <th>H2_isMuon</th>\n",
       "      <th>H3_PX</th>\n",
       "      <th>H3_PY</th>\n",
       "      <th>H3_PZ</th>\n",
       "      <th>H3_ProbK</th>\n",
       "      <th>H3_ProbPi</th>\n",
       "      <th>H3_Charge</th>\n",
       "      <th>H3_IPChi2</th>\n",
       "      <th>H3_isMuon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25.301004</td>\n",
       "      <td>1.497280</td>\n",
       "      <td>375.284205</td>\n",
       "      <td>831.308481</td>\n",
       "      <td>51820.233718</td>\n",
       "      <td>0.038616</td>\n",
       "      <td>0.888755</td>\n",
       "      <td>-1</td>\n",
       "      <td>212.776776</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>5878.170539</td>\n",
       "      <td>0</td>\n",
       "      <td>-208.210960</td>\n",
       "      <td>-2586.359121</td>\n",
       "      <td>105848.271681</td>\n",
       "      <td>0.193004</td>\n",
       "      <td>0.138845</td>\n",
       "      <td>1</td>\n",
       "      <td>61.157888</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94.690700</td>\n",
       "      <td>1.383338</td>\n",
       "      <td>-4985.130785</td>\n",
       "      <td>5853.750057</td>\n",
       "      <td>326157.454706</td>\n",
       "      <td>0.073556</td>\n",
       "      <td>0.039064</td>\n",
       "      <td>-1</td>\n",
       "      <td>373.815885</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>183.579026</td>\n",
       "      <td>1</td>\n",
       "      <td>-175.018535</td>\n",
       "      <td>1325.178792</td>\n",
       "      <td>87681.561846</td>\n",
       "      <td>0.080397</td>\n",
       "      <td>0.758603</td>\n",
       "      <td>1</td>\n",
       "      <td>185.092016</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.284490</td>\n",
       "      <td>5.187101</td>\n",
       "      <td>-1265.456544</td>\n",
       "      <td>2330.050788</td>\n",
       "      <td>90762.658032</td>\n",
       "      <td>0.030095</td>\n",
       "      <td>0.636693</td>\n",
       "      <td>1</td>\n",
       "      <td>53.187855</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>564.594503</td>\n",
       "      <td>0</td>\n",
       "      <td>-1383.996490</td>\n",
       "      <td>-71.081104</td>\n",
       "      <td>85574.929582</td>\n",
       "      <td>0.750751</td>\n",
       "      <td>0.399602</td>\n",
       "      <td>-1</td>\n",
       "      <td>1.481413</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.590769</td>\n",
       "      <td>7.129099</td>\n",
       "      <td>-720.797259</td>\n",
       "      <td>3413.790588</td>\n",
       "      <td>86793.058768</td>\n",
       "      <td>0.211414</td>\n",
       "      <td>0.350969</td>\n",
       "      <td>-1</td>\n",
       "      <td>6.232666</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.221705</td>\n",
       "      <td>0</td>\n",
       "      <td>398.775944</td>\n",
       "      <td>-1134.914464</td>\n",
       "      <td>14653.316611</td>\n",
       "      <td>0.005698</td>\n",
       "      <td>0.964705</td>\n",
       "      <td>1</td>\n",
       "      <td>468.174038</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.013242</td>\n",
       "      <td>10.988701</td>\n",
       "      <td>397.754571</td>\n",
       "      <td>1791.373059</td>\n",
       "      <td>40040.364159</td>\n",
       "      <td>0.005697</td>\n",
       "      <td>0.933102</td>\n",
       "      <td>-1</td>\n",
       "      <td>3.137287</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>737.287443</td>\n",
       "      <td>0</td>\n",
       "      <td>477.148467</td>\n",
       "      <td>2113.439057</td>\n",
       "      <td>24462.076980</td>\n",
       "      <td>0.002979</td>\n",
       "      <td>0.918983</td>\n",
       "      <td>1</td>\n",
       "      <td>60.530372</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   B_FlightDistance  B_VertexChi2        H1_PX        H1_PY          H1_PZ  \\\n",
       "0         25.301004      1.497280   375.284205   831.308481   51820.233718   \n",
       "1         94.690700      1.383338 -4985.130785  5853.750057  326157.454706   \n",
       "2          8.284490      5.187101 -1265.456544  2330.050788   90762.658032   \n",
       "3          5.590769      7.129099  -720.797259  3413.790588   86793.058768   \n",
       "4          3.013242     10.988701   397.754571  1791.373059   40040.364159   \n",
       "\n",
       "   H1_ProbK  H1_ProbPi  H1_Charge   H1_IPChi2  H1_isMuon  ...    H2_IPChi2  \\\n",
       "0  0.038616   0.888755         -1  212.776776          0  ...  5878.170539   \n",
       "1  0.073556   0.039064         -1  373.815885          1  ...   183.579026   \n",
       "2  0.030095   0.636693          1   53.187855          0  ...   564.594503   \n",
       "3  0.211414   0.350969         -1    6.232666          0  ...    30.221705   \n",
       "4  0.005697   0.933102         -1    3.137287          0  ...   737.287443   \n",
       "\n",
       "   H2_isMuon        H3_PX        H3_PY          H3_PZ  H3_ProbK  H3_ProbPi  \\\n",
       "0          0  -208.210960 -2586.359121  105848.271681  0.193004   0.138845   \n",
       "1          1  -175.018535  1325.178792   87681.561846  0.080397   0.758603   \n",
       "2          0 -1383.996490   -71.081104   85574.929582  0.750751   0.399602   \n",
       "3          0   398.775944 -1134.914464   14653.316611  0.005698   0.964705   \n",
       "4          0   477.148467  2113.439057   24462.076980  0.002979   0.918983   \n",
       "\n",
       "   H3_Charge   H3_IPChi2  H3_isMuon  \n",
       "0          1   61.157888          1  \n",
       "1          1  185.092016          0  \n",
       "2         -1    1.481413          0  \n",
       "3          1  468.174038          0  \n",
       "4          1   60.530372          0  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4bd9c80e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['B_FlightDistance', 'B_VertexChi2', 'H1_PX', 'H1_PY', 'H1_PZ',\n",
       "       'H1_ProbK', 'H1_ProbPi', 'H1_Charge', 'H1_IPChi2', 'H1_isMuon', 'H2_PX',\n",
       "       'H2_PY', 'H2_PZ', 'H2_ProbK', 'H2_ProbPi', 'H2_Charge', 'H2_IPChi2',\n",
       "       'H2_isMuon', 'H3_PX', 'H3_PY', 'H3_PZ', 'H3_ProbK', 'H3_ProbPi',\n",
       "       'H3_Charge', 'H3_IPChi2', 'H3_isMuon'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cd6621c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=5135823, step=1)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.index #pas de paranthÃ¨ses !"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16650749",
   "metadata": {},
   "source": [
    "#### Calcul sur les colonnes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a07cd109",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0           912.092114\n",
       "1          7688.817769\n",
       "2          2651.512199\n",
       "3          3489.056443\n",
       "4          1835.000310\n",
       "              ...     \n",
       "5135818    2773.088407\n",
       "5135819    2773.088407\n",
       "5135820    2773.088407\n",
       "5135821    1019.035947\n",
       "5135822     542.669776\n",
       "Length: 5135823, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.eval('sqrt(H1_PX**2 + H1_PY**2)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd542802",
   "metadata": {},
   "source": [
    "#### Ajouter une colonne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ce8fee59",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selon les propriÃ©tÃ©s de conservation du moment cinÃ©tique\n",
    "df.eval('B_P = sqrt((H1_PX + H2_PX + H3_PX)**2 + (H1_PY + H2_PY + H3_PY)**2 + (H1_PZ + H2_PZ + H3_PZ)**2 )', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "38f11208",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['B_FlightDistance', 'B_VertexChi2', 'H1_PX', 'H1_PY', 'H1_PZ',\n",
       "       'H1_ProbK', 'H1_ProbPi', 'H1_Charge', 'H1_IPChi2', 'H1_isMuon', 'H2_PX',\n",
       "       'H2_PY', 'H2_PZ', 'H2_ProbK', 'H2_ProbPi', 'H2_Charge', 'H2_IPChi2',\n",
       "       'H2_isMuon', 'H3_PX', 'H3_PY', 'H3_PZ', 'H3_ProbK', 'H3_ProbPi',\n",
       "       'H3_Charge', 'H3_IPChi2', 'H3_isMuon', 'B_P'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "80acbab7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          175372.208209\n",
       "1          419256.084308\n",
       "2          194255.997820\n",
       "3          121771.163250\n",
       "4           76224.727983\n",
       "               ...      \n",
       "5135818     50833.383863\n",
       "5135819     51329.152279\n",
       "5135820     54114.765875\n",
       "5135821    157529.804312\n",
       "5135822    142125.007575\n",
       "Name: B_P, Length: 5135823, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['B_P'] #j'ai bien crÃ©e B_P !"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81c828fd",
   "metadata": {},
   "source": [
    "## Plotting histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "efea6ca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "29486662",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "040ee3f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f0d3ea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins = 100, range=(0,300))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08faf20d",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins = 100, range=(0,100))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b88f2f7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins = 100, range=(0,100))\n",
    "plt.yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89dc1edd",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins = 100, range=(0,100))\n",
    "plt.xlabel('Flght Distance of $B^+$ meson')\n",
    "plt.ylabel('Number of $B^+$ meson /GeV')\n",
    "plt.show()\n",
    "plt.savefig('B_FlightDistance_hist.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50c25665",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins = 100, range=(0,100), histtype='step')\n",
    "plt.xlabel('Flght Distance of $B^+$ meson [mm]')\n",
    "plt.ylabel('Number of $B^+$ meson / mm')\n",
    "plt.show()\n",
    "\n",
    "# histtype='step' si on veut juste le contour des rectangles "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0c09649",
   "metadata": {},
   "source": [
    "## Applying cuts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e12d11e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_with_cut = df.query('B_P > 100000')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b4d50fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bf780b6e",
   "metadata": {},
   "source": [
    "Checking the impact on the lifetime distribution :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "934b0fbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#lifetime distribution equivalent to FlightDistance distribution\n",
    "plt.hist([df['B_FlightDistance'],df_with_cut['B_FlightDistance']], label=['without the cut','with the cut'], bins = 100, range=(0,100))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f56b8ad6",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_FlightDistance'], bins=100, range=(0,100), label = 'without cut', histtype='step')\n",
    "plt.hist(df_with_cut['B_FlightDistance'], bins=100, range=(0,100), label = 'with cut', histtype='step')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "# d'oÃ¹ l'utilitÃ© d'utiliser la reprÃ©sentation des historgrammes en step"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cd2bb0e",
   "metadata": {},
   "source": [
    "## Exercice d'entrainement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f19f9e67",
   "metadata": {},
   "source": [
    "On suppose que H est un Kaon. Les impulsions sont en MeV.\n",
    "mk = 493,677 MeV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3fb81bcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "77547ef2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.eval('H1_P = sqrt(H1_PX**2 + H1_PY**2 + H1_PZ**2)', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "328e4fcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.eval('H2_P = sqrt(H2_PX**2 + H2_PY**2 + H2_PZ**2)', inplace=True)\n",
    "df2.eval('H3_P = sqrt(H3_PX**2 + H3_PY**2 + H3_PZ**2)', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c2b05ed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['B_FlightDistance', 'B_VertexChi2', 'H1_PX', 'H1_PY', 'H1_PZ',\n",
       "       'H1_ProbK', 'H1_ProbPi', 'H1_Charge', 'H1_IPChi2', 'H1_isMuon', 'H2_PX',\n",
       "       'H2_PY', 'H2_PZ', 'H2_ProbK', 'H2_ProbPi', 'H2_Charge', 'H2_IPChi2',\n",
       "       'H2_isMuon', 'H3_PX', 'H3_PY', 'H3_PZ', 'H3_ProbK', 'H3_ProbPi',\n",
       "       'H3_Charge', 'H3_IPChi2', 'H3_isMuon', 'B_P', 'H1_P', 'H2_P', 'H3_P'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "32374339",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.eval('B_M =(sqrt((sqrt(493.677**2 + H1_P**2) + sqrt(493.677**2 + H2_P**2) + sqrt(493.677**2 + H3_P**2))**2 - B_P**2 ))', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c9be77ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B_FlightDistance</th>\n",
       "      <th>B_VertexChi2</th>\n",
       "      <th>H1_PX</th>\n",
       "      <th>H1_PY</th>\n",
       "      <th>H1_PZ</th>\n",
       "      <th>H1_ProbK</th>\n",
       "      <th>H1_ProbPi</th>\n",
       "      <th>H1_Charge</th>\n",
       "      <th>H1_IPChi2</th>\n",
       "      <th>H1_isMuon</th>\n",
       "      <th>...</th>\n",
       "      <th>H3_ProbK</th>\n",
       "      <th>H3_ProbPi</th>\n",
       "      <th>H3_Charge</th>\n",
       "      <th>H3_IPChi2</th>\n",
       "      <th>H3_isMuon</th>\n",
       "      <th>B_P</th>\n",
       "      <th>H1_P</th>\n",
       "      <th>H2_P</th>\n",
       "      <th>H3_P</th>\n",
       "      <th>B_M</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25.301004</td>\n",
       "      <td>1.497280</td>\n",
       "      <td>375.284205</td>\n",
       "      <td>831.308481</td>\n",
       "      <td>51820.233718</td>\n",
       "      <td>0.038616</td>\n",
       "      <td>0.888755</td>\n",
       "      <td>-1</td>\n",
       "      <td>212.776776</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.193004</td>\n",
       "      <td>0.138845</td>\n",
       "      <td>1</td>\n",
       "      <td>61.157888</td>\n",
       "      <td>1</td>\n",
       "      <td>175372.208209</td>\n",
       "      <td>51828.26</td>\n",
       "      <td>17726.53</td>\n",
       "      <td>105880.07</td>\n",
       "      <td>5061.531163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94.690700</td>\n",
       "      <td>1.383338</td>\n",
       "      <td>-4985.130785</td>\n",
       "      <td>5853.750057</td>\n",
       "      <td>326157.454706</td>\n",
       "      <td>0.073556</td>\n",
       "      <td>0.039064</td>\n",
       "      <td>-1</td>\n",
       "      <td>373.815885</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.080397</td>\n",
       "      <td>0.758603</td>\n",
       "      <td>1</td>\n",
       "      <td>185.092016</td>\n",
       "      <td>0</td>\n",
       "      <td>419256.084308</td>\n",
       "      <td>326248.07</td>\n",
       "      <td>5326.76</td>\n",
       "      <td>87691.75</td>\n",
       "      <td>5424.181437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.284490</td>\n",
       "      <td>5.187101</td>\n",
       "      <td>-1265.456544</td>\n",
       "      <td>2330.050788</td>\n",
       "      <td>90762.658032</td>\n",
       "      <td>0.030095</td>\n",
       "      <td>0.636693</td>\n",
       "      <td>1</td>\n",
       "      <td>53.187855</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.750751</td>\n",
       "      <td>0.399602</td>\n",
       "      <td>-1</td>\n",
       "      <td>1.481413</td>\n",
       "      <td>0</td>\n",
       "      <td>194255.997820</td>\n",
       "      <td>90801.38</td>\n",
       "      <td>17930.28</td>\n",
       "      <td>85586.15</td>\n",
       "      <td>5266.340604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.590769</td>\n",
       "      <td>7.129099</td>\n",
       "      <td>-720.797259</td>\n",
       "      <td>3413.790588</td>\n",
       "      <td>86793.058768</td>\n",
       "      <td>0.211414</td>\n",
       "      <td>0.350969</td>\n",
       "      <td>-1</td>\n",
       "      <td>6.232666</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.005698</td>\n",
       "      <td>0.964705</td>\n",
       "      <td>1</td>\n",
       "      <td>468.174038</td>\n",
       "      <td>0</td>\n",
       "      <td>121771.163250</td>\n",
       "      <td>86863.16</td>\n",
       "      <td>20308.77</td>\n",
       "      <td>14702.61</td>\n",
       "      <td>5386.234395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.013242</td>\n",
       "      <td>10.988701</td>\n",
       "      <td>397.754571</td>\n",
       "      <td>1791.373059</td>\n",
       "      <td>40040.364159</td>\n",
       "      <td>0.005697</td>\n",
       "      <td>0.933102</td>\n",
       "      <td>-1</td>\n",
       "      <td>3.137287</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002979</td>\n",
       "      <td>0.918983</td>\n",
       "      <td>1</td>\n",
       "      <td>60.530372</td>\n",
       "      <td>0</td>\n",
       "      <td>76224.727983</td>\n",
       "      <td>40082.39</td>\n",
       "      <td>11782.20</td>\n",
       "      <td>24557.84</td>\n",
       "      <td>5743.006417</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   B_FlightDistance  B_VertexChi2        H1_PX        H1_PY          H1_PZ  \\\n",
       "0         25.301004      1.497280   375.284205   831.308481   51820.233718   \n",
       "1         94.690700      1.383338 -4985.130785  5853.750057  326157.454706   \n",
       "2          8.284490      5.187101 -1265.456544  2330.050788   90762.658032   \n",
       "3          5.590769      7.129099  -720.797259  3413.790588   86793.058768   \n",
       "4          3.013242     10.988701   397.754571  1791.373059   40040.364159   \n",
       "\n",
       "   H1_ProbK  H1_ProbPi  H1_Charge   H1_IPChi2  H1_isMuon  ...  H3_ProbK  \\\n",
       "0  0.038616   0.888755         -1  212.776776          0  ...  0.193004   \n",
       "1  0.073556   0.039064         -1  373.815885          1  ...  0.080397   \n",
       "2  0.030095   0.636693          1   53.187855          0  ...  0.750751   \n",
       "3  0.211414   0.350969         -1    6.232666          0  ...  0.005698   \n",
       "4  0.005697   0.933102         -1    3.137287          0  ...  0.002979   \n",
       "\n",
       "   H3_ProbPi  H3_Charge   H3_IPChi2  H3_isMuon            B_P       H1_P  \\\n",
       "0   0.138845          1   61.157888          1  175372.208209   51828.26   \n",
       "1   0.758603          1  185.092016          0  419256.084308  326248.07   \n",
       "2   0.399602         -1    1.481413          0  194255.997820   90801.38   \n",
       "3   0.964705          1  468.174038          0  121771.163250   86863.16   \n",
       "4   0.918983          1   60.530372          0   76224.727983   40082.39   \n",
       "\n",
       "       H2_P       H3_P          B_M  \n",
       "0  17726.53  105880.07  5061.531163  \n",
       "1   5326.76   87691.75  5424.181437  \n",
       "2  17930.28   85586.15  5266.340604  \n",
       "3  20308.77   14702.61  5386.234395  \n",
       "4  11782.20   24557.84  5743.006417  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fb07a850",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['B_M'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0e72833",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['B_M'], range=(4500,6000), bins=500)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "581cc552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['B_M'], range=(5300,5600), bins=100)\n",
    "plt.yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "faf1f8fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['H1_ProbK'],histtype='step',bins=100, range=(0,1), label='H1_ProbK')\n",
    "plt.hist(df2['H2_ProbK'],histtype='step',bins=100, range=(0,1), label='H2_ProbK')\n",
    "plt.hist(df2['H3_ProbK'],histtype='step',bins=100, range=(0,1), label='H3_ProbK')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d8af9a94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['H1_ProbPi'],histtype='step',bins=100, range=(0,1), label='H1_ProbPi')\n",
    "plt.hist(df2['H2_ProbPi'],histtype='step',bins=100, range=(0,1), label='H2_ProbPi')\n",
    "plt.hist(df2['H3_ProbPi'],histtype='step',bins=100, range=(0,1), label='H3_ProbPi')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4b1eb8e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.query(\"H1_ProbK > 0.8 and H2_ProbK > 0.8 and H3_ProbK > 0.8\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4af2962b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['H1_ProbK'],histtype='step',bins=100, range=(0,1), label='H1_ProbK')\n",
    "plt.hist(df2['H2_ProbK'],histtype='step',bins=100, range=(0,1), label='H2_ProbK')\n",
    "plt.hist(df2['H3_ProbK'],histtype='step',bins=100, range=(0,1), label='H3_ProbK')\n",
    "plt.legend()\n",
    "plt.show() #the cut worked !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "038b54bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['H1_ProbPi'],histtype='step',bins=100, range=(0,1), label='H1_ProbPi')\n",
    "plt.hist(df2['H2_ProbPi'],histtype='step',bins=100, range=(0,1), label='H2_ProbPi')\n",
    "plt.hist(df2['H3_ProbPi'],histtype='step',bins=100, range=(0,1), label='H3_ProbPi')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ca94a448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['B_M'], range=(4500,6000), bins=500)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "57f02df2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df2['B_M'], range=(5200,5400), bins=100, histtype='step')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b4a9c251",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=df2.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ee1b78a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = df3.query(\"H1_ProbPi < 0.2 and H2_ProbPi < 0.2 and H3_ProbPi < 0.2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5311da08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df3['B_M'], range=(5200,5375), bins=100, histtype='step')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bce4467",
   "metadata": {},
   "source": [
    "## Tentative de fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cff28ebb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mariehartmann/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/zfit/__init__.py:48: UserWarning: TensorFlow warnings are by default suppressed by zfit. In order to show them, set the environment variable ZFIT_DISABLE_TF_WARNINGS=0. In order to suppress the TensorFlow warnings AND this warning, set ZFIT_DISABLE_TF_WARNINGS=1.\n",
      "  warnings.warn(\"TensorFlow warnings are by default suppressed by zfit.\"\n",
      "/Users/mariehartmann/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/zfit/util/execution.py:73: UserWarning: Not running on Linux. Determining available cpus for thread can failand be overestimated. Workaround (only if too many cpus are used):`zfit.run.set_n_cpu(your_cpu_number)`\n",
      "  warnings.warn(\"Not running on Linux. Determining available cpus for thread can fail\"\n"
     ]
    }
   ],
   "source": [
    "import zfit\n",
    "#counts, bin_edges = np.histogram(data, bins = 100, range = range)\n",
    "#mplhep.histplot((counts,bin_edges), yerr = True, color = 'black', histtype='errorbar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0d8847bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mplhep"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4df096f9",
   "metadata": {},
   "source": [
    "DÃ©finir l'espace observable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "716289cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "obs = zfit.Space('x', limits=(5200.,5375.))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef37602",
   "metadata": {},
   "source": [
    "DÃ©finir les donnÃ©es"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7038acb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df3['B_M'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "833c90eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "[5288.16520675 5237.29672947 5804.80259766 ... 5259.17246398 5255.77666059\n",
      " 5292.20379662]\n"
     ]
    }
   ],
   "source": [
    "B_M = df3['B_M'].to_numpy()\n",
    "print(type(B_M))\n",
    "print(B_M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "458d8151",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = zfit.Data.from_numpy(obs=obs, array=B_M, weights=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a83d130",
   "metadata": {},
   "source": [
    "DÃ©finir les paramÃ¨tres et le modÃ¨le"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6a687b50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "197.3840481022833"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B_M.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9d29c47",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma1 = zfit.Parameter('sigma1', 197.) #need to estimate them correctly for the fit to work !!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5afaf319",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu1 = zfit.Parameter('mu1', 5279.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea2b1368",
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu1, sigma=sigma1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2151f9c",
   "metadata": {},
   "source": [
    "DÃ©finir la loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f339808d",
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_function = zfit.loss.UnbinnedNLL(model=gauss, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dff091ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "minimizer = zfit.minimize.Minuit()\n",
    "result = minimizer.minimize(loss = loss_function)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8863842",
   "metadata": {},
   "outputs": [],
   "source": [
    "result.converged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57751398",
   "metadata": {},
   "outputs": [],
   "source": [
    "result.valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ad0fccf",
   "metadata": {},
   "outputs": [],
   "source": [
    "result.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60da58f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(B_M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f305450d",
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_gauss1 = zfit.Parameter(\"yield_gauss1\", 100, 0, 2615)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db83c5e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "extended_gauss = gauss.create_extended(yield_gauss1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdac4877",
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_ex = zfit.loss.ExtendedUnbinnedNLL(model=extended_gauss, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d146ed59",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex = minimizer.minimize(loss_ex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffded058",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result_ex.converged)\n",
    "print(result_ex.valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f54b7a7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex.params"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaffde2e",
   "metadata": {},
   "source": [
    "### Fit avec un extended pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d0e14448",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-53-3611e2149da1>:1: UserWarning: The function <function Space.limits at 0x15617f8b0> may does not return the actual area/limits but rather the rectangular limits. <zfit Space obs=('x',), axes=None, limits=(array([[5200.]]), array([[5375.]]))> can also have functional limits that are arbitrarily defined and lay inside the rect_limits. To test if a value is inside, use `inside` or `filter`.\n",
      "  lower, upper = obs.limits\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5200.]]\n",
      "[[5375.]]\n"
     ]
    }
   ],
   "source": [
    "lower, upper = obs.limits\n",
    "print(lower)\n",
    "print(upper)\n",
    "range = (lower[0][0],upper[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e268c115",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts, bin_edges = np.histogram(data, bins = 100, range = range)\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'black', histtype='errorbar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bb15d49",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc6eb7be",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(extended_gauss.pdf(x_plot, norm_range=obs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e22b1cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(x_plot, y_plot*data.shape[0]/100*obs.area(), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43933d4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'black', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*data.shape[0]/100*obs.area(), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "951e10a1",
   "metadata": {},
   "source": [
    "### Fit avec un Crystal Ball"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1f0a0283",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = zfit.Parameter('alpha',0.5, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "409cceb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = zfit.Parameter('n', 1., 0., 100.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c7015469",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma = zfit.Parameter('sigma', 20., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b493bda1",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = zfit.Parameter('mu', 5279., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ed64c839",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_cb = zfit.pdf.CrystalBall(obs=obs, mu=mu, sigma=sigma, alpha=alpha, n=n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a055a795",
   "metadata": {},
   "outputs": [],
   "source": [
    "#yield_cb4 = zfit.Parameter(\"yield_cb4\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb23c8df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#extended_cb = model_cb.create_extended(yield_cb4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e02297f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loss_ex_cb = zfit.loss.ExtendedUnbinnedNLL(model=extended_cb, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ea95f0ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_cb = zfit.loss.UnbinnedNLL(model=model_cb, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3e6e792a",
   "metadata": {},
   "outputs": [],
   "source": [
    "minimizer = zfit.minimize.Minuit()\n",
    "#result_ex_cb = minimizer.minimize(loss = loss_ex_cb)\n",
    "result_cb = minimizer.minimize(loss=loss_cb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "822fe0b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print(result_cb.converged)\n",
    "print(result_cb.valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1cabc579",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'alpha' floating=True value=1.757>: {'value': 1.757158217003637}, <zfit.Parameter 'mu' floating=True value=5284>: {'value': 5283.98214477423}, <zfit.Parameter 'n' floating=True value=3.681>: {'value': 3.681384847928326}, <zfit.Parameter 'sigma' floating=True value=19.34>: {'value': 19.339291725236627}}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "6edeef59",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5200.]]\n",
      "[[5375.]]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-63-ed68ed1d4615>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcounts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbin_edges\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistogram\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mhistogram\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/numpy/lib/histograms.py\u001b[0m in \u001b[0;36mhistogram\u001b[0;34m(a, bins, range, normed, weights, density)\u001b[0m\n\u001b[1;32m    834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m             \u001b[0;31m# Only include values in the right range\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 836\u001b[0;31m             \u001b[0mkeep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtmp_a\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mfirst_edge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    837\u001b[0m             \u001b[0mkeep\u001b[0m \u001b[0;34m&=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtmp_a\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mlast_edge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    838\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogical_and\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m__bool__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1005\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1006\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__bool__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1007\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1008\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1009\u001b[0m   \u001b[0m__nonzero__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m__bool__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
     ]
    }
   ],
   "source": [
    "lower, upper = obs.limits\n",
    "print(lower)\n",
    "print(upper)\n",
    "counts, bin_edges = np.histogram(data, bins=100, range=(lower[0][0],upper[0][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b7044556",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts, bin_edges = np.histogram(df3['B_M'], bins=100, range=(lower[0][0],upper[0][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0c65d057",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)\n",
    "y_plot_cb = zfit.run(model_cb.pdf(x_plot, norm_range=obs))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "a7293670",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-67-853140565478>:2: UserWarning: The function <function Space.area at 0x156181ca0> may does not return the actual area/limits but rather the rectangular limits. <zfit Space obs=('x',), axes=None, limits=(array([[5200.]]), array([[5375.]]))> can also have functional limits that are arbitrarily defined and lay inside the rect_limits. To test if a value is inside, use `inside` or `filter`.\n",
      "  plt.plot(x_plot, y_plot_cb*df3['B_M'].shape[0]/100*obs.area(), color='blue')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'black', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_cb*df3['B_M'].shape[0]/100*obs.area(), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff0df4e1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
