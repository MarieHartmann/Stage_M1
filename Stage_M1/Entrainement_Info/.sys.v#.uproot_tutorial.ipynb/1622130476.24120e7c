{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: uproot in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (4.0.7)\n",
      "Requirement already satisfied: numpy in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (from uproot) (1.19.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: awkward in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (1.2.2)\n",
      "Requirement already satisfied: setuptools in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (from awkward) (50.3.1.post20201107)\n",
      "Requirement already satisfied: numpy>=1.13.1 in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (from awkward) (1.19.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install awkward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: uproot_methods in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (0.9.2)\n",
      "Requirement already satisfied: awkward<1.0.0 in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (from uproot_methods) (0.14.0)\n",
      "Requirement already satisfied: numpy>=1.13.1 in /Users/mariehartmann/opt/anaconda3/lib/python3.8/site-packages (from uproot_methods) (1.19.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install uproot_methods"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OPENING FILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Téléchargement d'un fichier depuis une url et transformation uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!wget https://github.com/masonproffitt/uproot-tutorial-notebooks/raw/master/uproot-tutorial-file.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "file = uproot.open('uproot-tutorial-file.root')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Events;1']\n",
      "{'Events': 'TTree'}\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print(file.keys())\n",
    "print(file.classnames())\n",
    "print(len(file))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<TTree 'Events' (6 branches) at 0x00010d2e7520>\n",
      "<class 'uproot.reading.ReadOnlyDirectory'>\n"
     ]
    }
   ],
   "source": [
    "print(file['Events'])\n",
    "print(type(file))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uproot.models.TTree.Model_TTree_v20"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree=file['Events']\n",
    "type(tree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['nMuon', 'Muon_pt', 'Muon_eta', 'Muon_phi', 'Muon_mass', 'Muon_charge']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [{nMuon: 2, Muon_pt: [10.8, ... -1, 1]}] type='100000 * {\"nMuon\": uint32,...'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.arrays()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "awkward.highlevel.Array"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(tree.arrays())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Branches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "branches = tree.arrays()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#branches.keys() ne marche pas car pas un dico"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 2, 1, 4, 4, 3, 2, 2, 2, 2, 2, 2, 6, 3, ... 6, 5, 2, 1, 3, 2, 1, 0, 3, 2, 3, 2, 3]\n",
      "[2, 2, 1, 4, 4, 3, 2, 2, 2, 2, 2, 2, 6, 3, ... 6, 5, 2, 1, 3, 2, 1, 0, 3, 2, 3, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "print(branches['nMuon'])\n",
    "print(tree.arrays()['nMuon'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'awkward.highlevel.Array'>\n",
      "<class 'awkward.highlevel.Array'>\n"
     ]
    }
   ],
   "source": [
    "print(type(branches))\n",
    "print(type(branches['nMuon']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10.8, 15.7], [10.5, 16.3], [3.28], ... 5.09], [3.31, 15.7], [11.4, 3.08, 4.97]]\n",
      "<class 'awkward.highlevel.Array'>\n"
     ]
    }
   ],
   "source": [
    "print(branches['Muon_pt'])\n",
    "print(type(branches['Muon_pt']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.8, 15.7]\n",
      "[3.28]\n"
     ]
    }
   ],
   "source": [
    "print(branches['Muon_pt'][0])\n",
    "print(branches['Muon_pt'][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.8, 15.7]\n",
      "[10.5, 16.3]\n",
      "[3.28]\n",
      "[11.4, 17.6, 9.62, 3.5]\n",
      "[3.28, 3.64, 32.9, 23.7]\n",
      "[3.57, 4.57, 4.37]\n",
      "[57.6, 53]\n",
      "[11.3, 23.9]\n",
      "[10.2, 14.2]\n",
      "[11.5, 3.47]\n"
     ]
    }
   ],
   "source": [
    "for k in range (10) : \n",
    "    print(branches['Muon_pt'][k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use of awkward\n",
    "import awkward as ak\n",
    "#table = ak.Table(branches) #pas besoin de le mettre on a déjà\n",
    "#le bon objet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branches[0]['nMuon'] #first event -> nb of muons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "awkward.highlevel.Record"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(branches[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nMuon = 2\n",
      "Muon_pt = [10.8, 15.7]\n",
      "Muon_eta = [1.07, -0.564]\n",
      "Muon_phi = [-0.0343, 2.54]\n",
      "Muon_mass = [0.106, 0.106]\n",
      "Muon_charge = [-1, -1]\n"
     ]
    }
   ],
   "source": [
    "event_0 = branches[0]\n",
    "for column_name in tree.keys() :\n",
    "    print(column_name, '=', event_0[column_name])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## HISTOGRAMING BASICS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### histograming basics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(branches['nMuon'])\n",
    "plt.show() #sans le show on a accès à toutes les valeurs des bins\n",
    "#qui sont renvoyées"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 3210., 13447., 48976., 21726.,     0.,  8021.,  2752.,  1066.,\n",
       "          414.,   198.]),\n",
       " array([0. , 0.8, 1.6, 2.4, 3.2, 4. , 4.8, 5.6, 6.4, 7.2, 8. ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(branches['nMuon'], bins = 10, range=(0,8))\n",
    "#bins fixe le nombre de rectangles de même largeur\n",
    "#range fixe les valeurs initiales et finales prises par les bins"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Propriétés de la distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.35286\n",
      "1.19175912851549\n",
      "0\n",
      "39\n"
     ]
    }
   ],
   "source": [
    "print(ak.mean(branches['nMuon']))\n",
    "print(ak.std(branches['nMuon']))\n",
    "print(ak.min(branches['nMuon']))\n",
    "print(ak.max(branches['nMuon']))\n",
    "#encore une fois je considère peut être pas le bon objet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Nommer les axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(branches['nMuon'], bins=10, range=(0, 10))\n",
    "plt.xlabel('Number of muons in event')\n",
    "plt.ylabel('Number of events')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cas des Jagged-Array - Fonction ak.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "awkward.highlevel.Array"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branches['Muon_pt']\n",
    "type(branches['Muon_pt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [10.8, 15.7, 10.5, ... 11.4, 3.08, 4.97] type='235286 * float32'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ak.flatten(branches['Muon_pt'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Axes en échelle logarithmique "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "plt.hist(ak.flatten(branches['Muon_pt']), bins=100, range=(0,100))\n",
    "plt.xlabel('Muon $p_{\\mathrm{T}}$ [GeV]')\n",
    "plt.ylabel('Numbers of muons per 1 GeV')\n",
    "plt.yscale('log') #y-axis logarithmic\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "plt.hist(ak.flatten(branches['Muon_pt']), bins=np.logspace(np.log10(1), np.log10(100), 100))\n",
    "plt.xlabel('Muon $p_{\\mathrm{T}}$ [GeV]')\n",
    "plt.xscale('log') #x-axis logamritmic\n",
    "plt.ylabel('Number of muons')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#si on veut que x soit en logarithmique il faut que ce soit \n",
    "#également le cas des bins et de leur largeur\n",
    "\n",
    "#on utilise logspace -> pas de range ici!\n",
    "#logspace(start,end,how many bins) -> type = list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Application pour Muon_eta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "awkward.highlevel.Array"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(branches['Muon_eta']) #-> va falloir flatten l'hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(ak.flatten(branches['Muon_eta']))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(ak.flatten(branches['Muon_eta']), range=(-3,3), bins = 100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(ak.flatten(branches['Muon_eta']),range=(-2.5,2.5), bins = 100)\n",
    "plt.xlabel('Muon $\\mathrm{\\eta}}$')\n",
    "plt.ylabel('Number of muons')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#bins et range sont utilisés pour optimiser l'histogram bining"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## COLUMNAR ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Counting - Fonction len()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['nMuon', 'Muon_pt', 'Muon_eta', 'Muon_phi', 'Muon_mass', 'Muon_charge']\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print(tree.keys())\n",
    "print(len(tree))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100000\n",
      "100000\n"
     ]
    }
   ],
   "source": [
    "print(len(branches['nMuon']))\n",
    "print(len(branches['Muon_pt']))\n",
    "# correspond au nombre d'évènements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "235286\n"
     ]
    }
   ],
   "source": [
    "s=0\n",
    "for k in range (len(branches['nMuon'])):\n",
    "    s+= branches['nMuon'][k]\n",
    "print(s)\n",
    "#un evt = une collision = plusieurs muons émis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Selection - from 1D array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [False, False, True, ... False, False] type='100000 * bool'>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branches['nMuon'] == 1\n",
    "#renvoie une liste de vrai et de faux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# single_muon_mask = (branches['nMuon'] == 1) #A MASK\n",
    "branches['nMuon'][single_muon_mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'awkward.highlevel.Array'>\n"
     ]
    }
   ],
   "source": [
    "print(type(single_muon_mask))\n",
    "#comme c'est un awk array je peux pas faire .sum()\n",
    "#il croit que je veux appeller une colone ce qui n'est pas le cas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13447\n"
     ]
    }
   ],
   "source": [
    "print(sum(single_muon_mask))\n",
    "#nbre d'évt qui respectent la condition du mask (false=0, true=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.28], [3.84], [16.1], [13.3], [8.58], ... [3.34], [4.89], [8.19], [13.3], [9.48]]\n",
      "13447\n",
      "<class 'awkward.highlevel.Array'>\n"
     ]
    }
   ],
   "source": [
    "print(branches['Muon_pt'][single_muon_mask])\n",
    "print(len(branches['Muon_pt'][single_muon_mask])) \n",
    "print(type(branches['Muon_pt'][single_muon_mask]))\n",
    "#on retrouve bien 13447"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(ak.flatten(branches['Muon_pt'][single_muon_mask]), bins=100, range=(0,100))\n",
    "plt.xlabel('Muon $p_T$ [GeV]')\n",
    "plt.ylabel('Number of single muons / 1GeV') #/GeV du au bining\n",
    "plt.show()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(ak.flatten(branches['Muon_pt'][single_muon_mask]), bins=100, range=(0,100))\n",
    "plt.xlabel('Muon $p_T$ [GeV]')\n",
    "plt.ylabel('Number of single muons / 1GeV')\n",
    "plt.yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Selection - from jagged array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La comparaison imposée par le mask se fait sur chacun des élements de l'array. Un array exactement du même format sera renvoyé. Il contiendra des True et des False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [[True, True], ... True, True, True]] type='100000 * var * bool'>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eta_mask = abs(branches['Muon_eta']) < 2\n",
    "eta_mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour compter le nombre d'élement étant True on pourra également appliquer la fonction sum, mais il faudra au préalable flatten l'array !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'awkward.highlevel.Array'>\n",
      "204564\n"
     ]
    }
   ],
   "source": [
    "print(type(eta_mask))\n",
    "print(sum(ak.flatten(eta_mask)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ak.flatten(branches['Muon_eta']))\n",
    "plt.show() #on va faire entre -2,5 et 2,5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ak.flatten(branches['Muon_eta']), bins=100, range=(-2.5,2.5) )\n",
    "plt.title('No selection')\n",
    "plt.xlabel('Muon $\\eta$')\n",
    "plt.ylabel('Number of muons')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ak.flatten(branches['Muon_eta'][eta_mask]), bins=100, range=(-2.5,2.5) )\n",
    "plt.title('With $|\\eta| < 2$ selection')\n",
    "plt.xlabel('Muon $\\eta$')\n",
    "plt.ylabel('Number of muons')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Operations on selections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [False, False, True, ... False, False] type='100000 * bool'>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "single_muon_mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut remplacer les True par des False et vice-versa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [True, True, False, ... True, True] type='100000 * bool'>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~single_muon_mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut créer l'union ou l'intersection de deux masks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[True, True], [True, True], [False], ... True], [True, True], [True, True, True]]\n",
      "[False, False, True, False, False, False, ... False, False, False, False, False]\n"
     ]
    }
   ],
   "source": [
    "print(eta_mask)\n",
    "print(single_muon_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[False, False], [False, False], [False, ... [False, False], [False, False, False]]\n",
      "[[True, True], [True, True], [True], ... True], [True, True], [True, True, True]]\n"
     ]
    }
   ],
   "source": [
    "print(eta_mask&single_muon_mask)\n",
    "# True lorsque les muons ont eta < 2 et lorsque un muon par event\n",
    "print(eta_mask|single_muon_mask)\n",
    "# True lorsque les muons ont eta <2 ou lorsque un muon par event"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "False == (False & False) --> True équivalent à la notation False == False & False. Le & est plus fort que le ==. Toujours mettre des paranthèses pour pas se tromper."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[False, False], [False, False], [False, ... [False, False], [False, False, False]]\n",
      "[[False, False], [False, False], [False, ... [False, False], [False, False, False]]\n"
     ]
    }
   ],
   "source": [
    "print(eta_mask&single_muon_mask)\n",
    "print((abs(branches['Muon_eta']) < 2) & (branches['nMuon'] == 1) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Comparing Histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist([ak.flatten(branches['Muon_pt'][single_muon_mask & eta_mask]), ak.flatten(branches['Muon_pt'][single_muon_mask & ~eta_mask])], label=['$|\\eta| < 2$', '$|\\eta| \\geq 2$'], bins=25, range =(0,50))\n",
    "plt.xlabel('Muon $p_T$ [GeV]')\n",
    "plt.ylabel('Number of single muon / 2 GeV') #(50-0)/25=2\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il n'y a pas le même nombre de muons respectant la condition orange que de muon respectant la condition bleu. Pour pouvoir comparer, on peut considérer des pourcentages en imposant la normalisation à 1. En effet, les intégrales des densités de porpbabilités valent toujours 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist([ak.flatten(branches['Muon_pt'][single_muon_mask & eta_mask]), \n",
    "          ak.flatten(branches['Muon_pt'][single_muon_mask & ~eta_mask])], \n",
    "          label=['$|\\eta| < 2$', '$|\\eta| \\geq 2$'], \n",
    "          bins=25, \n",
    "          range =(0,50),\n",
    "          density = True)\n",
    "plt.xlabel('Muon $p_T$ [GeV]')\n",
    "plt.ylabel('Number of single muon / 2 GeV') #(50-0)/25=2\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Columnar vs row-based analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4.06 s, sys: 30.3 ms, total: 4.09 s\n",
      "Wall time: 4.11 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "204564"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "eta_count = 0\n",
    "\n",
    "for event in branches['Muon_eta']:\n",
    "    for eta in event:\n",
    "        if abs(eta) < 2:\n",
    "            eta_count += 1\n",
    "\n",
    "eta_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 323 ms, sys: 4.36 ms, total: 328 ms\n",
      "Wall time: 328 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "204564"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "sum(ak.flatten((abs(branches['Muon_eta']) < 2)))\n",
    "\n",
    "#beaucoup plus rapide de passer par des masques\n",
    "#éviter les boucles for autant que possible \n",
    "# -> plutot utiliser une sum d'un array de booleens"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GETTING PHYSICS-RELEVANT INFORMATION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obejctif : trouver la valeur de la masse invariante des di-muons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 2, 1, 4, 4, 3, 2, 2, 2, 2, 2, 2, 6, 3, ... 6, 5, 2, 1, 3, 2, 1, 0, 3, 2, 3, 2, 3]\n",
      "[True, True, False, False, False, False, ... False, False, True, False, True, False]\n",
      "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
     ]
    }
   ],
   "source": [
    "#CREER LE MASK\n",
    "two_muons_mask = ( branches['nMuon'] == 2 )\n",
    "print(branches['nMuon'])\n",
    "print(two_muons_mask)\n",
    "print(branches['nMuon'][two_muons_mask])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [2, 2, 2, 2, 2, 2, ... 2, 2, 2, 2, 2, 2] type='48976 * uint32'>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#CREER UN ENSEMBLE DE DONNÉES MASQUEES\n",
    "two_muons_table = branches['nMuon'][two_muons_mask]\n",
    "two_muons_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'awkward' has no attribute 'Methods'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-108-97f7f2fa8185>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot_methods/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# BSD 3-Clause License; see https://github.com/scikit-hep/uproot-methods/blob/master/LICENSE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTVector2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTVector2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTVector2Array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTVector3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTVector3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTVector3Array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTLorentzVector\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTLorentzVector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTLorentzVectorArray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPtEtaPhiMassLorentzVector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot_methods/classes/TVector2.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTVector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0muproot_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mCommon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot_methods/base.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mawkward\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mclass\u001b[0m \u001b[0mROOTMethods\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mawkward\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMethods\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0m_arraymethods\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'awkward' has no attribute 'Methods'"
     ]
    }
   ],
   "source": [
    "import uproot_methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "Install XRootD python bindings with:\n\n    conda install -c conda-forge xrootd\n\n(or download from http://xrootd.org/dload.html and manually compile with cmake; setting PYTHONPATH and LD_LIBRARY_PATH appropriately).",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/extras.py\u001b[0m in \u001b[0;36mXRootD_client\u001b[0;34m()\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m         \u001b[0;32mimport\u001b[0m \u001b[0mXRootD\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m         \u001b[0;32mimport\u001b[0m \u001b[0mXRootD\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'XRootD'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-1a7b124abb97>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muproot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"DecayTree\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/reading.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(path, object_cache, array_cache, custom_classes, decompression_executor, interpretation_executor, **options)\u001b[0m\n\u001b[1;32m    136\u001b[0m         )\n\u001b[1;32m    137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m     file = ReadOnlyFile(\n\u001b[0m\u001b[1;32m    139\u001b[0m         \u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0mobject_cache\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobject_cache\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/reading.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file_path, object_cache, array_cache, custom_classes, decompression_executor, interpretation_executor, **options)\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m         )\n\u001b[0;32m--> 552\u001b[0;31m         self._source = Source(\n\u001b[0m\u001b[1;32m    553\u001b[0m             \u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_options\u001b[0m  \u001b[0;31m# NOTE: a comma after **options breaks Python 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    554\u001b[0m         )\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/source/xrootd.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file_path, **options)\u001b[0m\n\u001b[1;32m    432\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_path\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    433\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_bytes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 434\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    435\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/source/xrootd.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m         self._executor = uproot.source.futures.ResourceThreadPoolExecutor(\n\u001b[0;32m--> 438\u001b[0;31m             [\n\u001b[0m\u001b[1;32m    439\u001b[0m                 \u001b[0mXRootDResource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0muproot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_util\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_workers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/source/xrootd.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    437\u001b[0m         self._executor = uproot.source.futures.ResourceThreadPoolExecutor(\n\u001b[1;32m    438\u001b[0m             [\n\u001b[0;32m--> 439\u001b[0;31m                 \u001b[0mXRootDResource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    440\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0muproot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_util\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_workers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m             ]\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/source/xrootd.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file_path, timeout)\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m         \u001b[0mXRootD_client\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muproot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXRootD_client\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_path\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/uproot/extras.py\u001b[0m in \u001b[0;36mXRootD_client\u001b[0;34m()\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m         raise ImportError(\n\u001b[0m\u001b[1;32m     69\u001b[0m             \"\"\"Install XRootD python bindings with:\n\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: Install XRootD python bindings with:\n\n    conda install -c conda-forge xrootd\n\n(or download from http://xrootd.org/dload.html and manually compile with cmake; setting PYTHONPATH and LD_LIBRARY_PATH appropriately)."
     ]
    }
   ],
   "source": [
    "tree = uproot.open(filename)[\"DecayTree\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
