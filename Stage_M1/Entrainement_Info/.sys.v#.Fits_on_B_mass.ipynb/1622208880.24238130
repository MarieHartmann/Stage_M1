{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "computational-contribution",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/eos/user/m/mahartma/.local/lib/python3.8/site-packages/zfit/__init__.py:48: UserWarning: TensorFlow warnings are by default suppressed by zfit. In order to show them, set the environment variable ZFIT_DISABLE_TF_WARNINGS=0. In order to suppress the TensorFlow warnings AND this warning, set ZFIT_DISABLE_TF_WARNINGS=1.\n",
      "  warnings.warn(\"TensorFlow warnings are by default suppressed by zfit.\"\n"
     ]
    },
    {
     "ename": "ImportError",
     "evalue": "This version of TensorFlow Probability requires TensorFlow version >= 2.4; Detected an installation of version 2.3.0. Please upgrade TensorFlow to proceed.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-fd7cc66c7088>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/zfit/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     70\u001b[0m                        f\" only with TF >= 2\")\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m from . import (constraint, core, data, dimension, exception, func, loss,\n\u001b[0m\u001b[1;32m     73\u001b[0m                minimize, param, pdf, sample, z)\n\u001b[1;32m     74\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mData\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/zfit/constraint.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraint\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGaussianConstraint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSimpleConstraint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mztyping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/zfit/core/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#  Copyright (c) 2021 zfit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m from . import (basefunc, basemodel, baseobject, basepdf, data, integration,\n\u001b[0m\u001b[1;32m      4\u001b[0m                interfaces, loss, operations, parameter, sample, space)\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/zfit/core/basefunc.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettings\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mztypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mztyping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mbasemodel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0minterfaces\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mZfitFunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/zfit/core/basemodel.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdotmap\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDotMap\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow_probability\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmcmc\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# `python/__init__.py` as necessary.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow_probability\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msubstrates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;31m# from tensorflow_probability.google import staging  # DisableOnExport\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# from tensorflow_probability.google import tfp_google  # DisableOnExport\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/substrates/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0m__future__\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mprint_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow_probability\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minternal\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mall_util\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow_probability\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minternal\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlazy_loader\u001b[0m  \u001b[0;31m# pylint: disable=g-direct-tensorflow-import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/python/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    140\u001b[0m   \u001b[0;31m# Non-lazy load of packages that register with tensorflow or keras.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mpkg_name\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_maybe_nonlazy_load\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m     \u001b[0mdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpkg_name\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Forces loading the package from its lazy loader.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/python/internal/lazy_loader.py\u001b[0m in \u001b[0;36m__dir__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__dir__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mmodule\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/python/internal/lazy_loader.py\u001b[0m in \u001b[0;36m_load\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m\"\"\"Load the module and insert it into the parent's globals.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_on_first_access\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_on_first_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_on_first_access\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m     \u001b[0;31m# Import the target module and insert it into the parent's namespace\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/tensorflow_probability/python/__init__.py\u001b[0m in \u001b[0;36m_validate_tf_environment\u001b[0;34m(package)\u001b[0m\n\u001b[1;32m     61\u001b[0m   if (distutils.version.LooseVersion(tf.__version__) <\n\u001b[1;32m     62\u001b[0m       distutils.version.LooseVersion(required_tensorflow_version)):\n\u001b[0;32m---> 63\u001b[0;31m     raise ImportError(\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;34m'This version of TensorFlow Probability requires TensorFlow '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0;34m'version >= {required}; Detected an installation of version {present}. '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: This version of TensorFlow Probability requires TensorFlow version >= 2.4; Detected an installation of version 2.3.0. Please upgrade TensorFlow to proceed."
     ]
    }
   ],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "reverse-foundation",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "above-recognition",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "proud-tyler",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "violent-gathering",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "pediatric-letters",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "pacific-placement",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mplhep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "clinical-portable",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "integrated-percentage",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "consolidated-roberts",
   "metadata": {},
   "source": [
    "# Création d'un DataFrame contenant la masse du méson B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "connected-integer",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "soviet-roberts",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = uproot.open(filename)[\"DecayTree\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mature-cookbook",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = tree.arrays(library=\"pandas\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "confidential-mixer",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('H1_P = sqrt(H1_PX**2 + H1_PY**2 + H1_PZ**2)', inplace=True)\n",
    "df.eval('H2_P = sqrt(H2_PX**2 + H2_PY**2 + H2_PZ**2)', inplace=True)\n",
    "df.eval('H3_P = sqrt(H3_PX**2 + H3_PY**2 + H3_PZ**2)', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "confused-painting",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_P = sqrt((H1_PX + H2_PX + H3_PX)**2 + (H1_PY + H2_PY + H3_PY)**2 + (H1_PZ + H2_PZ + H3_PZ)**2 )', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "competitive-bennett",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_M =(sqrt((sqrt(493.677**2 + H1_P**2) + sqrt(493.677**2 + H2_P**2) + sqrt(493.677**2 + H3_P**2))**2 - B_P**2 ))', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "impressed-prisoner",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alien-catalog",
   "metadata": {},
   "source": [
    "# Application de filtres pour s'assurer que la masse que nous avons reconstruite est bien celle du méson B->K+K-K+"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "remarkable-cycling",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbK (proba que la particule Hi soit un kaon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "green-projection",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbK > 0.8 and H2_ProbK > 0.8 and H3_ProbK > 0.8\")\n",
    "df = df.query(\"H1_ProbK > 0.5 and H2_ProbK > 0.5 and H3_ProbK > 0.5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cleared-hospital",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbPi (proba que la particule Hi soit un pion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "utility-gravity",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbPi < 0.2 and H2_ProbPi < 0.2 and H3_ProbPi < 0.2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nuclear-uruguay",
   "metadata": {},
   "source": [
    "##### Histogramme de la masse pour voir si notre résultat est satisfaisant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beginning-winner",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_M'], range=(5200,5375), bins=100, histtype='step')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breathing-device",
   "metadata": {},
   "source": [
    "# Mise en place des outils nécessaires aux fits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unknown-decision",
   "metadata": {},
   "source": [
    "##### Définition de l'espace observable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "distinguished-drain",
   "metadata": {},
   "outputs": [],
   "source": [
    "obs = zfit.Space('x', limits=(5200.,5375.))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sticky-governor",
   "metadata": {},
   "source": [
    "##### Définition des data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "serious-multiple",
   "metadata": {},
   "outputs": [],
   "source": [
    "#B_M = df['B_M'].to_numpy()\n",
    "B_M = df['B_M'].to_numpy()\n",
    "data = zfit.Data.from_numpy(obs=obs, array=B_M, weights=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "elegant-review",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "affected-bulgaria",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('écart type de B_M = {}'.format(B_M.std()))\n",
    "print('nombre de données de B_M = {}'.format(len(B_M)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "public-norfolk",
   "metadata": {},
   "source": [
    "# FITS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "based-absence",
   "metadata": {},
   "outputs": [],
   "source": [
    "minimizer = zfit.minimize.Minuit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "incoming-short",
   "metadata": {},
   "outputs": [],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "friendly-wayne",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "smoking-table",
   "metadata": {},
   "source": [
    "Dans la partie histogramme, il vaut mieux utiliser df['B_M'] plutôt que data.\n",
    "On réservera data pour mettre en argument des fonctions zfit (cela ne marche pas avec une série comme df['B_M'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "written-hanging",
   "metadata": {},
   "source": [
    "## GAUSS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "organic-happening",
   "metadata": {},
   "source": [
    "### Gauss classique"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "signed-costume",
   "metadata": {},
   "source": [
    "##### Définition des paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "positive-commonwealth",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_gauss = zfit.Parameter('sigma_gauss', 197.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "raised-reputation",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_gauss = zfit.Parameter('mu_gauss', 5279.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "improving-castle",
   "metadata": {},
   "source": [
    "##### Définition du modèle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "union-password",
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_gauss, sigma=sigma_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "central-bonus",
   "metadata": {},
   "source": [
    "##### Définition de la 'loss function'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "divine-project",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_gauss = zfit.loss.UnbinnedNLL(model=gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "congressional-sandwich",
   "metadata": {},
   "source": [
    "##### Définition du minimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "golden-humanitarian",
   "metadata": {},
   "source": [
    "#voir en dessous de fit, je définis le même pour tout le monde"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "martial-great",
   "metadata": {},
   "source": [
    "##### Minimisation du modèle et impression de résultats obtenus pour les paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "protective-termination",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_gauss = minimizer.minimize(nll_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adjacent-scale",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "proved-cement",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "biological-wedding",
   "metadata": {},
   "source": [
    "##### Vérification de la validité de notre fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "proprietary-kenya",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "advance-diameter",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecological-johnston",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_gauss = zfit.run(gauss.pdf(x_plot, norm_range=obs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecological-repository",
   "metadata": {},
   "outputs": [],
   "source": [
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "missing-aerospace",
   "metadata": {},
   "source": [
    "### Extended Gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "portuguese-fundamentals",
   "metadata": {},
   "source": [
    "##### Opérations zfit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "conceptual-settle",
   "metadata": {},
   "source": [
    "Le yield est un paramètre qu'il faut définir lorsque l'on veut effectuer un extended fit. On lui donnera comme valeur maximale la len(df['B_M'])."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "posted-siemens",
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_ex_gauss = zfit.Parameter(\"yield_ex_gauss\", 100, 0, 2615)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "empirical-hygiene",
   "metadata": {},
   "source": [
    "Un extended fit s'effectue à partir d'un modèle déjà défini. Ici on réutilise le model gauss défini précedemment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "grateful-public",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_gauss = gauss.create_extended(yield_ex_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "complete-jefferson",
   "metadata": {},
   "source": [
    "La loss function est légeremment différente pour les extended fits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "innocent-solution",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_gauss = zfit.loss.ExtendedUnbinnedNLL(model=ex_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "military-demonstration",
   "metadata": {},
   "source": [
    "On obtient les résultats de la même manière que pour une extended fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "underlying-exclusive",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_gauss = minimizer.minimize(nll_ex_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "extra-supervision",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "reflected-newspaper",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))\n",
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "handy-tuning",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "severe-large",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_ex_gauss = zfit.run(ex_gauss.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "southern-timothy",
   "metadata": {},
   "source": [
    "Remarque : l'histogramme est le même dans les deux cas. La seule chose qui a changé, c'est que l'on a accès au nombre d'évènements dans le pic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "heard-closer",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tested-singing",
   "metadata": {},
   "source": [
    "         "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "reflected-pattern",
   "metadata": {},
   "source": [
    "       "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "compact-girlfriend",
   "metadata": {},
   "source": [
    "## CRISTAL BALL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loaded-default",
   "metadata": {},
   "source": [
    "##### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aging-retailer",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_cb = zfit.Parameter('mu_cb', 5279., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hollywood-directory",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_cb = zfit.Parameter('sigma_cb', 20., 0., 400.)\n",
    "#sigma max environ deux fois la sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "whole-muslim",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_cb = zfit.Parameter('alpha_cb',0.5, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pregnant-regular",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_cb = zfit.Parameter('n_cb', 1., 0., 100.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "blond-purse",
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_cb4 = zfit.Parameter(\"yield_cb4\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nutritional-proxy",
   "metadata": {},
   "source": [
    "##### Model et Extended Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "responsible-jurisdiction",
   "metadata": {},
   "outputs": [],
   "source": [
    "cb = zfit.pdf.CrystalBall(obs=obs, mu=mu_cb, sigma=sigma_cb, alpha=alpha_cb, n=n_cb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sunset-twins",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_cb = cb.create_extended(yield_cb4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lovely-silicon",
   "metadata": {},
   "source": [
    "##### Loss functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bridal-dylan",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_cb = zfit.loss.UnbinnedNLL(model=cb, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "smart-essex",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_cb = zfit.loss.ExtendedUnbinnedNLL(model=ex_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "objective-bullet",
   "metadata": {},
   "source": [
    "##### Résultas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "laden-march",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_cb = minimizer.minimize(nll_cb)\n",
    "result_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "directed-nudist",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_cb.params[mu_cb]))\n",
    "print(result_cb.valid)\n",
    "print(result_cb.converged)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ambient-newspaper",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_cb = minimizer.minimize(nll_ex_cb)\n",
    "result_ex_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "essential-motivation",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_ex_cb.params[mu_cb]))\n",
    "print(result_ex_cb.valid)\n",
    "print(result_ex_cb.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "executed-portfolio",
   "metadata": {},
   "source": [
    "##### Histogrammes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "virtual-percentage",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_ex_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "entitled-forth",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_cb = zfit.run(cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fiscal-protection",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "apart-miami",
   "metadata": {},
   "source": [
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recognized-wedding",
   "metadata": {},
   "source": [
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "hungry-covering",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "primary-saturday",
   "metadata": {},
   "source": [
    "# FIT_TRAINING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "activated-sperm",
   "metadata": {},
   "source": [
    "### _Paramètres_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "serial-damages",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_ = zfit.Parameter(f\"mu_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "convenient-filter",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_bis = zfit.Parameter(f\"mu_bis_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "curious-broad",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_ = zfit.Parameter(f\"sigma_{rand_int}\", 21., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "compatible-transfer",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_bis = zfit.Parameter(f\"sigma__bis{rand_int}\", 50., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "strong-bookmark",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "alpha_ = zfit.Parameter(f\"alpha_{rand_int}\", 0.52, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informed-translation",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_ = zfit.Parameter(f\"n_{rand_int}\", 1., 0., 99.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "corporate-influence",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "l = zfit.Parameter(f\"l_{rand_int}\", -0.5, -1., -0.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "considerable-console",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "yield_ = zfit.Parameter(f\"yield_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "raised-modeling",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_sig = zfit.Parameter(f\"n_sig_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "instrumental-beatles",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_bkg = zfit.Parameter(f\"n_bkg_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "certified-mission",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "frac_ = zfit.Parameter(f\"frac_{rand_int}\", 0.8, 0., 1.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "satisfactory-overall",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "operational-table",
   "metadata": {},
   "source": [
    "### _Modèles_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "interracial-arthur",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "quarterly-domestic",
   "metadata": {},
   "source": [
    "On va sommer des pdf extended qui vont donner un SumPDF qui le sera également. Pour cette raison, je ne précise pas ex pour extended sauf pour les composantes initiales."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "conceptual-decimal",
   "metadata": {},
   "source": [
    "On précise n_bkg_ et n_sig car il n'y a pas autant d'évènements de bruits que de signal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "composed-saint",
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)\n",
    "#il faut mettre un tiret du bas car sinon il pense que lambda définit une fonction\n",
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_cb = cb.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "interstate-feature",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "exp_cb = zfit.pdf.SumPDF(pdfs=[ex_cb,ex_exp]) \n",
    "#already extended because sum of extended"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "foster-moderator",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "familiar-terminology",
   "metadata": {},
   "outputs": [],
   "source": [
    "cb_bis = zfit.pdf.CrystalBall(obs=obs, mu=mu_, sigma=sigma_, alpha=alpha_, n=n_)\n",
    "ex_cb = cb.create_extended(n_sig)\n",
    "ex_cb_bis = cb_bis.create_extended(n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adequate-letters",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_cb = zfit.pdf.SumPDF(pdfs=[ex_cb, ex_cb_bis])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "filled-melbourne",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "known-december",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "secure-graduate",
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_, sigma=sigma_)\n",
    "gauss_bis = zfit.pdf.Gauss(obs=obs, mu=mu_bis, sigma=sigma_bis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "gentle-boating",
   "metadata": {},
   "outputs": [],
   "source": [
    "gaussians = zfit.pdf.SumPDF(pdfs=[gauss, gauss_bis], fracs=frac_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "established-dodge",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_gauss = gaussians.create_extended(yield_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "refined-mountain",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "electrical-stockholm",
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "solid-survey",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_two_gauss = gaussians.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sound-hacker",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = zfit.pdf.SumPDF(pdfs=[ex_two_gauss, ex_exp])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eleven-harmony",
   "metadata": {},
   "source": [
    "### _Loss Function_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nutritional-multimedia",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "perceived-protest",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_exp_cb = zfit.loss.ExtendedUnbinnedNLL(model=exp_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "norwegian-contract",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "auburn-sydney",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_cb = zfit.loss.ExtendedUnbinnedNLL(model=two_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "flying-native",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "colonial-screw",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_gauss = zfit.loss.ExtendedUnbinnedNLL(model=two_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "improving-times",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "clean-maker",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_model = zfit.loss.ExtendedUnbinnedNLL(model=model, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "substantial-brazil",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "divine-norman",
   "metadata": {},
   "source": [
    "### _Résultats_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tight-myanmar",
   "metadata": {},
   "source": [
    "**Exponential + CB**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accompanied-poverty",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_exp_cb = minimizer.minimize(nll_exp_cb)\n",
    "result_exp_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "desirable-jaguar",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_exp_cb.params[n_sig]['value']\n",
    "nbkg = result_exp_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "#df['B_M'].shape[0]\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "south-stewart",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with Extended Cristal Ball + Exponential functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "legal-victor",
   "metadata": {},
   "source": [
    "Two CB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "challenging-desire",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_two_cb = minimizer.minimize(nll_two_cb)\n",
    "result_two_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "quiet-crystal",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_two_cb.params[n_sig]['value']\n",
    "nbkg = result_two_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "documented-athletics",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(two_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with two Crystal Ball functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "impaired-intellectual",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "patent-senator",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_two_gauss = minimizer.minimize(nll_two_gauss)\n",
    "result_two_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "latin-attachment",
   "metadata": {},
   "outputs": [],
   "source": [
    "nevents = result_two_gauss.params[yield_]['value']\n",
    "fraction = result_two_gauss.params[frac_]['value']\n",
    "ng = fraction*nevents\n",
    "ng_bis = (1-fraction)*nevents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "breathing-destination",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g = zfit.run(gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g_bis = zfit.run(gauss_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_g*ng/100*obs.area(), color='pink', label='Bkg (gauss)')\n",
    "plt.plot(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green', label='Sig (gauss)')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot_g*ng/100*obs.area(), color='pink')\n",
    "plt.fill_between(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green')\n",
    "\n",
    "plt.title('Fit with two Gaussians')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "treated-tablet",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "determined-incident",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_model = minimizer.minimize(nll_model)\n",
    "result_model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "genuine-shirt",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_model.params[n_sig]['value']\n",
    "nbkg = result_model.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "baking-hudson",
   "metadata": {},
   "outputs": [],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50\n",
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)\n",
    "starting_bin = bin_edges[0]\n",
    "final_bin = bin_edges[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "located-adrian",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_sig = zfit.run(ex_two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_bkg = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color ='black', histtype='errorbar', label='Data')\n",
    "plt.plot(x_plot, y_plot*nevents/nb_bins*obs.area(), color='black', label='Total Fit')\n",
    "#plt.plot(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "#plt.plot(x_plot, y_plot_sig*nsig/nb_bins*obs.area(), color='#de2d26', label='$B^+ \\longrightarrow K^+K^-K^+$')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot*nevents/nb_bins*obs.area() , color= '#de2d26', label=\"$B^{+}$ $\\longrightarrow$ $K^{+}K^{-}K^{+}$\")\n",
    "plt.fill_between(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "\n",
    "plt.xlim(starting_bin,final_bin)\n",
    "plt.xlabel(\"$m(B^+)$ [MeV/$c^2$]\")\n",
    "plt.ylabel(\"Candidates / ({} MeV/$c^2$)\".format(round((final_bin-starting_bin)/nb_bins,2)))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "defensive-rotation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "suitable-complement",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
