{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "second-illness",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'zfit'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-fd7cc66c7088>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'zfit'"
     ]
    }
   ],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bound-atlas",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "honey-mustang",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "administrative-respect",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "pressing-lying",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "musical-stone",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "monetary-truth",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'mplhep'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-95a92a8da0c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mmplhep\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'mplhep'"
     ]
    }
   ],
   "source": [
    "import mplhep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "turned-aluminum",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "approved-falls",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from matplotlib import rc\n",
    "#rc('font',**{'family':'serif','serif':['Roman']})\n",
    "#rc('text', usetex=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sharing-entrepreneur",
   "metadata": {},
   "source": [
    "# Création d'un DataFrame contenant la masse du méson B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "separate-fluid",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "automated-programmer",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = uproot.open(filename)[\"DecayTree\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "environmental-suicide",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = tree.arrays(library=\"pandas\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "geographic-control",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('H1_P = sqrt(H1_PX**2 + H1_PY**2 + H1_PZ**2)', inplace=True)\n",
    "df.eval('H2_P = sqrt(H2_PX**2 + H2_PY**2 + H2_PZ**2)', inplace=True)\n",
    "df.eval('H3_P = sqrt(H3_PX**2 + H3_PY**2 + H3_PZ**2)', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "first-alloy",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_P = sqrt((H1_PX + H2_PX + H3_PX)**2 + (H1_PY + H2_PY + H3_PY)**2 + (H1_PZ + H2_PZ + H3_PZ)**2 )', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "resident-mother",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_M =(sqrt((sqrt(493.677**2 + H1_P**2) + sqrt(493.677**2 + H2_P**2) + sqrt(493.677**2 + H3_P**2))**2 - B_P**2 ))', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "textile-cartridge",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secret-commodity",
   "metadata": {},
   "source": [
    "# Application de filtres pour s'assurer que la masse que nous avons reconstruite est bien celle du méson B->K+K-K+"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "persistent-mailing",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbK (proba que la particule Hi soit un kaon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "decent-twins",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbK > 0.8 and H2_ProbK > 0.8 and H3_ProbK > 0.8\")\n",
    "df = df.query(\"H1_ProbK > 0.5 and H2_ProbK > 0.5 and H3_ProbK > 0.5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "union-convergence",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbPi (proba que la particule Hi soit un pion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "reflected-shepherd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbPi < 0.2 and H2_ProbPi < 0.2 and H3_ProbPi < 0.2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "approved-threshold",
   "metadata": {},
   "source": [
    "##### Histogramme de la masse pour voir si notre résultat est satisfaisant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hidden-newsletter",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(df['B_M'], range=(5200,5375), bins=100, histtype='step')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "trying-powder",
   "metadata": {},
   "source": [
    "# Mise en place des outils nécessaires aux fits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "split-jason",
   "metadata": {},
   "source": [
    "##### Définition de l'espace observable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caring-carnival",
   "metadata": {},
   "outputs": [],
   "source": [
    "obs = zfit.Space('x', limits=(5200.,5375.))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "happy-couple",
   "metadata": {},
   "source": [
    "##### Définition des data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "altered-energy",
   "metadata": {},
   "outputs": [],
   "source": [
    "#B_M = df['B_M'].to_numpy()\n",
    "B_M = df['B_M'].to_numpy()\n",
    "data = zfit.Data.from_numpy(obs=obs, array=B_M, weights=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adopted-rogers",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "innocent-nitrogen",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'B_M' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-5deba1b98824>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'écart type de B_M = {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mB_M\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'nombre de données de B_M = {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mB_M\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'B_M' is not defined"
     ]
    }
   ],
   "source": [
    "print('écart type de B_M = {}'.format(B_M.std()))\n",
    "print('nombre de données de B_M = {}'.format(len(B_M)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "connected-webcam",
   "metadata": {},
   "source": [
    "# FITS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "presidential-auction",
   "metadata": {},
   "outputs": [],
   "source": [
    "minimizer = zfit.minimize.Minuit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "impressive-threat",
   "metadata": {},
   "outputs": [],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "agricultural-commissioner",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "organic-tactics",
   "metadata": {},
   "source": [
    "Dans la partie histogramme, il vaut mieux utiliser df['B_M'] plutôt que data.\n",
    "On réservera data pour mettre en argument des fonctions zfit (cela ne marche pas avec une série comme df['B_M'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "continental-christopher",
   "metadata": {},
   "source": [
    "## GAUSS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fixed-controversy",
   "metadata": {},
   "source": [
    "### Gauss classique"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "posted-amplifier",
   "metadata": {},
   "source": [
    "##### Définition des paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "palestinian-marks",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_gauss = zfit.Parameter('sigma_gauss', 197.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cooperative-polyester",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_gauss = zfit.Parameter('mu_gauss', 5279.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "otherwise-possession",
   "metadata": {},
   "source": [
    "##### Définition du modèle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "banned-norfolk",
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_gauss, sigma=sigma_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "opposite-jason",
   "metadata": {},
   "source": [
    "##### Définition de la 'loss function'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "excessive-insured",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_gauss = zfit.loss.UnbinnedNLL(model=gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "serial-hayes",
   "metadata": {},
   "source": [
    "##### Définition du minimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "intermediate-analysis",
   "metadata": {},
   "source": [
    "#voir en dessous de fit, je définis le même pour tout le monde"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "retained-penny",
   "metadata": {},
   "source": [
    "##### Minimisation du modèle et impression de résultats obtenus pour les paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "boxed-position",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_gauss = minimizer.minimize(nll_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "boxed-thursday",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "answering-smile",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'result_gauss' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-07a2b7de82fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The value of the B meson mass is : {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_gauss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmu_gauss\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'result_gauss' is not defined"
     ]
    }
   ],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "velvet-commission",
   "metadata": {},
   "source": [
    "##### Vérification de la validité de notre fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rough-persian",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "timely-nature",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fresh-williams",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_gauss = zfit.run(gauss.pdf(x_plot, norm_range=obs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "international-contents",
   "metadata": {},
   "outputs": [],
   "source": [
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "several-demographic",
   "metadata": {},
   "source": [
    "### Extended Gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fewer-complex",
   "metadata": {},
   "source": [
    "##### Opérations zfit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "opposed-constraint",
   "metadata": {},
   "source": [
    "Le yield est un paramètre qu'il faut définir lorsque l'on veut effectuer un extended fit. On lui donnera comme valeur maximale la len(df['B_M'])."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "treated-category",
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_ex_gauss = zfit.Parameter(\"yield_ex_gauss\", 100, 0, 2615)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "guilty-discharge",
   "metadata": {},
   "source": [
    "Un extended fit s'effectue à partir d'un modèle déjà défini. Ici on réutilise le model gauss défini précedemment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "interstate-klein",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_gauss = gauss.create_extended(yield_ex_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "welcome-panama",
   "metadata": {},
   "source": [
    "La loss function est légeremment différente pour les extended fits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "treated-cause",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_gauss = zfit.loss.ExtendedUnbinnedNLL(model=ex_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "several-conversion",
   "metadata": {},
   "source": [
    "On obtient les résultats de la même manière que pour une extended fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "civic-plaza",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_gauss = minimizer.minimize(nll_ex_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "modern-remove",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "finite-medline",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))\n",
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "polish-canyon",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "residential-holiday",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'zfit' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-89820b1472d1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_plot_ex_gauss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mex_gauss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_range\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmplhep\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcounts\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbin_edges\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myerr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhisttype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'errorbar'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_plot_ex_gauss\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_M'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marea\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'pink'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'zfit' is not defined"
     ]
    }
   ],
   "source": [
    "y_plot_ex_gauss = zfit.run(ex_gauss.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "previous-foundation",
   "metadata": {},
   "source": [
    "Remarque : l'histogramme est le même dans les deux cas. La seule chose qui a changé, c'est que l'on a accès au nombre d'évènements dans le pic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "thorough-australia",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pursuant-history",
   "metadata": {},
   "source": [
    "         "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "front-disability",
   "metadata": {},
   "source": [
    "       "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "selected-flash",
   "metadata": {},
   "source": [
    "## CRISTAL BALL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "charitable-government",
   "metadata": {},
   "source": [
    "##### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "industrial-strike",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_cb = zfit.Parameter('mu_cb', 5279., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "freelance-aviation",
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_cb = zfit.Parameter('sigma_cb', 20., 0., 400.)\n",
    "#sigma max environ deux fois la sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "incomplete-penny",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_cb = zfit.Parameter('alpha_cb',0.5, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "equivalent-aside",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_cb = zfit.Parameter('n_cb', 1., 0., 100.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "diagnostic-reference",
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_cb4 = zfit.Parameter(\"yield_cb4\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "outstanding-musical",
   "metadata": {},
   "source": [
    "##### Model et Extended Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "alone-monaco",
   "metadata": {},
   "outputs": [],
   "source": [
    "cb = zfit.pdf.CrystalBall(obs=obs, mu=mu_cb, sigma=sigma_cb, alpha=alpha_cb, n=n_cb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "covered-number",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_cb = cb.create_extended(yield_cb4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "white-marina",
   "metadata": {},
   "source": [
    "##### Loss functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "elder-memorial",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_cb = zfit.loss.UnbinnedNLL(model=cb, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "broke-defendant",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_cb = zfit.loss.ExtendedUnbinnedNLL(model=ex_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "missing-supplement",
   "metadata": {},
   "source": [
    "##### Résultas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accompanied-general",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_cb = minimizer.minimize(nll_cb)\n",
    "result_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "wireless-family",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_cb.params[mu_cb]))\n",
    "print(result_cb.valid)\n",
    "print(result_cb.converged)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "insured-offer",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_cb = minimizer.minimize(nll_ex_cb)\n",
    "result_ex_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rocky-visiting",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_ex_cb.params[mu_cb]))\n",
    "print(result_ex_cb.valid)\n",
    "print(result_ex_cb.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secure-malaysia",
   "metadata": {},
   "source": [
    "##### Histogrammes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "common-joint",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_ex_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "seasonal-referral",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'zfit' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-e6ab57dd4240>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_plot_cb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_range\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmplhep\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcounts\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbin_edges\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myerr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhisttype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'errorbar'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_plot_cb\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_M'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marea\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'pink'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Fit with Extended Cristal Ball'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'zfit' is not defined"
     ]
    }
   ],
   "source": [
    "y_plot_cb = zfit.run(cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "configured-banking",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "metropolitan-algeria",
   "metadata": {},
   "source": [
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "satisfied-verification",
   "metadata": {},
   "source": [
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nervous-poland",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "continuing-robert",
   "metadata": {},
   "source": [
    "# FIT_TRAINING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "exotic-twenty",
   "metadata": {},
   "source": [
    "### _Paramètres_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "complex-employee",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_ = zfit.Parameter(f\"mu_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hindu-likelihood",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_bis = zfit.Parameter(f\"mu_bis_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "smaller-bulgaria",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_ = zfit.Parameter(f\"sigma_{rand_int}\", 21., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "continuous-silicon",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_bis = zfit.Parameter(f\"sigma__bis{rand_int}\", 50., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "colonial-rally",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "alpha_ = zfit.Parameter(f\"alpha_{rand_int}\", 0.52, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "alpine-manual",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_ = zfit.Parameter(f\"n_{rand_int}\", 1., 0., 99.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "failing-fighter",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "l = zfit.Parameter(f\"l_{rand_int}\", -0.5, -1., -0.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stuck-virus",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "yield_ = zfit.Parameter(f\"yield_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "treated-mambo",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_sig = zfit.Parameter(f\"n_sig_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "personalized-deposit",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_bkg = zfit.Parameter(f\"n_bkg_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ceramic-stadium",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "frac_ = zfit.Parameter(f\"frac_{rand_int}\", 0.8, 0., 1.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "israeli-smart",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "colonial-gravity",
   "metadata": {},
   "source": [
    "### _Modèles_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stuck-twist",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "offensive-highway",
   "metadata": {},
   "source": [
    "On va sommer des pdf extended qui vont donner un SumPDF qui le sera également. Pour cette raison, je ne précise pas ex pour extended sauf pour les composantes initiales."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "backed-cloud",
   "metadata": {},
   "source": [
    "On précise n_bkg_ et n_sig car il n'y a pas autant d'évènements de bruits que de signal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "operating-evans",
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)\n",
    "#il faut mettre un tiret du bas car sinon il pense que lambda définit une fonction\n",
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_cb = cb.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "subtle-panama",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "exp_cb = zfit.pdf.SumPDF(pdfs=[ex_cb,ex_exp]) \n",
    "#already extended because sum of extended"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "difficult-chrome",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "constant-civilian",
   "metadata": {},
   "outputs": [],
   "source": [
    "cb_bis = zfit.pdf.CrystalBall(obs=obs, mu=mu_, sigma=sigma_, alpha=alpha_, n=n_)\n",
    "ex_cb = cb.create_extended(n_sig)\n",
    "ex_cb_bis = cb_bis.create_extended(n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "italic-stress",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'zfit' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-7981b42f1698>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtwo_cb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzfit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSumPDF\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpdfs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mex_cb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mex_cb_bis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'zfit' is not defined"
     ]
    }
   ],
   "source": [
    "two_cb = zfit.pdf.SumPDF(pdfs=[ex_cb, ex_cb_bis])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "available-cradle",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sudden-valentine",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "apart-cardiff",
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_, sigma=sigma_)\n",
    "gauss_bis = zfit.pdf.Gauss(obs=obs, mu=mu_bis, sigma=sigma_bis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "junior-charger",
   "metadata": {},
   "outputs": [],
   "source": [
    "gaussians = zfit.pdf.SumPDF(pdfs=[gauss, gauss_bis], fracs=frac_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rational-logistics",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_gauss = gaussians.create_extended(yield_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stylish-evolution",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "corresponding-error",
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "proud-cycling",
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_two_gauss = gaussians.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "responsible-torture",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = zfit.pdf.SumPDF(pdfs=[ex_two_gauss, ex_exp])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "parliamentary-toolbox",
   "metadata": {},
   "source": [
    "### _Loss Function_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "blank-tower",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abandoned-freedom",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_exp_cb = zfit.loss.ExtendedUnbinnedNLL(model=exp_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "classified-victorian",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "vulnerable-warrant",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_cb = zfit.loss.ExtendedUnbinnedNLL(model=two_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pretty-kenya",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "portuguese-advocate",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_gauss = zfit.loss.ExtendedUnbinnedNLL(model=two_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "brown-account",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fitted-monte",
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_model = zfit.loss.ExtendedUnbinnedNLL(model=model, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sticky-california",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "modern-windsor",
   "metadata": {},
   "source": [
    "### _Résultats_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "accredited-serial",
   "metadata": {},
   "source": [
    "**Exponential + CB**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "careful-commons",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_exp_cb = minimizer.minimize(nll_exp_cb)\n",
    "result_exp_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "friendly-nevada",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_exp_cb.params[n_sig]['value']\n",
    "nbkg = result_exp_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "#df['B_M'].shape[0]\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "scenic-russian",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with Extended Cristal Ball + Exponential functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "complicated-hunter",
   "metadata": {},
   "source": [
    "Two CB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hybrid-zambia",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_two_cb = minimizer.minimize(nll_two_cb)\n",
    "result_two_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "independent-shuttle",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_two_cb.params[n_sig]['value']\n",
    "nbkg = result_two_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ethical-analyst",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(two_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with two Crystal Ball functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "diverse-protocol",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aging-rider",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_two_gauss = minimizer.minimize(nll_two_gauss)\n",
    "result_two_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bizarre-creator",
   "metadata": {},
   "outputs": [],
   "source": [
    "nevents = result_two_gauss.params[yield_]['value']\n",
    "fraction = result_two_gauss.params[frac_]['value']\n",
    "ng = fraction*nevents\n",
    "ng_bis = (1-fraction)*nevents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "practical-reproduction",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g = zfit.run(gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g_bis = zfit.run(gauss_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_g*ng/100*obs.area(), color='pink', label='Bkg (gauss)')\n",
    "plt.plot(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green', label='Sig (gauss)')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot_g*ng/100*obs.area(), color='pink')\n",
    "plt.fill_between(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green')\n",
    "\n",
    "plt.title('Fit with two Gaussians')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "offshore-killer",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dynamic-albania",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_model = minimizer.minimize(nll_model)\n",
    "result_model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "supreme-steam",
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_model.params[n_sig]['value']\n",
    "nbkg = result_model.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "behind-kentucky",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'obs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-27b8d15ab39c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlower\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlimits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mnb_bins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcounts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbin_edges\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistogram\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_M'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnb_bins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupper\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mx_plot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupper\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mstarting_bin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbin_edges\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'obs' is not defined"
     ]
    }
   ],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50\n",
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)\n",
    "starting_bin = bin_edges[0]\n",
    "final_bin = bin_edges[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informal-basics",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_sig = zfit.run(ex_two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_bkg = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color ='black', histtype='errorbar', label='Data')\n",
    "plt.plot(x_plot, y_plot*nevents/nb_bins*obs.area(), color='black', label='Total Fit')\n",
    "#plt.plot(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "#plt.plot(x_plot, y_plot_sig*nsig/nb_bins*obs.area(), color='#de2d26', label='$B^+ \\longrightarrow K^+K^-K^+$')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot*nevents/nb_bins*obs.area() , color= '#de2d26', label=\"$B^{+}$ $\\longrightarrow$ $K^{+}K^{-}K^{+}$\")\n",
    "plt.fill_between(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "\n",
    "plt.xlim(starting_bin,final_bin)\n",
    "plt.xlabel(\"$m(B^+)$ [MeV/$c^2$]\")\n",
    "plt.ylabel(\"Candidates / ({} MeV/$c^2$)\".format(round((final_bin-starting_bin)/nb_bins,2)))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "united-number",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "muslim-intervention",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
