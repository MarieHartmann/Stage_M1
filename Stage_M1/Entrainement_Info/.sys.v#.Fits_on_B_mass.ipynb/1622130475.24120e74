{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mariehartmann/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/zfit/__init__.py:48: UserWarning: TensorFlow warnings are by default suppressed by zfit. In order to show them, set the environment variable ZFIT_DISABLE_TF_WARNINGS=0. In order to suppress the TensorFlow warnings AND this warning, set ZFIT_DISABLE_TF_WARNINGS=1.\n",
      "  warnings.warn(\"TensorFlow warnings are by default suppressed by zfit.\"\n",
      "/Users/mariehartmann/opt/anaconda3/envs/myenv38/lib/python3.8/site-packages/zfit/util/execution.py:73: UserWarning: Not running on Linux. Determining available cpus for thread can failand be overestimated. Workaround (only if too many cpus are used):`zfit.run.set_n_cpu(your_cpu_number)`\n",
      "  warnings.warn(\"Not running on Linux. Determining available cpus for thread can fail\"\n"
     ]
    }
   ],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mplhep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from matplotlib import rc\n",
    "#rc('font',**{'family':'serif','serif':['Roman']})\n",
    "#rc('text', usetex=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Création d'un DataFrame contenant la masse du méson B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = uproot.open(filename)[\"DecayTree\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = tree.arrays(library=\"pandas\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('H1_P = sqrt(H1_PX**2 + H1_PY**2 + H1_PZ**2)', inplace=True)\n",
    "df.eval('H2_P = sqrt(H2_PX**2 + H2_PY**2 + H2_PZ**2)', inplace=True)\n",
    "df.eval('H3_P = sqrt(H3_PX**2 + H3_PY**2 + H3_PZ**2)', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_P = sqrt((H1_PX + H2_PX + H3_PX)**2 + (H1_PY + H2_PY + H3_PY)**2 + (H1_PZ + H2_PZ + H3_PZ)**2 )', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.eval('B_M =(sqrt((sqrt(493.677**2 + H1_P**2) + sqrt(493.677**2 + H2_P**2) + sqrt(493.677**2 + H3_P**2))**2 - B_P**2 ))', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['B_FlightDistance', 'B_VertexChi2', 'H1_PX', 'H1_PY', 'H1_PZ',\n",
       "       'H1_ProbK', 'H1_ProbPi', 'H1_Charge', 'H1_IPChi2', 'H1_isMuon', 'H2_PX',\n",
       "       'H2_PY', 'H2_PZ', 'H2_ProbK', 'H2_ProbPi', 'H2_Charge', 'H2_IPChi2',\n",
       "       'H2_isMuon', 'H3_PX', 'H3_PY', 'H3_PZ', 'H3_ProbK', 'H3_ProbPi',\n",
       "       'H3_Charge', 'H3_IPChi2', 'H3_isMuon', 'H1_P', 'H2_P', 'H3_P', 'B_P',\n",
       "       'B_M'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application de filtres pour s'assurer que la masse que nous avons reconstruite est bien celle du méson B->K+K-K+"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbK (proba que la particule Hi soit un kaon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbK > 0.8 and H2_ProbK > 0.8 and H3_ProbK > 0.8\")\n",
    "df = df.query(\"H1_ProbK > 0.5 and H2_ProbK > 0.5 and H3_ProbK > 0.5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Filtre sur Hi_ProbPi (proba que la particule Hi soit un pion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.query(\"H1_ProbPi < 0.2 and H2_ProbPi < 0.2 and H3_ProbPi < 0.2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Histogramme de la masse pour voir si notre résultat est satisfaisant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['B_M'], range=(5200,5375), bins=100, histtype='step')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mise en place des outils nécessaires aux fits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition de l'espace observable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "obs = zfit.Space('x', limits=(5200.,5375.))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition des data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#B_M = df['B_M'].to_numpy()\n",
    "B_M = df['B_M'].to_numpy()\n",
    "data = zfit.Data.from_numpy(obs=obs, array=B_M, weights=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<zfit.core.data.Data at 0x1516c8100>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "écart type de B_M = 250.53383373604447\n",
      "nombre de données de B_M = 17102\n"
     ]
    }
   ],
   "source": [
    "print('écart type de B_M = {}'.format(B_M.std()))\n",
    "print('nombre de données de B_M = {}'.format(len(B_M)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FITS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "minimizer = zfit.minimize.Minuit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-24-3a872e2760b6>:1: UserWarning: The function <function Space.limits at 0x14a905700> may does not return the actual area/limits but rather the rectangular limits. <zfit Space obs=('x',), axes=None, limits=(array([[5200.]]), array([[5375.]]))> can also have functional limits that are arbitrarily defined and lay inside the rect_limits. To test if a value is inside, use `inside` or `filter`.\n",
      "  lower, upper = obs.limits\n"
     ]
    }
   ],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dans la partie histogramme, il vaut mieux utiliser df['B_M'] plutôt que data.\n",
    "On réservera data pour mettre en argument des fonctions zfit (cela ne marche pas avec une série comme df['B_M'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GAUSS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gauss classique"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition des paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_gauss = zfit.Parameter('sigma_gauss', 197.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_gauss = zfit.Parameter('mu_gauss', 5279.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition du modèle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_gauss, sigma=sigma_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition de la 'loss function'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_gauss = zfit.loss.UnbinnedNLL(model=gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Définition du minimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#voir en dessous de fit, je définis le même pour tout le monde"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Minimisation du modèle et impression de résultats obtenus pour les paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E VariableMetricBuilder Initial matrix not pos.def.\n"
     ]
    }
   ],
   "source": [
    "result_gauss = minimizer.minimize(nll_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'mu_gauss' floating=True value=5284>: {'value': 5284.043955954763}, <zfit.Parameter 'sigma_gauss' floating=True value=24.15>: {'value': 24.151364345506614}}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of the B meson mass is : {'value': 5284.043955954763}\n"
     ]
    }
   ],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Vérification de la validité de notre fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_plot_gauss = zfit.run(gauss.pdf(x_plot, norm_range=obs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-35-e3c3fde5b4bb>:2: UserWarning: The function <function Space.area at 0x14a908af0> may does not return the actual area/limits but rather the rectangular limits. <zfit Space obs=('x',), axes=None, limits=(array([[5200.]]), array([[5375.]]))> can also have functional limits that are arbitrarily defined and lay inside the rect_limits. To test if a value is inside, use `inside` or `filter`.\n",
      "  plt.plot(x_plot, y_plot_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extended Gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Opérations zfit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le yield est un paramètre qu'il faut définir lorsque l'on veut effectuer un extended fit. On lui donnera comme valeur maximale la len(df['B_M'])."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_ex_gauss = zfit.Parameter(\"yield_ex_gauss\", 100, 0, 2615)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Un extended fit s'effectue à partir d'un modèle déjà défini. Ici on réutilise le model gauss défini précedemment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_gauss = gauss.create_extended(yield_ex_gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La loss function est légeremment différente pour les extended fits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_gauss = zfit.loss.ExtendedUnbinnedNLL(model=ex_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On obtient les résultats de la même manière que pour une extended fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ex_gauss = minimizer.minimize(nll_ex_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'yield_ex_gauss' floating=True value=2615>: {'value': 2614.999999977295}, <zfit.Parameter 'mu_gauss' floating=True value=5284>: {'value': 5284.040338803824}, <zfit.Parameter 'sigma_gauss' floating=True value=24.15>: {'value': 24.150792667493988}}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_ex_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of the B meson mass is : {'value': 5284.043955954763}\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_gauss.params[mu_gauss]))\n",
    "print(result_gauss.valid)\n",
    "print(result_gauss.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Tracé de l'histogramme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot_ex_gauss = zfit.run(ex_gauss.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_gauss*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarque : l'histogramme est le même dans les deux cas. La seule chose qui a changé, c'est que l'on a accès au nombre d'évènements dans le pic."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "         "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CRISTAL BALL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_cb = zfit.Parameter('mu_cb', 5279., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma_cb = zfit.Parameter('sigma_cb', 20., 0., 400.)\n",
    "#sigma max environ deux fois la sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_cb = zfit.Parameter('alpha_cb',0.5, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_cb = zfit.Parameter('n_cb', 1., 0., 100.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "yield_cb4 = zfit.Parameter(\"yield_cb4\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Model et Extended Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "cb = zfit.pdf.CrystalBall(obs=obs, mu=mu_cb, sigma=sigma_cb, alpha=alpha_cb, n=n_cb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_cb = cb.create_extended(yield_cb4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Loss functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_cb = zfit.loss.UnbinnedNLL(model=cb, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_ex_cb = zfit.loss.ExtendedUnbinnedNLL(model=ex_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Résultas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'alpha_cb' floating=True value=2.147>: {'value': 2.1474009947694004}, <zfit.Parameter 'mu_cb' floating=True value=5285>: {'value': 5285.411678892103}, <zfit.Parameter 'n_cb' floating=True value=0.4568>: {'value': 0.45678367426492117}, <zfit.Parameter 'sigma_cb' floating=True value=22.27>: {'value': 22.269078962570642}}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_cb = minimizer.minimize(nll_cb)\n",
    "result_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of the B meson mass is : {'value': 5285.411678892103}\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_cb.params[mu_cb]))\n",
    "print(result_cb.valid)\n",
    "print(result_cb.converged)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'yield_cb4' floating=True value=1e+04>: {'value': 9999.999975332044}, <zfit.Parameter 'alpha_cb' floating=True value=2.148>: {'value': 2.1481015631519824}, <zfit.Parameter 'mu_cb' floating=True value=5285>: {'value': 5285.412386188607}, <zfit.Parameter 'n_cb' floating=True value=0.4561>: {'value': 0.4561107870438674}, <zfit.Parameter 'sigma_cb' floating=True value=22.27>: {'value': 22.269868086729883}}"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_ex_cb = minimizer.minimize(nll_ex_cb)\n",
    "result_ex_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of the B meson mass is : {'value': 5285.412386188607}\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print('The value of the B meson mass is : {}'.format(result_ex_cb.params[mu_cb]))\n",
    "print(result_ex_cb.valid)\n",
    "print(result_ex_cb.converged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Histogrammes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot_ex_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_ex_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot_cb = zfit.run(cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot_cb*df['B_M'].shape[0]/100*obs.area(), color='pink')\n",
    "plt.title('Fit with Extended Cristal Ball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FIT_TRAINING"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### _Paramètres_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_ = zfit.Parameter(f\"mu_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "mu_bis = zfit.Parameter(f\"mu_bis_{rand_int}\", 5278., 5270., 5300.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_ = zfit.Parameter(f\"sigma_{rand_int}\", 21., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "sigma_bis = zfit.Parameter(f\"sigma__bis{rand_int}\", 50., 0., 400.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "alpha_ = zfit.Parameter(f\"alpha_{rand_int}\", 0.52, 0., 5.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_ = zfit.Parameter(f\"n_{rand_int}\", 1., 0., 99.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "l = zfit.Parameter(f\"l_{rand_int}\", -0.5, -1., -0.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "yield_ = zfit.Parameter(f\"yield_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_sig = zfit.Parameter(f\"n_sig_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "n_bkg = zfit.Parameter(f\"n_bkg_{rand_int}\", 2000., 0.5, 10000.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_int = random.randint(0,1000000,size=1)\n",
    "frac_ = zfit.Parameter(f\"frac_{rand_int}\", 0.8, 0., 1.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### _Modèles_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On va sommer des pdf extended qui vont donner un SumPDF qui le sera également. Pour cette raison, je ne précise pas ex pour extended sauf pour les composantes initiales."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On précise n_bkg_ et n_sig car il n'y a pas autant d'évènements de bruits que de signal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)\n",
    "#il faut mettre un tiret du bas car sinon il pense que lambda définit une fonction\n",
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_cb = cb.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "exp_cb = zfit.pdf.SumPDF(pdfs=[ex_cb,ex_exp]) \n",
    "#already extended because sum of extended"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "cb_bis = zfit.pdf.CrystalBall(obs=obs, mu=mu_, sigma=sigma_, alpha=alpha_, n=n_)\n",
    "ex_cb = cb.create_extended(n_sig)\n",
    "ex_cb_bis = cb_bis.create_extended(n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_cb = zfit.pdf.SumPDF(pdfs=[ex_cb, ex_cb_bis])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = zfit.pdf.Gauss(obs=obs, mu=mu_, sigma=sigma_)\n",
    "gauss_bis = zfit.pdf.Gauss(obs=obs, mu=mu_bis, sigma=sigma_bis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "gaussians = zfit.pdf.SumPDF(pdfs=[gauss, gauss_bis], fracs=frac_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_gauss = gaussians.create_extended(yield_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = zfit.pdf.Exponential(obs=obs, lambda_=l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "ex_exp = exp.create_extended(n_bkg)\n",
    "ex_two_gauss = gaussians.create_extended(n_sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = zfit.pdf.SumPDF(pdfs=[ex_two_gauss, ex_exp])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### _Loss Function_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exponentielle + Crystal Ball**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_exp_cb = zfit.loss.ExtendedUnbinnedNLL(model=exp_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Crystall Ball pdfs**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_cb = zfit.loss.ExtendedUnbinnedNLL(model=two_cb, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Gaussians**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_two_gauss = zfit.loss.ExtendedUnbinnedNLL(model=two_gauss, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "nll_model = zfit.loss.ExtendedUnbinnedNLL(model=model, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### _Résultats_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exponential + CB**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'n_sig_[987915]' floating=True value=1e+04>: {'value': 9999.999997160981}, <zfit.Parameter 'n_bkg_[169710]' floating=True value=1456>: {'value': 1456.3918127493196}, <zfit.Parameter 'alpha_cb' floating=True value=4.814>: {'value': 4.8137568841546265}, <zfit.Parameter 'mu_cb' floating=True value=5284>: {'value': 5284.307682746311}, <zfit.Parameter 'n_cb' floating=True value=1.113>: {'value': 1.1132244222708476}, <zfit.Parameter 'sigma_cb' floating=True value=17.73>: {'value': 17.729358992810983}, <zfit.Parameter 'l_[535999]' floating=True value=-0.002038>: {'value': -0.0020379937273851123}}"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_exp_cb = minimizer.minimize(nll_exp_cb)\n",
    "result_exp_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Il y a 11456.391809910301 évènements\n",
      "Il y a 9999.999997160981 évènements de signal\n",
      "Il y a 1456.3918127493196 évènements de background\n"
     ]
    }
   ],
   "source": [
    "nsig = result_exp_cb.params[n_sig]['value']\n",
    "nbkg = result_exp_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "#df['B_M'].shape[0]\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with Extended Cristal Ball + Exponential functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two CB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'n_sig_[987915]' floating=True value=9578>: {'value': 9577.68625826184}, <zfit.Parameter 'n_bkg_[169710]' floating=True value=1925>: {'value': 1925.424406989315}, <zfit.Parameter 'alpha_cb' floating=True value=1.884>: {'value': 1.8839197016058193}, <zfit.Parameter 'mu_cb' floating=True value=5284>: {'value': 5284.313133818769}, <zfit.Parameter 'n_cb' floating=True value=39.34>: {'value': 39.337059395891245}, <zfit.Parameter 'sigma_cb' floating=True value=16.98>: {'value': 16.97745138208122}, <zfit.Parameter 'alpha_[425604]' floating=True value=0.7985>: {'value': 0.7985005518824104}, <zfit.Parameter 'mu_[482882]' floating=True value=5283>: {'value': 5282.763041120484}, <zfit.Parameter 'n_[476257]' floating=True value=96.98>: {'value': 96.98375649078503}, <zfit.Parameter 'sigma_[498051]' floating=True value=60.93>: {'value': 60.93053950405833}}"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_two_cb = minimizer.minimize(nll_two_cb)\n",
    "result_two_cb.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsig = result_two_cb.params[n_sig]['value']\n",
    "nbkg = result_two_cb.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot = zfit.run(two_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_exp = zfit.run(ex_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_cb = zfit.run(ex_cb_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_exp*nbkg/100*obs.area(), color='pink', label='bkg (exp)')\n",
    "plt.plot(x_plot, y_plot_cb*nsig/100*obs.area(), color='green', label='sig (cb)')\n",
    "plt.title('Fit with two Crystal Ball functions')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'yield_[565272]' floating=True value=1e+04>: {'value': 9999.999996457851}, <zfit.Parameter 'frac_[923110]' floating=True value=0.8144>: {'value': 0.8144373376426202}, <zfit.Parameter 'mu_[482882]' floating=True value=5284>: {'value': 5284.351654959024}, <zfit.Parameter 'sigma_[498051]' floating=True value=16.86>: {'value': 16.860182394539546}, <zfit.Parameter 'mu_bis_[823267]' floating=True value=5279>: {'value': 5278.75616367505}, <zfit.Parameter 'sigma__bis[807022]' floating=True value=58.97>: {'value': 58.9688764967319}}"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_two_gauss = minimizer.minimize(nll_two_gauss)\n",
    "result_two_gauss.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "nevents = result_two_gauss.params[yield_]['value']\n",
    "fraction = result_two_gauss.params[frac_]['value']\n",
    "ng = fraction*nevents\n",
    "ng_bis = (1-fraction)*nevents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot = zfit.run(two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g = zfit.run(gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_g_bis = zfit.run(gauss_bis.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color = 'blue', histtype='errorbar')\n",
    "plt.plot(x_plot, y_plot*nevents/100*obs.area(), color='red', label='SumPDF')\n",
    "plt.plot(x_plot, y_plot_g*ng/100*obs.area(), color='pink', label='Bkg (gauss)')\n",
    "plt.plot(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green', label='Sig (gauss)')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot_g*ng/100*obs.area(), color='pink')\n",
    "plt.fill_between(x_plot, y_plot_g_bis*ng_bis/100*obs.area(), color='green')\n",
    "\n",
    "plt.title('Fit with two Gaussians')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Two Gaussians + exp**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<zfit.Parameter 'n_sig_[987915]' floating=True value=1e+04>: {'value': 9999.999681517715}, <zfit.Parameter 'n_bkg_[169710]' floating=True value=1311>: {'value': 1310.9243564674036}, <zfit.Parameter 'frac_[923110]' floating=True value=0.6866>: {'value': 0.6866268560166918}, <zfit.Parameter 'mu_[482882]' floating=True value=5285>: {'value': 5284.62546017418}, <zfit.Parameter 'sigma_[498051]' floating=True value=15.7>: {'value': 15.702741121105968}, <zfit.Parameter 'mu_bis_[823267]' floating=True value=5283>: {'value': 5283.238455204192}, <zfit.Parameter 'sigma__bis[807022]' floating=True value=23.41>: {'value': 23.406501830576353}, <zfit.Parameter 'l_[535999]' floating=True value=-0.001784>: {'value': -0.0017842724974586055}}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_model = minimizer.minimize(nll_model)\n",
    "result_model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Il y a 11310.924037985118 évènements\n",
      "Il y a 9999.999681517715 évènements de signal\n",
      "Il y a 1310.9243564674036 évènements de background\n"
     ]
    }
   ],
   "source": [
    "nsig = result_model.params[n_sig]['value']\n",
    "nbkg = result_model.params[n_bkg]['value']\n",
    "nevents = nsig + nbkg\n",
    "print('Il y a {} évènements'.format(nevents))\n",
    "print('Il y a {} évènements de signal'.format(nsig))\n",
    "print('Il y a {} évènements de background'.format(nbkg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "lower, upper = obs.limits\n",
    "nb_bins = 50\n",
    "counts, bin_edges = np.histogram(df['B_M'], bins=nb_bins, range=(lower[0][0], upper[0][0]))\n",
    "x_plot = np.linspace(lower[0][0], upper[0][0], num=1000)\n",
    "starting_bin = bin_edges[0]\n",
    "final_bin = bin_edges[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_plot = zfit.run(exp_cb.pdf(x_plot, norm_range=obs))\n",
    "y_plot_sig = zfit.run(ex_two_gauss.pdf(x_plot, norm_range=obs))\n",
    "y_plot_bkg = zfit.run(ex_exp.pdf(x_plot, norm_range=obs))\n",
    "mplhep.histplot((counts,bin_edges), yerr = True, color ='black', histtype='errorbar', label='Data')\n",
    "plt.plot(x_plot, y_plot*nevents/nb_bins*obs.area(), color='black', label='Total Fit')\n",
    "#plt.plot(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "#plt.plot(x_plot, y_plot_sig*nsig/nb_bins*obs.area(), color='#de2d26', label='$B^+ \\longrightarrow K^+K^-K^+$')\n",
    "\n",
    "plt.fill_between(x_plot, y_plot*nevents/nb_bins*obs.area() , color= '#de2d26', label=\"$B^{+}$ $\\longrightarrow$ $K^{+}K^{-}K^{+}$\")\n",
    "plt.fill_between(x_plot, y_plot_bkg*nbkg/nb_bins*obs.area(), color='#3182bd', label='Combinatorial')\n",
    "\n",
    "plt.xlim(starting_bin,final_bin)\n",
    "plt.xlabel(\"$m(B^+)$ [MeV/$c^2$]\")\n",
    "plt.ylabel(\"Candidates / ({} MeV/$c^2$)\".format(round((final_bin-starting_bin)/nb_bins,2)))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
