{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "arranged-jewelry",
   "metadata": {},
   "source": [
    "# Nouvelle Méthode pour calculer l'efficacité d'un cut"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "valid-writer",
   "metadata": {},
   "source": [
    "Comme on a pu le voir précedemment, pour des hautes valeurs de cut, il n'y a plus aucun évènement de background et on obtient une efficacité égale à 1. Pour résoudre ce problème, nous allons remplacer dans les programmes utilisés la valeur de la longueur du data frame après cut, par la valeur de l'intégrale de la courbe formé par l'histogramme pour la varaible de cut considérée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "resident-delay",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "nervous-tobago",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "cc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zcc_ecm91.root')['events']\n",
    "uds_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zuds_ecm91.root')['events']\n",
    "\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "linear-video",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "cc_df = cc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "uds_df = uds_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "solar-imperial",
   "metadata": {},
   "source": [
    "#### Définition nouveaux dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cross-roots",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut = 0.95\n",
    "\n",
    "bc_df_1 = bc_df[bc_df['EVT_MVA1']>cut]\n",
    "bu_df_1 = bu_df[bu_df['EVT_MVA1']>cut]\n",
    "bb_df_1 = bb_df[bb_df['EVT_MVA1']>cut]\n",
    "cc_df_1 = cc_df[cc_df['EVT_MVA1']>cut]\n",
    "uds_df_1 = uds_df[uds_df['EVT_MVA1']>cut]\n",
    "\n",
    "bc_df_2 = bc_df[bc_df['EVT_MVA2']>cut]\n",
    "bu_df_2 = bu_df[bu_df['EVT_MVA2']>cut]\n",
    "bb_df_2 = bb_df[bb_df['EVT_MVA2']>cut]\n",
    "cc_df_2 = cc_df[cc_df['EVT_MVA2']>cut]\n",
    "uds_df_2 = uds_df[uds_df['EVT_MVA2']>cut]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cooperative-buffer",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "opposite-meditation",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_1['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "juvenile-finding",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fewer-tumor",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA) + splines functions tracée"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "alike-tomato",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA1 = plt.hist(-np.log(1-bb_df_2['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA1_values = MVA1[1][:-1]\n",
    "MVA1_bins = MVA1[0]\n",
    "\n",
    "MVA1_spline = interpolate.splrep(x=x_MVA1_values, y=MVA1_bins)\n",
    "MVA1_spline_values = interpolate.splev(x_MVA1_values, MVA1_spline)\n",
    "\n",
    "plt.plot(x_MVA1_values, MVA1_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aggressive-kinase",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA2 = plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA2_values = MVA2[1][:-1]\n",
    "MVA2_bins = MVA2[0]\n",
    "\n",
    "MVA2_spline = interpolate.splrep(x=x_MVA2_values, y=MVA2_bins)\n",
    "MVA2_spline_values = interpolate.splev(x_MVA2_values, MVA2_spline)\n",
    "\n",
    "plt.plot(x_MVA2_values, MVA2_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unlikely-halifax",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en MVA + spline function + enregistrement de la spline function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hungarian-weekend",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_min = 3\n",
    "cut_max = 9\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_1[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "explicit-recipient",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2'\n",
    "cut_min = 3\n",
    "cut_max = 8\n",
    "nb_bins = 35\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_2[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "precious-sewing",
   "metadata": {},
   "source": [
    "### Définition des splines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "physical-archive",
   "metadata": {},
   "source": [
    "##### Définition de splines en log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "native-attention",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 50\n",
    "cut_vals = -np.log(1-bb_df_1[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "surface-apache",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 8 #cut_vals.max()\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-bb_df_2[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "regulated-daily",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(spline_vals.min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "perfect-count",
   "metadata": {},
   "source": [
    "##### Définitions de splines sans log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "tender-mining",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "described-favor",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_vals = bb_df_1[cut_var] #:) #log\n",
    "cut_min = 0.95 #log\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "print(cut_min)\n",
    "print(cut_max)\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "artistic-constraint",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_vals = bb_df_2[cut_var] #:)\n",
    "cut_min = 0.95\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.xlabel(\"MVA2\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "contemporary-fossil",
   "metadata": {},
   "source": [
    "## Z->cc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "established-giant",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2281 2083 1777 1629 1519 1347 1264 1121  963  860  794  707  675  565\n",
      "  509  492  402  344  339  290  255  205  176  140  149  126   83   80\n",
      "   68   55   42   21   26   10   11]\n",
      "[0.0209381  0.02191066 0.02372227 0.02477647 0.0256579  0.02724684\n",
      " 0.0281272  0.02986738 0.03222455 0.03409972 0.03548867 0.03760887\n",
      " 0.03849002 0.04207032 0.04432422 0.04508348 0.04987547 0.05391639\n",
      " 0.05431254 0.05872202 0.06262243 0.06984303 0.07537784 0.08451543\n",
      " 0.08192319 0.08908708 0.10976426 0.1118034  0.12126781 0.13483997\n",
      " 0.15430335 0.21821789 0.19611614 0.31622777 0.30151134]\n",
      "2403.4277671064765\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 35\n",
    "cut_vals = -np.log(1-cc_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('cc_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "british-filing",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.095839  3.1959457 3.2960525 3.396159  3.4962656 3.5963724\n",
      " 3.696479  3.7965858 3.8966925 3.9967992 4.0969057 4.1970124 4.297119\n",
      " 4.397226  4.4973326 4.5974393 4.697546  4.7976527 4.8977594 4.997866\n",
      " 5.097973  5.1980796 5.2981863 5.398293  5.4983997 5.5985065 5.698613\n",
      " 5.79872   5.8988266 5.998933  6.0990396 6.1991463 6.299253  6.3993597\n",
      " 6.4994664 6.599573  6.69968   6.7997866 6.8998933 7.       ]\n",
      "[817 722 693 576 548 448 391 397 302 250 270 231 169 163 135 104  94  95\n",
      "  88  70  62  50  30  27  31  30  20  17   9  10  12   5   6   5   4   6\n",
      "   3   5   1   3]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 7\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-cc_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "capital-outdoors",
   "metadata": {},
   "source": [
    "# Z -> uds uds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "frequent-jurisdiction",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[63 72 64 55 49 48 54 52 45 29 38 44 42 40 38 22 30 25 25 25 17 22 22 18\n",
      " 16 18 12 21  6 11 14  9 13  4  7  8  6  6  4  7  1  3  1  1  3]\n",
      "[0.12598816 0.11785113 0.125      0.13483997 0.14285714 0.14433757\n",
      " 0.13608276 0.13867505 0.1490712  0.18569534 0.16222142 0.15075567\n",
      " 0.15430335 0.15811388 0.16222142 0.21320072 0.18257419 0.2\n",
      " 0.2        0.2        0.24253563 0.21320072 0.21320072 0.23570226\n",
      " 0.25       0.23570226 0.28867513 0.21821789 0.40824829 0.30151134\n",
      " 0.26726124 0.33333333 0.2773501  0.5        0.37796447 0.35355339\n",
      " 0.40824829 0.40824829 0.5        0.37796447 1.         0.57735027\n",
      " 1.         1.         0.57735027]\n",
      "67.63791627671958\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 8\n",
    "\n",
    "nb_bins = 45\n",
    "cut_vals = -np.log(1-uds_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('uds_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "useful-argentina",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.2294211 3.4631102 3.6967993 3.930488  4.164177  4.3978662\n",
      " 4.631555  4.865244  5.098933  5.332622  5.566311  5.8      ]\n",
      "[33 32 22 10  8  3  5  3  3  2  1  1]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 5.8\n",
    "nb_bins = 12\n",
    "\n",
    "cut_vals = -np.log(1-uds_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "recent-nature",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
