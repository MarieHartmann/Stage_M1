{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "patent-gibraltar",
   "metadata": {},
   "source": [
    "# Nouvelle Méthode pour calculer l'efficacité d'un cut"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "framed-advisory",
   "metadata": {},
   "source": [
    "Comme on a pu le voir précedemment, pour des hautes valeurs de cut, il n'y a plus aucun évènement de background et on obtient une efficacité égale à 1. Pour résoudre ce problème, nous allons remplacer dans les programmes utilisés la valeur de la longueur du data frame après cut, par la valeur de l'intégrale de la courbe formé par l'histogramme pour la varaible de cut considérée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "voluntary-conservation",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "senior-anniversary",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "cc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zcc_ecm91.root')['events']\n",
    "uds_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zuds_ecm91.root')['events']\n",
    "\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "hollywood-frame",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "cc_df = cc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "uds_df = uds_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "hawaiian-friend",
   "metadata": {},
   "source": [
    "#### Définition nouveaux dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "gentle-approach",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut = 0.95\n",
    "\n",
    "bc_df_1 = bc_df[bc_df['EVT_MVA1']>cut]\n",
    "bu_df_1 = bu_df[bu_df['EVT_MVA1']>cut]\n",
    "bb_df_1 = bb_df[bb_df['EVT_MVA1']>cut]\n",
    "cc_df_1 = cc_df[cc_df['EVT_MVA1']>cut]\n",
    "uds_df_1 = uds_df[uds_df['EVT_MVA1']>cut]\n",
    "\n",
    "bc_df_2 = bc_df[bc_df['EVT_MVA2']>cut]\n",
    "bu_df_2 = bu_df[bu_df['EVT_MVA2']>cut]\n",
    "bb_df_2 = bb_df[bb_df['EVT_MVA2']>cut]\n",
    "cc_df_2 = cc_df[cc_df['EVT_MVA2']>cut]\n",
    "uds_df_2 = uds_df[uds_df['EVT_MVA2']>cut]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acquired-cinema",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "single-hudson",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_1['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "smart-heaven",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "separate-large",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA) + splines functions tracée"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "southeast-begin",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA1 = plt.hist(-np.log(1-bb_df_2['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA1_values = MVA1[1][:-1]\n",
    "MVA1_bins = MVA1[0]\n",
    "\n",
    "MVA1_spline = interpolate.splrep(x=x_MVA1_values, y=MVA1_bins)\n",
    "MVA1_spline_values = interpolate.splev(x_MVA1_values, MVA1_spline)\n",
    "\n",
    "plt.plot(x_MVA1_values, MVA1_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "continent-mystery",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA2 = plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA2_values = MVA2[1][:-1]\n",
    "MVA2_bins = MVA2[0]\n",
    "\n",
    "MVA2_spline = interpolate.splrep(x=x_MVA2_values, y=MVA2_bins)\n",
    "MVA2_spline_values = interpolate.splev(x_MVA2_values, MVA2_spline)\n",
    "\n",
    "plt.plot(x_MVA2_values, MVA2_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stock-instruction",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en MVA + spline function + enregistrement de la spline function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fifth-extraction",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_min = 3\n",
    "cut_max = 9\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_1[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "engaging-fishing",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2'\n",
    "cut_min = 3\n",
    "cut_max = 8\n",
    "nb_bins = 35\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_2[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cheap-secretary",
   "metadata": {},
   "source": [
    "### Définition des splines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "billion-server",
   "metadata": {},
   "source": [
    "##### Définition de splines en log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "worse-laugh",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 50\n",
    "cut_vals = -np.log(1-bb_df_1[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adjustable-westminster",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 8 #cut_vals.max()\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-bb_df_2[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "polish-weather",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(spline_vals.min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "endangered-enemy",
   "metadata": {},
   "source": [
    "##### Définitions de splines sans log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "several-dancing",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pacific-seller",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_vals = bb_df_1[cut_var] #:) #log\n",
    "cut_min = 0.95 #log\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "print(cut_min)\n",
    "print(cut_max)\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "apparent-tennis",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_vals = bb_df_2[cut_var] #:)\n",
    "cut_min = 0.95\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.xlabel(\"MVA2\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "measured-worship",
   "metadata": {},
   "source": [
    "## Z->cc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "explicit-gregory",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2281 2083 1777 1629 1519 1347 1264 1121  963  860  794  707  675  565\n",
      "  509  492  402  344  339  290  255  205  176  140  149  126   83   80\n",
      "   68   55   42   21   26   10   11]\n",
      "[0.0209381  0.02191066 0.02372227 0.02477647 0.0256579  0.02724684\n",
      " 0.0281272  0.02986738 0.03222455 0.03409972 0.03548867 0.03760887\n",
      " 0.03849002 0.04207032 0.04432422 0.04508348 0.04987547 0.05391639\n",
      " 0.05431254 0.05872202 0.06262243 0.06984303 0.07537784 0.08451543\n",
      " 0.08192319 0.08908708 0.10976426 0.1118034  0.12126781 0.13483997\n",
      " 0.15430335 0.21821789 0.19611614 0.31622777 0.30151134]\n",
      "2403.4277671064765\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 35\n",
    "cut_vals = -np.log(1-cc_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('cc_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "hawaiian-complex",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.1101398 3.2245476 3.3389552 3.453363  3.5677705 3.6821783\n",
      " 3.7965858 3.9109936 4.025401  4.1398087 4.254216  4.368624  4.4830317\n",
      " 4.5974393 4.711847  4.826255  4.9406624 5.05507   5.1694775 5.2838855\n",
      " 5.398293  5.5127006 5.627108  5.7415156 5.8559237 5.970331  6.0847387\n",
      " 6.1991463 6.3135543 6.427962  6.5423694 6.656777  6.771185  6.8855925\n",
      " 7.       ]\n",
      "[927 831 732 636 544 468 454 334 300 291 241 175 165 118 110 106  92  74\n",
      "  61  43  30  40  25  25  12  11  14   7   6   6   4   7   5   2   3]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 7\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-cc_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ordinary-shower",
   "metadata": {},
   "source": [
    "# Z -> uds uds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "vocal-reconstruction",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[59 56 72 55 46 42 56 52 49 24 32 34 41 45 32 38 20 27 22 24 29 16 19 26\n",
      "  9 17 22 13 10 19  6 11 14  8 11  6  7  6  4  7  5  6  4  1  4  0  1  3]\n",
      "[0.13018891 0.13363062 0.11785113 0.13483997 0.14744196 0.15430335\n",
      " 0.13363062 0.13867505 0.14285714 0.20412415 0.1767767  0.17149859\n",
      " 0.15617376 0.1490712  0.1767767  0.16222142 0.2236068  0.19245009\n",
      " 0.21320072 0.20412415 0.18569534 0.25       0.22941573 0.19611614\n",
      " 0.33333333 0.24253563 0.21320072 0.2773501  0.31622777 0.22941573\n",
      " 0.40824829 0.30151134 0.26726124 0.35355339 0.30151134 0.40824829\n",
      " 0.37796447 0.40824829 0.5        0.37796447 0.4472136  0.40824829\n",
      " 0.5        1.         0.5               inf 1.         0.57735027]\n",
      "nan\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-76-580d5c9a5102>:31: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  weights = 1./err\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 8\n",
    "\n",
    "nb_bins = 45\n",
    "cut_vals = -np.log(1-uds_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('uds_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "identical-housing",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.2294211 3.4631102 3.6967993 3.930488  4.164177  4.3978662\n",
      " 4.631555  4.865244  5.098933  5.332622  5.566311  5.8      ]\n",
      "[33 32 22 10  8  3  5  3  3  2  1  1]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 5.8\n",
    "nb_bins = 12\n",
    "\n",
    "cut_vals = -np.log(1-uds_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "charged-acceptance",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
