{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "nearby-franklin",
   "metadata": {},
   "source": [
    "# Nouvelle Méthode pour calculer l'efficacité d'un cut"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "flying-search",
   "metadata": {},
   "source": [
    "Comme on a pu le voir précedemment, pour des hautes valeurs de cut, il n'y a plus aucun évènement de background et on obtient une efficacité égale à 1. Pour résoudre ce problème, nous allons remplacer dans les programmes utilisés la valeur de la longueur du data frame après cut, par la valeur de l'intégrale de la courbe formé par l'histogramme pour la varaible de cut considérée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "brief-likelihood",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "instant-plaza",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "clean-pension",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "novel-munich",
   "metadata": {},
   "source": [
    "#### Définition nouveaux dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "underlying-final",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut=0.95\n",
    "\n",
    "bc_df_1 = bc_df[bc_df['EVT_MVA1']>cut]\n",
    "bb_df_1= bb_df[bb_df['EVT_MVA1']>cut]\n",
    "\n",
    "bc_df_2 = bc_df[bc_df['EVT_MVA2']>cut]\n",
    "bb_df_2= bb_df[bb_df['EVT_MVA2']>cut]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "crazy-lucas",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "extended-footwear",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_1['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "instant-public",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "equipped-addition",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA) + splines functions tracée"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informed-lemon",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA1 = plt.hist(-np.log(1-bb_df_2['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA1_values = MVA1[1][:-1]\n",
    "MVA1_bins = MVA1[0]\n",
    "\n",
    "MVA1_spline = interpolate.splrep(x=x_MVA1_values, y=MVA1_bins)\n",
    "MVA1_spline_values = interpolate.splev(x_MVA1_values, MVA1_spline)\n",
    "\n",
    "plt.plot(x_MVA1_values, MVA1_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "worthy-injury",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA2 = plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA2_values = MVA2[1][:-1]\n",
    "MVA2_bins = MVA2[0]\n",
    "\n",
    "MVA2_spline = interpolate.splrep(x=x_MVA2_values, y=MVA2_bins)\n",
    "MVA2_spline_values = interpolate.splev(x_MVA2_values, MVA2_spline)\n",
    "\n",
    "plt.plot(x_MVA2_values, MVA2_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sustained-relation",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en MVA + spline function + enregistrement de la spline function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "minimal-woman",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_min = 3\n",
    "cut_max = 9\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_1[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "comic-dealer",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2'\n",
    "cut_min = 3\n",
    "cut_max = 8\n",
    "nb_bins = 35\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_2[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "addressed-mattress",
   "metadata": {},
   "source": [
    "### Définition des splines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "physical-springer",
   "metadata": {},
   "source": [
    "##### Définition de splines en log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "numeric-notion",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4695 4367 4042 3638 3395 3154 2772 2569 2369 2128 1954 1774 1660 1403\n",
      " 1332 1095 1017  885  789  741  623  511  493  469  353  344  249  286\n",
      "  231  217  169  140  142  115  104   97   67   63   60   42   36   33\n",
      "   29   31   29   21   23   16   17   17]\n",
      "[0.01459426 0.01513242 0.01572903 0.01657939 0.01716248 0.01780611\n",
      " 0.01899343 0.01972958 0.02054554 0.02167775 0.02262235 0.02374232\n",
      " 0.02454403 0.02669753 0.02739983 0.03021989 0.03135736 0.03361463\n",
      " 0.03560094 0.03673592 0.04006415 0.0442374  0.04503773 0.04617571\n",
      " 0.05322463 0.05391639 0.06337243 0.05913124 0.06579517 0.06788442\n",
      " 0.07692308 0.08451543 0.08391814 0.09325048 0.09805807 0.10153462\n",
      " 0.12216944 0.12598816 0.12909944 0.15430335 0.16666667 0.17407766\n",
      " 0.18569534 0.1796053  0.18569534 0.21821789 0.20851441 0.25\n",
      " 0.24253563 0.24253563]\n",
      "4896.050511783592\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 50\n",
    "cut_vals = -np.log(1-bb_df_1[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "outstanding-filing",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.1387115 3.2816904 3.4246695 3.5676486 3.7106276 3.8536067\n",
      " 3.9965858 4.139565  4.282544  4.4255233 4.568502  4.711481  4.8544602\n",
      " 4.9974394 5.1404185 5.2833977 5.426377  5.5693555 5.7123346 5.855314\n",
      " 5.998293  6.141272  6.284251  6.4272304 6.570209  6.713188  6.8561673\n",
      " 6.9991465 7.1421256 7.2851048 7.428084  7.5710626 7.7140417 7.857021\n",
      " 8.       ]\n",
      "[3133 2761 2306 1955 1747 1400 1141 1014  805  683  523  475  372  284\n",
      "  227  185  141   92   72   63   57   38   39   16   15   12    8    6\n",
      "    5    2    3    2    2    1    1]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 8 #cut_vals.max()\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-bb_df_2[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "interesting-conversation",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(spline_vals.min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sophisticated-coalition",
   "metadata": {},
   "source": [
    "##### Définitions de splines sans log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "measured-desire",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "virtual-philadelphia",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_vals = bb_df_1[cut_var] #:) #log\n",
    "cut_min = 0.95 #log\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "print(cut_min)\n",
    "print(cut_max)\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "wound-nebraska",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_vals = bb_df_2[cut_var] #:)\n",
    "cut_min = 0.95\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.xlabel(\"MVA2\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "industrial-conference",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
