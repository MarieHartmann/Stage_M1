{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "necessary-madrid",
   "metadata": {},
   "source": [
    "# Nouvelle Méthode pour calculer l'efficacité d'un cut"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "silver-rabbit",
   "metadata": {},
   "source": [
    "Comme on a pu le voir précedemment, pour des hautes valeurs de cut, il n'y a plus aucun évènement de background et on obtient une efficacité égale à 1. Pour résoudre ce problème, nous allons remplacer dans les programmes utilisés la valeur de la longueur du data frame après cut, par la valeur de l'intégrale de la courbe formé par l'histogramme pour la varaible de cut considérée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "temporal-finish",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "suburban-rhythm",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "cc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zcc_ecm91.root')['events']\n",
    "uds_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zuds_ecm91.root')['events']\n",
    "\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "composite-conference",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "cc_df = cc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "uds_df = uds_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sapphire-system",
   "metadata": {},
   "source": [
    "#### Définition nouveaux dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "empty-bunch",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut = 0.95\n",
    "\n",
    "bc_df_1 = bc_df[bc_df['EVT_MVA1']>cut]\n",
    "bu_df_1 = bu_df[bu_df['EVT_MVA1']>cut]\n",
    "bb_df_1 = bb_df[bb_df['EVT_MVA1']>cut]\n",
    "cc_df_1 = cc_df[cc_df['EVT_MVA1']>cut]\n",
    "uds_df_1 = uds_df[uds_df['EVT_MVA1']>cut]\n",
    "\n",
    "bc_df_2 = bc_df[bc_df['EVT_MVA2']>cut]\n",
    "bu_df_2 = bu_df[bu_df['EVT_MVA2']>cut]\n",
    "bb_df_2 = bb_df[bb_df['EVT_MVA2']>cut]\n",
    "cc_df_2 = cc_df[cc_df['EVT_MVA2']>cut]\n",
    "uds_df_2 = uds_df[uds_df['EVT_MVA2']>cut]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "attractive-sherman",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "alert-delay",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_1['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "graduate-security",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "title = r'$Z \\rightarrow b\\bar{b}$'\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), color= '#3182bd', histtype='step', label=title, density=True)\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "headed-seventh",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en log(1-MVA) + splines functions tracée"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "designed-restaurant",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA1 = plt.hist(-np.log(1-bb_df_2['EVT_MVA1']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA1_values = MVA1[1][:-1]\n",
    "MVA1_bins = MVA1[0]\n",
    "\n",
    "MVA1_spline = interpolate.splrep(x=x_MVA1_values, y=MVA1_bins)\n",
    "MVA1_spline_values = interpolate.splev(x_MVA1_values, MVA1_spline)\n",
    "\n",
    "plt.plot(x_MVA1_values, MVA1_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "processed-vulnerability",
   "metadata": {},
   "outputs": [],
   "source": [
    "s_bin = 3\n",
    "f_bin = 10\n",
    "nb_bins = 50\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "MVA2 = plt.hist(-np.log(1-bb_df_2['EVT_MVA2']), bins=nb_bins, range=(s_bin, f_bin), density=True, histtype='step', label=label_hist, color= '#3182bd')\n",
    "x_MVA2_values = MVA2[1][:-1]\n",
    "MVA2_bins = MVA2[0]\n",
    "\n",
    "MVA2_spline = interpolate.splrep(x=x_MVA2_values, y=MVA2_bins)\n",
    "MVA2_spline_values = interpolate.splev(x_MVA2_values, MVA2_spline)\n",
    "\n",
    "plt.plot(x_MVA2_values, MVA2_spline_values, color='#de2d26', label=label_spline)\n",
    "\n",
    "\n",
    "plt.xlim(3,10)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "overhead-sellers",
   "metadata": {},
   "source": [
    "## Histogrammes des valeurs en MVA + spline function + enregistrement de la spline function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "initial-while",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_min = 3\n",
    "cut_max = 9\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_1[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "lesbian-trainer",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2'\n",
    "cut_min = 3\n",
    "cut_max = 8\n",
    "nb_bins = 35\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(-np.log(1-bb_df_2[cut_var]), bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.yscale('log')\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "departmental-voluntary",
   "metadata": {},
   "source": [
    "### Définition des splines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "younger-roman",
   "metadata": {},
   "source": [
    "##### Définition de splines en log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "increasing-intake",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 50\n",
    "cut_vals = -np.log(1-bb_df_1[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "continental-sailing",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modélisation du nb d'élèments de bkg pour différentes valeurs de MVA1\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_min = -np.log(1-0.95) #log\n",
    "cut_max = 8 #cut_vals.max()\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-bb_df_2[cut_var]) #:) #log\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "vital-transaction",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(spline_vals.min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "operating-villa",
   "metadata": {},
   "source": [
    "##### Définitions de splines sans log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "precious-concert",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "endangered-clearing",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA1\n",
    "cut_var = 'EVT_MVA1' #:)\n",
    "cut_vals = bb_df_1[cut_var] #:) #log\n",
    "cut_min = 0.95 #log\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "print(cut_min)\n",
    "print(cut_max)\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #:)\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA1$>$0.95\") #:)\n",
    "plt.ylim(0,counts.max())\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA1_spline.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "still-kenya",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MVA2\n",
    "cut_var = 'EVT_MVA2' #:)\n",
    "cut_vals = bb_df_2[cut_var] #:)\n",
    "cut_min = 0.95\n",
    "cut_max = cut_vals.max()\n",
    "nb_bins = 50\n",
    "\n",
    "label_hist = r'$Z \\rightarrow b\\bar{b}$'\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(counts)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights) \n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min,cut_max)\n",
    "plt.xlabel(\"MVA2\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow b\\bar{b}$ data with MVA2$>$0.95\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "specialized-stretch",
   "metadata": {},
   "source": [
    "## Z->cc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "unexpected-spotlight",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2631 2312 2000 1866 1609 1482 1301 1073  983  880  771  677  595  551\n",
      "  442  377  367  299  239  189  171  157  112   91   76   63   40   26\n",
      "   16   12]\n",
      "[0.01949573 0.02079726 0.02236068 0.02314964 0.02492998 0.02597622\n",
      " 0.02772435 0.03052813 0.03189505 0.03370999 0.03601412 0.03843312\n",
      " 0.040996   0.04260143 0.04756515 0.05150262 0.05219958 0.05783149\n",
      " 0.06468462 0.0727393  0.07647191 0.07980869 0.09449112 0.10482848\n",
      " 0.11470787 0.12598816 0.15811388 0.19611614 0.25       0.28867513]\n",
      "2692.5788295690836\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 9\n",
    "\n",
    "nb_bins = 35\n",
    "cut_vals = -np.log(1-cc_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('cc_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "varied-kingston",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.1101398 3.2245476 3.3389552 3.453363  3.5677705 3.6821783\n",
      " 3.7965858 3.9109936 4.025401  4.1398087 4.254216  4.368624  4.4830317\n",
      " 4.5974393 4.711847  4.826255  4.9406624 5.05507   5.1694775 5.2838855\n",
      " 5.398293  5.5127006 5.627108  5.7415156 5.8559237 5.970331  6.0847387\n",
      " 6.1991463 6.3135543 6.427962  6.5423694 6.656777  6.771185  6.8855925\n",
      " 7.       ]\n",
      "[927 831 732 636 544 468 454 334 300 291 241 175 165 118 110 106  92  74\n",
      "  61  43  30  40  25  25  12  11  14   7   6   6   4   7   5   2   3]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 7\n",
    "nb_bins = 35\n",
    "\n",
    "cut_vals = -np.log(1-cc_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow c\\bar{c}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow c\\bar{c}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alert-richards",
   "metadata": {},
   "source": [
    "# Z -> uds uds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "conditional-indonesian",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[63 72 64 55 49 48 54 52 45 29 38 44 42 40 38 22 30 25 25 25 17 22 22 18\n",
      " 16 18 12 21  6 11 14  9 13  4  7  8  6  6  4  7  1  3  1  1  3]\n",
      "[0.12598816 0.11785113 0.125      0.13483997 0.14285714 0.14433757\n",
      " 0.13608276 0.13867505 0.1490712  0.18569534 0.16222142 0.15075567\n",
      " 0.15430335 0.15811388 0.16222142 0.21320072 0.18257419 0.2\n",
      " 0.2        0.2        0.24253563 0.21320072 0.21320072 0.23570226\n",
      " 0.25       0.23570226 0.28867513 0.21821789 0.40824829 0.30151134\n",
      " 0.26726124 0.33333333 0.2773501  0.5        0.37796447 0.35355339\n",
      " 0.40824829 0.40824829 0.5        0.37796447 1.         0.57735027\n",
      " 1.         1.         0.57735027]\n",
      "67.63791627671958\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA1\n",
    "\n",
    "\n",
    "#Paramètres\n",
    "cut_var = 'EVT_MVA1' #\n",
    "\n",
    "cut_min = -np.log(1-0.95) \n",
    "cut_max = 8\n",
    "\n",
    "nb_bins = 45\n",
    "cut_vals = -np.log(1-uds_df_1[cut_var]) #\n",
    "\n",
    "\n",
    "#Programme\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "#print(err)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "print(weights)\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "print(spline_vals.max())\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA1)\") #\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA1$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('uds_MVA1_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "greek-month",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.9957323 3.2294211 3.4631102 3.6967993 3.930488  4.164177  4.3978662\n",
      " 4.631555  4.865244  5.098933  5.332622  5.566311  5.8      ]\n",
      "[33 32 22 10  8  3  5  3  3  2  1  1]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#MVA2\n",
    "\n",
    "cut_var = 'EVT_MVA2' \n",
    "cut_min = -np.log(1-0.95)\n",
    "cut_max = 5.8\n",
    "nb_bins = 12\n",
    "\n",
    "cut_vals = -np.log(1-uds_df_2[cut_var]) #\n",
    "\n",
    "\n",
    "label_hist = r'$Z \\rightarrow q\\bar{q}$' #\n",
    "label_spline = r\"Associated spline function\"\n",
    "\n",
    "counts, bin_edges = np.histogram(cut_vals, bins=nb_bins, range=(cut_min, cut_max))\n",
    "print(bin_edges)\n",
    "print(counts)\n",
    "\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2\n",
    "err = np.sqrt(counts) #erreur en racine(N)\n",
    "\n",
    "#Normalise\n",
    "#err = err / np.sum(counts)\n",
    "#counts = counts / np.sum(counts)\n",
    "plt.errorbar(bin_centres, counts, yerr=err, fmt='o', color='k', markersize=2, label=label_hist) \n",
    "\n",
    "#Cubic spline of the MVA distribution\n",
    "weights = 1./err\n",
    "spline = interpolate.splrep(bin_centres, counts, w=weights)\n",
    "\n",
    "cut_vals = np.linspace(cut_min, cut_max, 1000) #pour avoir une courbe continue\n",
    "spline_vals = interpolate.splev(cut_vals, spline)\n",
    "\n",
    "plt.plot(cut_vals, spline_vals, color='#de2d26', label=label_spline)\n",
    "\n",
    "plt.xlim(cut_min, cut_max)\n",
    "plt.xlabel(\"-log(1-MVA2)\")\n",
    "plt.ylabel(\"Number of events\")\n",
    "plt.title(r\"$Z \\rightarrow q\\bar{q}$ data with MVA2$>$0.95\") #\n",
    "#plt.ylim(0,counts.max())\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#pickle.dump(spline, open('MVA2_spline_log.pkl','wb')) #:)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "worse-edgar",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
