{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "official-carolina",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "expanded-centre",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dowloading the data\n",
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "cc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zcc_ecm91.root')['events']\n",
    "qq_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zuds_ecm91.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "systematic-collaboration",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transforming the data into a dataframe\n",
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "cc_df = cc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "qq_df = qq_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "#Getting general information on the data\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "national-thailand",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We consider as initial data the data whose MVAs are between 0.95 and 1\n",
    "\n",
    "bc_sig = bc_df[bc_df['EVT_MVA2']> 0.95]\n",
    "bc_sig = bc_sig[bc_sig['EVT_MVA1']> 0.95]\n",
    "\n",
    "bu_bkg = bu_df[bu_df['EVT_MVA2']> 0.95]\n",
    "bu_bkg = bu_bkg[bu_bkg['EVT_MVA1']> 0.95] \n",
    "\n",
    "bb_bkg = bb_df[bb_df['EVT_MVA2']> 0.95]\n",
    "bb_bkg = bb_bkg[bb_bkg['EVT_MVA1']> 0.95] \n",
    "\n",
    "cc_bkg = cc_df[cc_df['EVT_MVA2']> 0.95]\n",
    "cc_bkg = cc_bkg[cc_bkg['EVT_MVA1']> 0.95] \n",
    "\n",
    "qq_bkg = qq_df[qq_df['EVT_MVA2']> 0.95]\n",
    "qq_bkg = qq_bkg[qq_bkg['EVT_MVA1']> 0.95]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "transsexual-standing",
   "metadata": {},
   "source": [
    "nombre_bins = 50\n",
    "bin_min = 0.95\n",
    "bin_max = 1\n",
    "\n",
    "name_bu = r\"$B^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bb = r\"$Z^0 \\rightarrow b\\bar{b}$\"\n",
    "name_cc = r\"$Z^0 \\rightarrow c\\bar{c}$\"\n",
    "name_qq = r\"$Z^0 \\rightarrow q\\bar{q}$\"\n",
    "\n",
    "#MVA1\n",
    "plt.figure()\n",
    "plt.hist(bu_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_bu)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bb_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_bb)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(cc_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_cc)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(qq_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_qq)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "#MVA2\n",
    "plt.figure()\n",
    "plt.hist(bu_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_bu)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bb_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_bb)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(cc_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_cc)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(qq_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_qq)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sophisticated-recovery",
   "metadata": {},
   "source": [
    "### Initialization of the general parameters and the functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "million-catholic",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Number of Z0 produced\n",
    "N_Z0 = 5*10**(12)\n",
    "\n",
    "#Branching fraction Z->quark-pair\n",
    "BF_Zbb = 0.1512\n",
    "BF_Zcc = 0.1203\n",
    "BF_Zqq = 0.4276\n",
    "\n",
    "#Production ratio of Bc+ and B+\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "\n",
    "#Branching fraction Bc+->tau nu B+->tau nu and tau->3pions\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "narrow-colombia",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Definition of the functions computing the different yields\n",
    "def S_bc_cut(initial_eff, cut_eff) :\n",
    "    return (N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion)*initial_eff*cut_eff\n",
    "\n",
    "def B_bu_cut(initial_eff, cut_eff) :\n",
    "    return (N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion)*initial_eff*cut_eff\n",
    "\n",
    "def B_bb_cut(initial_eff, cut_eff) :\n",
    "    return (N_Z0*BF_Zbb*2)*initial_eff*cut_eff\n",
    "\n",
    "def B_cc_cut(initial_eff, cut_eff) :\n",
    "    return (N_Z0*BF_Zcc*2)*initial_eff*cut_eff\n",
    "\n",
    "def B_qq_cut(initial_eff, cut_eff) :\n",
    "    return (N_Z0*BF_Zqq*2)*initial_eff*cut_eff\n",
    "\n",
    "#Dowloading the splines to compute the number of inclusive background events\n",
    "bb_spline_MVA1_log = pickle.load(open('../Spline_functions/MVA1_spline_log.pkl','rb'))\n",
    "bb_spline_MVA2_log = pickle.load(open('../Spline_functions/MVA2_spline_log.pkl','rb'))\n",
    "\n",
    "cc_spline_MVA1_log = pickle.load(open('../Spline_functions/cc_MVA1_spline_log.pkl','rb'))\n",
    "cc_spline_MVA2_log = pickle.load(open('../Spline_functions/cc_MVA2_spline_log.pkl','rb'))\n",
    "\n",
    "qq_spline_MVA1_log = pickle.load(open('../Spline_functions/uds_MVA1_spline_log.pkl','rb'))\n",
    "qq_spline_MVA2_log = pickle.load(open('../Spline_functions/uds_MVA2_spline_log.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "adapted-farmer",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eff sig 0.2320645\n",
      "eff bkg 0.000762\n"
     ]
    }
   ],
   "source": [
    "#Initialization of the number of events in the MVAs for all contributions\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_sig_events = len(bc_sig)\n",
    "nb_bu_events = len(bu_bkg)\n",
    "nb_bb_events = len(bb_bkg)\n",
    "nb_cc_events = len(cc_bkg)\n",
    "nb_qq_events = len(qq_bkg)\n",
    "\n",
    "#Initialization of the number of events for both MVAs for inclusive backgrounds\n",
    "nb_bb_events_1 = interpolate.splint(-np.log(1-0.95), 9, bb_spline_MVA1_log)\n",
    "nb_bb_events_2 = interpolate.splint(-np.log(1-0.95), 8, bb_spline_MVA2_log)\n",
    "\n",
    "nb_cc_events_1 = interpolate.splint(-np.log(1-0.95), 9, cc_spline_MVA1_log)\n",
    "nb_cc_events_2 = interpolate.splint(-np.log(1-0.95), 7, cc_spline_MVA2_log)\n",
    "\n",
    "nb_qq_events_1 = interpolate.splint(-np.log(1-0.95), 8, qq_spline_MVA1_log)\n",
    "nb_qq_events_2 = interpolate.splint(-np.log(1-0.95), 5.8, qq_spline_MVA2_log)\n",
    "\n",
    "#Computing of the initial efficiencies for all backgrounds\n",
    "initial_eff_bc_sig = nb_sig_events / nb_total_events\n",
    "initial_eff_bu_bkg = nb_bu_events / nb_total_events\n",
    "initial_eff_bb_bkg = nb_bb_events / nb_total_events\n",
    "initial_eff_cc_bkg = nb_cc_events / nb_total_events\n",
    "initial_eff_qq_bkg = nb_qq_events / nb_total_events\n",
    "\n",
    "print('eff sig {}'.format(initial_eff_bc_sig))\n",
    "print('eff bkg {}'.format(initial_eff_bb_bkg))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "circular-wallpaper",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "nearby-offering",
   "metadata": {},
   "source": [
    "### Initialisation of the desired behaviour of the optimisation program"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "subtle-birmingham",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max cut 1 = 0.9998765901959134 and max cut 2 = 0.9990881180344455\n"
     ]
    }
   ],
   "source": [
    "#Initialization of the minimum cut values \n",
    "min_cut_1 = 0.99986\n",
    "min_cut_2 = 0.99634\n",
    "\n",
    "min_cut_1_log = -np.log(1-min_cut_1)\n",
    "min_cut_2_log = -np.log(1-min_cut_2) \n",
    "\n",
    "#Initialization of the maximum cut values accesible to have all contributions present in the data\n",
    "max_cut_1_log = 9 #Has to be < 8\n",
    "max_cut_2_log = 7 #Has to be < 5.9\n",
    "\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log) \n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "print('max cut 1 = {} and max cut 2 = {}'.format(max_cut_1, max_cut_2))\n",
    "\n",
    "#Cut array\n",
    "cut_step = 0.000001\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "\n",
    "#Initialization of the optimization parameters\n",
    "Target_nb_sig = 4000\n",
    "\n",
    "\n",
    "Optimized_MVA1 = min_cut_1\n",
    "Optimized_MVA2 = min_cut_2\n",
    "Optimized_purity = 0\n",
    "Optimized_nb_sig = 0\n",
    "Optimized_nb_bkg = 0\n",
    "Op_eff_bc = 0\n",
    "Op_eff_bu = 0\n",
    "Op_eff_bb = 0\n",
    "Op_eff_cc = 0\n",
    "Op_eff_qq = 0\n",
    "\n",
    "#Best_MVA1 = 0.99986 and Best_MVA2 = 0.99634"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "straight-comfort",
   "metadata": {},
   "source": [
    "### Optimization program"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "partial-celtic",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0.0 %\n",
      " 1.299 %\n",
      " 2.597 %\n",
      " 3.896 %\n",
      " 5.195 %\n",
      " 6.494 %\n",
      " 7.792 %\n",
      " 9.091 %\n",
      " 10.39 %\n",
      " 11.688 %\n",
      " 12.987 %\n",
      " 14.286 %\n",
      " 15.584 %\n",
      " 16.883 %\n",
      " 18.182 %\n",
      " 19.481 %\n",
      " 20.779 %\n",
      " 22.078 %\n",
      " 23.377 %\n",
      " 24.675 %\n",
      " 25.974 %\n",
      " 27.273 %\n",
      " 28.571 %\n",
      " 29.87 %\n",
      " 31.169 %\n",
      " 32.468 %\n",
      " 33.766 %\n",
      " 35.065 %\n",
      " 36.364 %\n",
      " 37.662 %\n",
      " 38.961 %\n",
      " 40.26 %\n",
      " 41.558 %\n",
      " 42.857 %\n",
      " 44.156 %\n"
     ]
    }
   ],
   "source": [
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "   \n",
    "    #Log version of the MVA1 cut\n",
    "    cut_i1_log = -np.log(1-cut_i1)\n",
    "    \n",
    "    #Applying the MVA1 cut on the dataframe\n",
    "    df_bc_sig = bc_sig[bc_sig['EVT_MVA1']>cut_i1]\n",
    "    df_bu_bkg = bu_bkg[bu_bkg['EVT_MVA1']>cut_i1]\n",
    "    \n",
    "    #Following the computing process\n",
    "    print(' {} %'.format(round(i1/len(cut_1)*100,3)))\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "        \n",
    "        #Log version of the MVA2 cut\n",
    "        cut_i2_log = -np.log(1-cut_i2)\n",
    "        \n",
    "        #Applying the MVA2 cut on the dataframe\n",
    "        df_bc_sig_ = df_bc_sig[df_bc_sig['EVT_MVA2']>cut_i2]\n",
    "        df_bu_bkg_ = df_bu_bkg[df_bu_bkg['EVT_MVA2']>cut_i2]\n",
    "          \n",
    "        #Counting the number of events in the Bc+ and B+ dataframes after the cut\n",
    "        nb_bc_cut_i1_i2 = len(df_bc_sig_)\n",
    "        \n",
    "        nb_bu_cut_i1_i2 = len(df_bu_bkg_)\n",
    "          \n",
    "        #Counting the number of events left for each MVAs for inclusive backgrounds\n",
    "        nb_bb_cut_i1 = interpolate.splint(cut_i1_log, 9, bb_spline_MVA1_log)\n",
    "        nb_bb_cut_i2 = interpolate.splint(cut_i2_log, 8, bb_spline_MVA2_log)\n",
    "        \n",
    "        nb_cc_cut_i1 = interpolate.splint(cut_i1_log, 9, cc_spline_MVA1_log)\n",
    "        nb_cc_cut_i2 = interpolate.splint(cut_i2_log, 7, cc_spline_MVA2_log)\n",
    "        \n",
    "        nb_qq_cut_i1 = interpolate.splint(cut_i1_log, 8, qq_spline_MVA1_log)\n",
    "        nb_qq_cut_i2 = interpolate.splint(cut_i2_log, 5.8, qq_spline_MVA2_log)\n",
    "\n",
    "        \n",
    "        #Computing the efficiencies\n",
    "        cut_eff_bc_sig = nb_bc_cut_i1_i2 / nb_sig_events\n",
    "        \n",
    "        cut_eff_bu_bkg = nb_bu_cut_i1_i2 / nb_bu_events\n",
    "        cut_eff_bb_bkg = (nb_bb_cut_i1 / nb_bb_events_1) * (nb_bb_cut_i2 / nb_bb_events_2)\n",
    "        cut_eff_cc_bkg = (nb_cc_cut_i1 / nb_cc_events_1) * (nb_cc_cut_i2 / nb_cc_events_2)\n",
    "        cut_eff_qq_bkg = (nb_qq_cut_i1 / nb_qq_events_1) * (nb_qq_cut_i2 / nb_qq_events_2)\n",
    "        \n",
    "        #print(\"bkg cut eff {}\".format(cut_eff_bb_bkg))\n",
    "        #print(\"sig cut eff {}\".format(cut_eff_sig))\n",
    "        \n",
    "        #Signal, Background and Purity\n",
    "        S = S_bc_cut(initial_eff_bc_sig, cut_eff_bc_sig)\n",
    "        B = B_bb_cut(initial_eff_bb_bkg, cut_eff_bb_bkg) + B_cc_cut(initial_eff_cc_bkg, cut_eff_cc_bkg) + B_bu_cut(initial_eff_bu_bkg, cut_eff_bu_bkg) #+ B_qq_cut(initial_eff_qq_bkg, cut_eff_qq_bkg)\n",
    "        P = S/(S+B)\n",
    "        #print(s)\n",
    "        #print(b)\n",
    "        #print(p)\n",
    "        \n",
    "        if (S > Target_nb_sig) & (P > Optimized_purity) & (cut_eff_cc_bkg>0) & (cut_eff_bb_bkg>0) : #& (cut_eff_qq_bkg>0) :\n",
    "            \n",
    "            Optimized_MVA1 = cut_i1\n",
    "            Optimized_MVA2 = cut_i2\n",
    "            Optimized_purity = P\n",
    "            Optimized_nb_sig = S\n",
    "            Optimized_nb_bkg = B\n",
    "            \n",
    "            Op_eff_bc = cut_eff_bc_sig\n",
    "            Op_eff_bu = cut_eff_bu_bkg\n",
    "            Op_eff_bb = cut_eff_bb_bkg\n",
    "            Op_eff_cc = cut_eff_cc_bkg\n",
    "            Op_eff_qq = cut_eff_qq_bkg\n",
    "\n",
    "\n",
    "print('The best purity for a target of {} sig events is equal to = {}'.format(Target_nb_sig, Optimized_purity ))\n",
    "print('It is associated to a MVA1 cut = {} and a MVA2 cut = {}'.format(Optimized_MVA1, Optimized_MVA2))\n",
    "print('Total number of signal = {} and total number of background = {}'.format(Optimized_nb_sig, Optimized_nb_bkg))\n",
    "print('starting MVA1 = {}, MVA2={} and cut step = {}'.format(min_cut_1, min_cut_2, cut_step))\n",
    "\n",
    "#Best_MVA1 = 0.99986 and Best_MVA2 = 0.99634"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "focused-european",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.03023211219294636\n",
      "0.0021897997587073665\n",
      "6.362229172433942e-05\n",
      "0.00011559111059700841\n",
      "4.847119514374763e-09\n"
     ]
    }
   ],
   "source": [
    "print(Op_eff_bc)\n",
    "print(Op_eff_bu)\n",
    "print(Op_eff_bb)\n",
    "print(Op_eff_cc)\n",
    "print(Op_eff_qq)\n",
    "\n",
    "#0.13853198509593456\n",
    "#6.362229172433942e-05\n",
    "#0.00011559111059700841\n",
    "#4.847119514374763e-09"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "reverse-haiti",
   "metadata": {},
   "source": [
    "MVA1 = 0.99960\n",
    "MVA2 = 0.99655\n",
    "\n",
    "bb = bb_df[bb_df[var2]> MVA1]\n",
    "bb = bb[bb[var1]> MVA2] \n",
    "print(len(bb))\n",
    "\n",
    "cc = cc_df[cc_df[var2]> MVA1]\n",
    "cc = cc[cc[var1]> MVA2] \n",
    "print(len(cc))\n",
    "\n",
    "qq = qq_df[cc_df[var2]> MVA1]\n",
    "qq = qq[cc[var1]> MVA2] \n",
    "print(len(cc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "extensive-debut",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.00762053342286017\n",
    "It is associated to a MVA1 cut = 0.995 and a MVA2 cut = 0.995\n",
    "Total number of signal = 32608.280434060805\n",
    "0.95 - 0.95 -> 0.005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "simple-ballet",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10338941235492337\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "0.99 - 0.99 --> 0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "chinese-apparatus",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.1417545865165297\n",
    "It is associated to a MVA1 cut = 0.9996499999999995 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "0.995 - 0.995 --> 0.00005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "minute-retirement",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.14203635521496488\n",
    "It is associated to a MVA1 cut = 0.9996599999999924 and a MVA2 cut = 0.996969999999991\n",
    "Total number of signal = 6104.5081429248\n",
    "0.999 - 0.995 --> 0.00001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "necessary-throw",
   "metadata": {},
   "source": [
    "###### Z->bb only"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bridal-variance",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997076566536363\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "certain-cache",
   "metadata": {},
   "source": [
    "##### Z->cc only"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cognitive-contamination",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.13806534902436324\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "0.95 - 0.95 and cut_step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "spare-movie",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.4717904361823947\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "0.99 - 0.99 and cut_step=0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frequent-scholar",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247887912\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stupid-financing",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247887616\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999997\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.994 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "treated-interference",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997899203196045\n",
    "It is associated to a MVA1 cut = 0.9996599999999993 and a MVA2 cut = 0.9969699999999979\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.9995, MVA2=0.9965 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "laden-louisiana",
   "metadata": {},
   "outputs": [],
   "source": [
    "MVA1 = 0.99966\n",
    "MVA2 = 0.99697\n",
    "\n",
    "cc_bkg = cc_df[cc_df[var2]> 0.95]\n",
    "cc = cc_bkg[cc_bkg[var1]> 0.95]\n",
    "\n",
    "cc = cc[cc[var1]>MVA1]\n",
    "cc = cc[cc[var2]>MVA2]\n",
    "\n",
    "print(len(cc[var1]))\n",
    "print(len(cc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "talented-grocery",
   "metadata": {},
   "source": [
    "##### Z -> cc, Z->qq "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "neither-zealand",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.1286513704912971\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "controversial-chicago",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.46888797545954825\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "starting MVA1 = 0.99, MVA2=0.99 and cut step = 0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "illegal-authentication",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247888675\n",
    "It is associated to a MVA1 cut = 0.9996499999999999 and a MVA2 cut = 0.9969499999999999\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "roman-deficit",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997899203192959\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "atmospheric-consideration",
   "metadata": {},
   "source": [
    "##### All backgrounds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "plastic-lightweight",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.05794107994739463\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-greensboro",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.7771910921708424\n",
    "It is associated to a MVA1 cut = 0.9995999999999998 and a MVA2 cut = 0.9968999999999998\n",
    "Total number of signal = 6917.0006553984\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "approved-beijing",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9062601882796778\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "atmospheric-story",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9194429039125283\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dated-cemetery",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Best_n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "basic-bolivia",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "natural-pasta",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "medieval-emission",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "under-wednesday",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "inner-lafayette",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.6355602247488397\n",
    "It is associated to a MVA1 cut = 0.9995999999999998 and a MVA2 cut = 0.9965499999999998\n",
    "Total number of signal = 8130.6053627904\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "peaceful-madonna",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10500350724294667\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "intimate-average",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.007747494248010196\n",
    "It is associated to a MVA1 cut = 0.995 and a MVA2 cut = 0.995\n",
    "Total number of signal = 32608.280434060805\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latter-spank",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.03581884843286743\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "waiting-lebanon",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.0929930459752499\n",
    "It is associated to a MVA1 cut = 0.9995999999999998 and a MVA2 cut = 0.9968999999999998\n",
    "Total number of signal = 6917.0006553984\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "domestic-thirty",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10803288566298305\n",
    "It is associated to a MVA1 cut = 0.9996599999999988 and a MVA2 cut = 0.9969699999999979\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.9994, MVA2=0.9965 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "amber-european",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10916608489854127\n",
    "It is associated to a MVA1 cut = 0.9996640000000004 and a MVA2 cut = 0.9969720000000006\n",
    "Total number of signal = 6055.6799427263995\n",
    "starting MVA1 = 0.99965, MVA2=0.99695 and cut step = 1e-06"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "contrary-secretariat",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.03581884843286743\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.95\n",
    "Total number of signal = 15001.290230976001 and total number of background = 403808.6628330313\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "statewide-crowd",
   "metadata": {},
   "source": [
    "## Good values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loose-baptist",
   "metadata": {},
   "source": [
    "### Pourquoi pas les même résultats quand on considère Z->bb seulement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "practical-shield",
   "metadata": {},
   "source": [
    "##### C'est à cause de la valeur limite des cuts qui est imposée par l'espace de définition des splines MVA1 de Z->cc et Z->qq"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "behind-programmer",
   "metadata": {},
   "source": [
    "MVA1_log = 8 : The best purity for a target of 4000 sig events is equal to = 0.10500350724299926\n",
    "It is associated to a MVA1 cut = 0.9996499999999999 and a MVA2 cut = 0.9969499999999999\n",
    "Total number of signal = 6268.470399072 and total number of background = 53429.25364518775\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "average-belfast",
   "metadata": {},
   "source": [
    "MVA1_log = 9 : The best purity for a target of 4000 sig events is equal to = 0.36811026108634637\n",
    "It is associated to a MVA1 cut = 0.9998499999999999 and a MVA2 cut = 0.9964999999999999\n",
    "Total number of signal = 4044.7664361216002 and total number of background = 6943.154476989902\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "practical-technology",
   "metadata": {},
   "source": [
    "MVA1_log = 9 : The best purity for a target of 4000 sig events is equal to = 0.5258430336579484\n",
    "It is associated to a MVA1 cut = 0.9998599999999961 and a MVA2 cut = 0.9963399999999984\n",
    "Total number of signal = 4009.2649482816005 and total number of background = 3615.187011064041\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "judicial-ordering",
   "metadata": {},
   "source": [
    "MVA1_log = 8 : The best purity for a target of 4000 sig events is equal to = 0.10803288566204854\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248 and total number of background = 50401.50949712132\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mounted-sense",
   "metadata": {},
   "source": [
    "### Valeurs de puretés et cuts les plus optimaux lorsque l'on considère tout les bruits de fonds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caroline-sodium",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.06317232584933317\n",
    "It is associated to a MVA1 cut = 0.9996299999999971 and a MVA2 cut = 0.9965899999999973\n",
    "Total number of signal = 7663.733488857601 and total number of background = 113650.99389882328\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "traditional-white",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.06317232584933317\n",
    "It is associated to a MVA1 cut = 0.9996299999999971 and a MVA2 cut = 0.9965899999999973\n",
    "Total number of signal = 7663.733488857601 and total number of background = 113650.99389882328\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "muslim-textbook",
   "metadata": {},
   "source": [
    "### Z->cc only"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "minute-plane",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.19037206699734036\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248 and total number of background = 25961.688538178023\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "introductory-vehicle",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997899203196045 It is associated to a MVA1 cut = 0.9996599999999993 and a MVA2 cut = 0.9969699999999979 Total number of signal = 6104.5081429248 starting MVA1 = 0.9995, MVA2=0.9965 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "noble-example",
   "metadata": {},
   "source": [
    "### Z->bb, Z->cc and B+"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "threaded-screening",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.4726705082061383\n",
    "It is associated to a MVA1 cut = 0.9998599999999961 and a MVA2 cut = 0.9963399999999984\n",
    "Total number of signal = 4009.2649482816005 and total number of background = 4472.890969373205\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incredible-alert",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.47308794085013783\n",
    "It is associated to a MVA1 cut = 0.9998600000000004 and a MVA2 cut = 0.9963450000000003\n",
    "Total number of signal = 4003.0385334912003 and total number of background = 4458.471870468262\n",
    "starting MVA1 = 0.9998, MVA2=0.9963 and cut step = 5e-06"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exempt-canon",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
