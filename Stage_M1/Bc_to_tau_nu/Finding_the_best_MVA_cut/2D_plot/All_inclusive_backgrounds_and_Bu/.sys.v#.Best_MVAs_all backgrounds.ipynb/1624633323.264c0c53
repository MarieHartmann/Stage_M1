{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "serial-naples",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "reflected-payroll",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "cc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zcc_ecm91.root')['events']\n",
    "qq_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zuds_ecm91.root')['events']\n",
    "\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "recent-habitat",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Signal\n",
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "#Background\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "cc_df = cc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "qq_df = qq_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "\n",
    "#General informations\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informative-guitar",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "metropolitan-fabric",
   "metadata": {},
   "outputs": [],
   "source": [
    "var1 = 'EVT_MVA1'\n",
    "var2 = 'EVT_MVA2'\n",
    "\n",
    "name_bu = r\"$B^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bb = r\"$Z^0 \\rightarrow b\\bar{b}$\"\n",
    "name_cc = r\"$Z^0 \\rightarrow c\\bar{c}$\"\n",
    "name_qq = r\"$Z^0 \\rightarrow q\\bar{q}$\"\n",
    "\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bu_bkg = bu_df[bu_df[var2]> 0.95]\n",
    "bu_bkg = bu_bkg[bu_bkg[var1]> 0.95] \n",
    "bb_bkg = bb_df[bb_df[var2]> 0.95]\n",
    "bb_bkg = bb_bkg[bb_bkg[var1]> 0.95] \n",
    "cc_bkg = cc_df[cc_df[var2]> 0.95]\n",
    "cc_bkg = cc_bkg[cc_bkg[var1]> 0.95] \n",
    "qq_bkg = qq_df[qq_df[var2]> 0.95]\n",
    "qq_bkg = qq_bkg[qq_bkg[var1]> 0.95]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "regulated-heater",
   "metadata": {},
   "outputs": [],
   "source": [
    "nombre_bins = 50\n",
    "bin_min = 0.95\n",
    "bin_max = 1\n",
    "\n",
    "#MVA1\n",
    "plt.figure()\n",
    "plt.hist(bu_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_bu)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bb_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_bb)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(cc_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_cc)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(qq_bkg[var1], bins=nombre_bins, range=(bin_min, bin_max), label=name_qq)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA1 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "#MVA2\n",
    "plt.figure()\n",
    "plt.hist(bu_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_bu)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bb_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_bb)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(cc_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_cc)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(qq_bkg[var2], bins=nombre_bins, range=(bin_min, bin_max), label=name_qq)\n",
    "plt.xlim(bin_min, bin_max)\n",
    "plt.xlabel(\"MVA2 cut\")\n",
    "plt.ylabel(\"Number of events / {}\".format(round((bin_max-bin_min)/nombre_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "korean-ecology",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "BF_Zcc = 0.1203\n",
    "BF_Zqq = 0.4276\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931\n",
    "\n",
    "def S_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "\n",
    "def B_bu_cut(initial_eff_bu_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff_bu_bkg*cut_eff\n",
    "\n",
    "def B_bb_cut(initial_eff_bb_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_bb_bkg*cut_eff\n",
    "\n",
    "def B_cc_cut(initial_eff_cc_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zcc*2*initial_eff_cc_bkg*cut_eff\n",
    "\n",
    "def B_qq_cut(initial_eff_qq_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zqq*2*initial_eff_qq_bkg*cut_eff\n",
    "\n",
    "bb_spline_MVA1_log = pickle.load(open('../Spline_functions/MVA1_spline_log.pkl','rb'))\n",
    "bb_spline_MVA2_log = pickle.load(open('../Spline_functions/MVA2_spline_log.pkl','rb'))\n",
    "cc_spline_MVA1_log = pickle.load(open('../Spline_functions/cc_MVA1_spline_log.pkl','rb'))\n",
    "cc_spline_MVA2_log = pickle.load(open('../Spline_functions/cc_MVA2_spline_log.pkl','rb'))\n",
    "qq_spline_MVA1_log = pickle.load(open('../Spline_functions/uds_MVA1_spline_log.pkl','rb'))\n",
    "qq_spline_MVA2_log = pickle.load(open('../Spline_functions/uds_MVA2_spline_log.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informational-generation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "foster-blackberry",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nb_bkg_MVA1 = 5808.795446063277\n",
      "nb_bkg_MVA2 = 2566.9475284020536\n",
      "eff sig 0.2320645\n",
      "eff bkg 0.000762\n",
      " 0.0 %\n",
      " 2.941 %\n",
      " 5.882 %\n",
      " 8.824 %\n",
      " 11.765 %\n",
      " 14.706 %\n",
      " 17.647 %\n",
      " 20.588 %\n",
      " 23.529 %\n",
      " 26.471 %\n",
      " 29.412 %\n",
      " 32.353 %\n",
      " 35.294 %\n",
      " 38.235 %\n",
      " 41.176 %\n",
      " 44.118 %\n",
      " 47.059 %\n",
      " 50.0 %\n",
      " 52.941 %\n",
      " 55.882 %\n",
      " 58.824 %\n",
      " 61.765 %\n",
      " 64.706 %\n"
     ]
    }
   ],
   "source": [
    "cut_step = 0.00005\n",
    "\n",
    "## MVA1\n",
    "min_cut_1 = 0.998 #\n",
    "\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1_log = -np.log(1-min_cut_1)\n",
    "max_cut_1_log = 8 #On met la plus petite valeur accessible par les splines\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log) \n",
    "\n",
    "nb_bb_events_1 = interpolate.splint(-np.log(1-0.95), 9, bb_spline_MVA1_log)\n",
    "nb_cc_events_1 = interpolate.splint(-np.log(1-0.95), 9, cc_spline_MVA1_log)\n",
    "nb_qq_events_1 = interpolate.splint(-np.log(1-0.95), 8, qq_spline_MVA1_log)\n",
    "\n",
    "print(\"nb_bkg_MVA1 = {}\".format(nb_bb_events_1))\n",
    "\n",
    "##MVA2\n",
    "min_cut_2 = 0.995 #\n",
    "\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2_log = -np.log(1 - min_cut_2)\n",
    "max_cut_2_log = 5.8 #On met la plus petite valeur accessible par les splines\n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "\n",
    "nb_bb_events_2 = interpolate.splint(-np.log(1-0.95), 8, bb_spline_MVA2_log)\n",
    "nb_cc_events_2 = interpolate.splint(-np.log(1-0.95), 7, cc_spline_MVA2_log)\n",
    "nb_qq_events_2 = interpolate.splint(-np.log(1-0.95), 5.8, qq_spline_MVA2_log)\n",
    "#On considère que le nombre d'élèments vaut 0 après ces valeurs là donc il faudra faire notre cut avant !\n",
    "print(\"nb_bkg_MVA2 = {}\".format(nb_bb_events_2))\n",
    "\n",
    "#Parameters\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bu_bkg = bu_df[bu_df[var2]> 0.95]\n",
    "bu_bkg = bu_bkg[bu_bkg[var1]> 0.95] \n",
    "bb_bkg = bb_df[bb_df[var2]> 0.95]\n",
    "bb_bkg = bb_bkg[bb_bkg[var1]> 0.95] \n",
    "cc_bkg = cc_df[cc_df[var2]> 0.95]\n",
    "cc_bkg = cc_bkg[cc_bkg[var1]> 0.95] \n",
    "qq_bkg = qq_df[qq_df[var2]> 0.95]\n",
    "qq_bkg = qq_bkg[qq_bkg[var1]> 0.95]\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_sig_events = len(sig)\n",
    "nb_bu_events = len(bu_bkg)\n",
    "nb_bb_events = len(bb_bkg)\n",
    "nb_cc_events = len(cc_bkg)\n",
    "nb_qq_events = len(qq_bkg)\n",
    "\n",
    "initial_eff_sig = nb_sig_events / nb_total_events\n",
    "initial_eff_bu_bkg = nb_bu_events / nb_total_events\n",
    "initial_eff_bb_bkg = nb_bb_events / nb_total_events\n",
    "initial_eff_cc_bkg = nb_cc_events / nb_total_events\n",
    "initial_eff_qq_bkg = nb_qq_events / nb_total_events\n",
    "\n",
    "\n",
    "print('eff sig {}'.format(initial_eff_sig))\n",
    "print('eff bkg {}'.format(initial_eff_bb_bkg))\n",
    "\n",
    "\n",
    "#np.array()\n",
    "cut_1_ = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2_ = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "\n",
    "Best_p = 0\n",
    "Best_MVA1 = 0.95\n",
    "Best_MVA2 = 0.95\n",
    "Best_n_sig = 0\n",
    "Best_n_bkg = 0\n",
    "Target_n_sig = 4000\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1_) :\n",
    "   \n",
    "    cut_i1_log = -np.log(1-cut_i1)\n",
    "    df_sig = sig[sig[var1]>cut_i1]\n",
    "    df_bu_bkg = bu_bkg[bu_bkg[var1]>cut_i1]\n",
    "    print(' {} %'.format(round(i1/len(cut_1_)*100,3)))\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2_) :\n",
    "        \n",
    "        cut_i2_log = -np.log(1-cut_i2) #log\n",
    "        df_sig_ = df_sig[df_sig[var2]>cut_i2]\n",
    "        df_bu_bkg_ = df_bu_bkg[df_bu_bkg[var2]>cut_i2]\n",
    "          \n",
    "          \n",
    "        #Compter le nombre d'élèments\n",
    "        nb_sig_cut_i1_i2 = len(df_sig_)\n",
    "        nb_bu_cut_i1_i2 = len(df_bu_bkg_)\n",
    "          \n",
    "        nb_bb_cut_i1 = interpolate.splint(cut_i1_log, 9, bb_spline_MVA1_log)\n",
    "        nb_bb_cut_i2 = interpolate.splint(cut_i2_log, 8, bb_spline_MVA2_log)\n",
    "        nb_cc_cut_i1 = interpolate.splint(cut_i1_log, 9, cc_spline_MVA1_log)\n",
    "        nb_cc_cut_i2 = interpolate.splint(cut_i2_log, 7, cc_spline_MVA2_log)\n",
    "        nb_qq_cut_i1 = interpolate.splint(cut_i1_log, 8, qq_spline_MVA1_log)\n",
    "        nb_qq_cut_i2 = interpolate.splint(cut_i2_log, 5.8, qq_spline_MVA2_log)\n",
    "\n",
    "        \n",
    "        #Calculer l'efficiency\n",
    "        cut_eff_sig = nb_sig_cut_i1_i2 / nb_sig_events\n",
    "        cut_eff_bu_bkg = nb_bu_cut_i1_i2 / nb_bu_events\n",
    "        cut_eff_bb_bkg = (nb_bb_cut_i1 / nb_bb_events_1) * (nb_bb_cut_i2 / nb_bb_events_2)\n",
    "        cut_eff_cc_bkg = (nb_cc_cut_i1 / nb_cc_events_1) * (nb_cc_cut_i2 / nb_cc_events_2)\n",
    "        cut_eff_qq_bkg = (nb_qq_cut_i1 / nb_qq_events_1) * (nb_qq_cut_i2 / nb_qq_events_2)\n",
    "        \n",
    "        #print(\"bkg cut eff {}\".format(cut_eff_bb_bkg))\n",
    "        #print(\"sig cut eff {}\".format(cut_eff_sig))\n",
    "        \n",
    "        #Signal, Background and Purity\n",
    "        s = S_cut(initial_eff_sig, cut_eff_sig)\n",
    "        b = B_bb_cut(initial_eff_bb_bkg, cut_eff_bb_bkg) #B_cc_cut(initial_eff_cc_bkg, cut_eff_cc_bkg) + B_qq_cut(initial_eff_qq_bkg, cut_eff_qq_bkg) + B_bu_cut(initial_eff_bu_bkg, cut_eff_bu_bkg) + B_bb_cut(initial_eff_bb_bkg, cut_eff_bb_bkg) \n",
    "        p = s/(s+b)\n",
    "        #print(s)\n",
    "        #print(b)\n",
    "        #print(p)\n",
    "        \n",
    "        if (s > Target_n_sig) & (p > Best_p) & (cut_eff_bb_bkg>0) :#& (cut_eff_cc_bkg>0) & (cut_eff_qq_bkg>0) :\n",
    "            \n",
    "            Best_MVA1 = cut_i1\n",
    "            Best_MVA2 = cut_i2\n",
    "            Best_p = p\n",
    "            Best_n_sig = s\n",
    "            Best_n_bkg = b\n",
    "\n",
    "print('The best purity for a target of {} sig events is equal to = {}'.format(Target_n_sig, Best_p ))\n",
    "print('It is associated to a MVA1 cut = {} and a MVA2 cut = {}'.format(Best_MVA1, Best_MVA2))\n",
    "print('Total number of signal = {}'.format(Best_n_sig))\n",
    "print('starting MVA1 = {}, MVA2={} and cut step = {}'.format(min_cut_1, min_cut_2,cut_step))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "acknowledged-apollo",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4662.211188943071\n"
     ]
    }
   ],
   "source": [
    "print(Best_n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "moral-variable",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "2\n",
      "2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-20-ae97199afe8a>:12: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  qq = qq_df[cc_df[var2]> MVA1]\n",
      "<ipython-input-20-ae97199afe8a>:13: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  qq = qq[cc[var1]> MVA2]\n"
     ]
    }
   ],
   "source": [
    "MVA1 = 0.99960\n",
    "MVA2 = 0.99655\n",
    "\n",
    "bb = bb_df[bb_df[var2]> MVA1]\n",
    "bb = bb[bb[var1]> MVA2] \n",
    "print(len(bb))\n",
    "\n",
    "cc = cc_df[cc_df[var2]> MVA1]\n",
    "cc = cc[cc[var1]> MVA2] \n",
    "print(len(cc))\n",
    "\n",
    "qq = qq_df[cc_df[var2]> MVA1]\n",
    "qq = qq[cc[var1]> MVA2] \n",
    "print(len(cc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "laughing-aggregate",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.00762053342286017\n",
    "It is associated to a MVA1 cut = 0.995 and a MVA2 cut = 0.995\n",
    "Total number of signal = 32608.280434060805\n",
    "0.95 - 0.95 -> 0.005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "white-pension",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10338941235492337\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "0.99 - 0.99 --> 0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "authentic-expression",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.1417545865165297\n",
    "It is associated to a MVA1 cut = 0.9996499999999995 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "0.995 - 0.995 --> 0.00005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adjustable-vacuum",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.14203635521496488\n",
    "It is associated to a MVA1 cut = 0.9996599999999924 and a MVA2 cut = 0.996969999999991\n",
    "Total number of signal = 6104.5081429248\n",
    "0.999 - 0.995 --> 0.00001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "active-popularity",
   "metadata": {},
   "source": [
    "###### Z->bb only"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incoming-cradle",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997076566536363\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stupid-congo",
   "metadata": {},
   "source": [
    "##### Z->cc only"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "continuing-course",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.13806534902436324\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "0.95 - 0.95 and cut_step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "naughty-craft",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.4717904361823947\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "0.99 - 0.99 and cut_step=0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "substantial-roberts",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247887912\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "modified-facial",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247887616\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999997\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.994 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unusual-gossip",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997899203196045\n",
    "It is associated to a MVA1 cut = 0.9996599999999993 and a MVA2 cut = 0.9969699999999979\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.9995, MVA2=0.9965 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "shared-chance",
   "metadata": {},
   "outputs": [],
   "source": [
    "MVA1 = 0.99966\n",
    "MVA2 = 0.99697\n",
    "\n",
    "cc_bkg = cc_df[cc_df[var2]> 0.95]\n",
    "cc = cc_bkg[cc_bkg[var1]> 0.95]\n",
    "\n",
    "cc = cc[cc[var1]>MVA1]\n",
    "cc = cc[cc[var2]>MVA2]\n",
    "\n",
    "print(len(cc[var1]))\n",
    "print(len(cc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "urban-sherman",
   "metadata": {},
   "source": [
    "##### Z -> cc, Z->qq "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "automatic-broadcasting",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.1286513704912971\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sustained-catch",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.46888797545954825\n",
    "It is associated to a MVA1 cut = 0.999499999999999 and a MVA2 cut = 0.9964999999999993\n",
    "Total number of signal = 9302.3729322048\n",
    "starting MVA1 = 0.99, MVA2=0.99 and cut step = 0.0005"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "enormous-catering",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9939549247888675\n",
    "It is associated to a MVA1 cut = 0.9996499999999999 and a MVA2 cut = 0.9969499999999999\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "preceding-russian",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9997899203192959\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "advisory-revelation",
   "metadata": {},
   "source": [
    "##### All backgrounds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "accessible-fetish",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.05794107994739463\n",
    "It is associated to a MVA1 cut = 0.999 and a MVA2 cut = 0.996\n",
    "Total number of signal = 15001.290230976001\n",
    "starting MVA1 = 0.95, MVA2=0.95 and cut step = 0.001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dying-intent",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.7771910921708424\n",
    "It is associated to a MVA1 cut = 0.9995999999999998 and a MVA2 cut = 0.9968999999999998\n",
    "Total number of signal = 6917.0006553984\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "surprising-rescue",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9062601882796778\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "british-surface",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.9194429039125283\n",
    "It is associated to a MVA1 cut = 0.999659999999997 and a MVA2 cut = 0.9969699999999956\n",
    "Total number of signal = 6104.5081429248\n",
    "starting MVA1 = 0.999, MVA2=0.996 and cut step = 1e-05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "presidential-village",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "534.8471851201875\n"
     ]
    }
   ],
   "source": [
    "print(Best_n_bkg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "crude-terrace",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hungry-cancer",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "swiss-montreal",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "tight-arthur",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "hollywood-deposit",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.6355602247488397\n",
    "It is associated to a MVA1 cut = 0.9995999999999998 and a MVA2 cut = 0.9965499999999998\n",
    "Total number of signal = 8130.6053627904\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "prescription-portable",
   "metadata": {},
   "source": [
    "The best purity for a target of 4000 sig events is equal to = 0.10500350724294667\n",
    "It is associated to a MVA1 cut = 0.9996499999999998 and a MVA2 cut = 0.9969499999999998\n",
    "Total number of signal = 6268.470399072\n",
    "starting MVA1 = 0.998, MVA2=0.995 and cut step = 5e-05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dynamic-mauritius",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
