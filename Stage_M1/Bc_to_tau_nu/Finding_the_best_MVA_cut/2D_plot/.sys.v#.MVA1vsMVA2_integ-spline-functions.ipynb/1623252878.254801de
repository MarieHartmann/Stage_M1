{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "metric-rolling",
   "metadata": {},
   "source": [
    "# Best MVA1vsMVA2 combined cut using integrals of spline functions for more precision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "educated-aluminum",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cordless-pregnancy",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "plain-sunrise",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "romantic-compact",
   "metadata": {},
   "source": [
    "##### Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "significant-oriental",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "stunning-breach",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "\n",
    "def B_incl_cut(initial_eff_incl_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_incl_bkg*cut_eff\n",
    "\n",
    "#def B_cut(cut_eff) :\n",
    "   # return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff_bkg*cut_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "married-belly",
   "metadata": {},
   "outputs": [],
   "source": [
    "spline_MVA1 = pickle.load(open('Spline_functions/MVA1_spline.pkl','rb'))\n",
    "spline_MVA2 = pickle.load(open('Spline_functions/MVA2_spline.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fifth-pursuit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8386336288412385"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interpolate.splint(0.96, 1, spline_MVA1)/interpolate.splint(0.95, 1, spline_MVA1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "sunrise-sheffield",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_step = 0.001\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.95\n",
    "max_cut_1 = bb_df[var1].max()\n",
    "nb_bkg_events_1 = interpolate.splint(min_cut_1, max_cut_1, spline_MVA1)\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.95\n",
    "max_cut_2 = bb_df[var2].max()\n",
    "nb_bkg_events_2 = interpolate.splint(min_cut_2, max_cut_2, spline_MVA2)\n",
    "\n",
    "#Parameters\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(bc_df['EVT_MVA1'])\n",
    "nb_bkg_events = len(bb_df['EVT_MVA1'])\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "#np.array()\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "\n",
    "        df_signal = bc_df[(bc_df[var1]>cut_i1)&(bc_df[var2]>cut_i2)]\n",
    "        #df_bkg = bb_df[ (bb_df[var1] > cut_i1) & (bb_df[var2] > cut_i2) ]\n",
    "        \n",
    "        nb_signal_both_cut = len(df_signal)\n",
    "        nb_bkg_cut_i1 = interpolate.splint(cut_i1, max_cut_1, spline_MVA1)\n",
    "        nb_bkg_cut_i2 = interpolate.splint(cut_i2, max_cut_2, spline_MVA2)\n",
    "\n",
    "        signal_cut_eff = nb_signal_both_cut / nb_signal_events\n",
    "        bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i1 / nb_bkg_events_2)\n",
    "\n",
    "        s = S_cut(initial_eff_incl_bkg, signal_cut_eff)\n",
    "        b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "        \n",
    "        p_tab[i2,i1] = s/(s+b)\n",
    "        \n",
    "        #print('MVA2={} i2={} MVA1={} i1={} p={}'.format(cut_i2, i2, cut_i1, i1, s/(s+b)))\n",
    "        \n",
    "        \n",
    "        \n",
    "        #df_bkg_1 = bu_df[(bu_df[var1] > cut_i1)&(bu_df[var2] > cut_i2)]\n",
    "        #cut_eff_bkg_1 = len(df_bkg_1)/nb_bkg_events1\n",
    "        #B_cut(cut_eff_bkg_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "expired-generic",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cut_1)\n",
    "print(cut_2)\n",
    "print(p_tab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "graphic-recognition",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(p_tab, cmap='Greens', origin='lower',extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title(r'$B_c^+ \\rightarrow \\tau^+ \\nu_\\tau$ and inclusive $b\\bar{b}$ bkg')\n",
    "plt.xlim(0.99,1)\n",
    "plt.ylim(0.99,1)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "injured-mayor",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_tab = np.zeros((4,4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
