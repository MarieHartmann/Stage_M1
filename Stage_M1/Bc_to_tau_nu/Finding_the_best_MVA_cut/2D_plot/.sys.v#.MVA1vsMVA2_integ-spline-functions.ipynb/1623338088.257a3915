{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "informative-doubt",
   "metadata": {},
   "source": [
    "# Best MVA1vsMVA2 combined cut using integrals of spline functions for more precision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "unknown-hollow",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ideal-audit",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "military-gregory",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "varying-peace",
   "metadata": {},
   "source": [
    "##### Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aquatic-vancouver",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "typical-sodium",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "\n",
    "def B_incl_cut(initial_eff_incl_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_incl_bkg*cut_eff\n",
    "\n",
    "#def B_cut(cut_eff) :\n",
    "   # return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff_bkg*cut_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "answering-seventh",
   "metadata": {},
   "outputs": [],
   "source": [
    "spline_MVA1 = pickle.load(open('Spline_functions/MVA1_spline.pkl','rb'))\n",
    "spline_MVA2 = pickle.load(open('Spline_functions/MVA2_spline.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "joint-opportunity",
   "metadata": {},
   "outputs": [],
   "source": [
    "interpolate.splint(0.96, 1, spline_MVA1)/interpolate.splint(0.95, 1, spline_MVA1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aging-accident",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_step = 0.001\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.99\n",
    "max_cut_1 = bb_df[var1].max()\n",
    "nb_bkg_events_1 = interpolate.splint(min_cut_1, max_cut_1, spline_MVA1)\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.96\n",
    "max_cut_2 = bb_df[var2].max()\n",
    "nb_bkg_events_2 = interpolate.splint(min_cut_2, max_cut_2, spline_MVA2)\n",
    "\n",
    "#Parameters\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(bc_df['EVT_MVA1'])\n",
    "nb_bkg_events = len(bb_df['EVT_MVA1'])\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "#np.array()\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "    \n",
    "    df_signal = bc_df[(bc_df[var1]>cut_i1)]\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "\n",
    "        df_signal = df_signal[df_signal[var2]>cut_i2]\n",
    "        #df_bkg = bb_df[ (bb_df[var1] > cut_i1) & (bb_df[var2] > cut_i2) ]\n",
    "        \n",
    "        nb_signal_both_cut = len(df_signal)\n",
    "        nb_bkg_cut_i1 = interpolate.splint(cut_i1, max_cut_1, spline_MVA1)\n",
    "        nb_bkg_cut_i2 = interpolate.splint(cut_i2, max_cut_2, spline_MVA2)\n",
    "\n",
    "        signal_cut_eff = nb_signal_both_cut / nb_signal_events\n",
    "        bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i1 / nb_bkg_events_2)\n",
    "\n",
    "        s = S_cut(initial_eff_incl_bkg, signal_cut_eff)\n",
    "        b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "        \n",
    "        p_tab[i2,i1] = s/(s+b)\n",
    "        \n",
    "        #print('MVA2={} i2={} MVA1={} i1={} p={}'.format(cut_i2, i2, cut_i1, i1, s/(s+b)))\n",
    "        \n",
    "        \n",
    "        \n",
    "        #df_bkg_1 = bu_df[(bu_df[var1] > cut_i1)&(bu_df[var2] > cut_i2)]\n",
    "        #cut_eff_bkg_1 = len(df_bkg_1)/nb_bkg_events1\n",
    "        #B_cut(cut_eff_bkg_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "induced-exhibit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts, bin_edges = np.histogram(bb_df[bb_df[var1]>0.95][var1],range=(0.95,1), bins=50)\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "plt.plot(bin_centres, counts)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "false-peeing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts, bin_edges = np.histogram(bb_df[bb_df[var2]>0.95][var2],range=(0.95,1), bins=50)\n",
    "bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.\n",
    "plt.plot(bin_centres, counts)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bacterial-receptor",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.99  0.991 0.992 0.993 0.994 0.995 0.996 0.997 0.998 0.999]\n",
      "[0.99  0.991 0.992 0.993 0.994 0.995 0.996 0.997 0.998 0.999]\n",
      "[[6.90126552e-08 8.49660499e-08 1.07614535e-07 1.41249690e-07\n",
      "  1.94535829e-07 2.86673851e-07 4.66903360e-07 8.95518042e-07\n",
      "  2.38572822e-06 1.95222671e-05]\n",
      " [6.28286269e-08 7.73704412e-08 9.80207161e-08 1.28684170e-07\n",
      "  1.77301428e-07 2.61381766e-07 4.25913095e-07 8.17375857e-07\n",
      "  2.17934240e-06 1.78609740e-05]\n",
      " [5.61820314e-08 6.92075782e-08 8.76906787e-08 1.15150574e-07\n",
      "  1.58694006e-07 2.34021797e-07 3.81541720e-07 7.32583081e-07\n",
      "  1.95593290e-06 1.60554589e-05]\n",
      " [4.90812311e-08 6.04734282e-08 7.66499349e-08 1.00689978e-07\n",
      "  1.38827878e-07 2.04838078e-07 3.34154607e-07 6.41952838e-07\n",
      "  1.71545935e-06 1.41052427e-05]\n",
      " [4.14710915e-08 5.11068912e-08 6.47862932e-08 8.51342253e-08\n",
      "  1.17411004e-07 1.73333436e-07 2.82841953e-07 5.43766850e-07\n",
      "  1.45419024e-06 1.19802385e-05]\n",
      " [3.34237640e-08 4.12137925e-08 5.22487084e-08 6.86572487e-08\n",
      "  9.47137813e-08 1.39880399e-07 2.28442582e-07 4.39490749e-07\n",
      "  1.17588729e-06 9.70633777e-06]\n",
      " [2.49956473e-08 3.08318920e-08 3.90845609e-08 5.13540372e-08\n",
      "  7.08456479e-08 1.04652813e-07 1.70935521e-07 3.28975627e-07\n",
      "  8.80389094e-07 7.28688113e-06]\n",
      " [1.63762609e-08 2.01947147e-08 2.56020611e-08 3.36383497e-08\n",
      "  4.64074535e-08 6.85901994e-08 1.12024229e-07 2.15683128e-07\n",
      "  5.77089901e-07 4.78416011e-06]\n",
      " [8.24083421e-09 1.01587632e-08 1.28747952e-08 1.69003652e-08\n",
      "  2.33096609e-08 3.44244315e-08 5.62004498e-08 1.08164485e-07\n",
      "  2.88766906e-07 2.38150006e-06]\n",
      " [1.98630671e-09 2.44694071e-09 3.09525622e-09 4.05329793e-09\n",
      "  5.57835703e-09 8.22327076e-09 1.33453793e-08 2.55633544e-08\n",
      "  6.80341556e-08 5.57994302e-07]]\n",
      "1.9522267056323657e-05\n"
     ]
    }
   ],
   "source": [
    "print(cut_1)\n",
    "print(cut_2)\n",
    "print(p_tab)\n",
    "print(p_tab.max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "detailed-international",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(p_tab, cmap='Greens', origin='lower', extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title(r'$B_c^+ \\rightarrow \\tau^+ \\nu_\\tau$ and inclusive $b\\bar{b}$ bkg')\n",
    "#plt.xlim(0.99,1)\n",
    "#plt.ylim(0.99,1)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "floppy-austin",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_1 = np.array(0,1,2,3)\n",
    "cut_2 = np.array(1,2,3,4)\n",
    "tab = np.zeros((len(cut_1),len(cut_2)))\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "        tab[i2,i1]=cut_i1+cut_i2\n",
    "\n",
    "print(p_tab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "increasing-breach",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.imshow(p_tab, cmap='Greens') #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title(r'$B_c^+ \\rightarrow \\tau^+ \\nu_\\tau$ and inclusive $b\\bar{b}$ bkg')\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
