{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "critical-grove",
   "metadata": {},
   "source": [
    "# Trouver la meilleure combinaison de cut MVA1 & MVA2 en utilisant les valeurs des intégrales de splines functions en logarithme"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recorded-profit",
   "metadata": {},
   "source": [
    "Les intégrales de spline functions seront uniquement utilisées pour calculer le nombre d'évenements de bkg restant (à hautes valeurs de MVA l'outil len nous indiquait 0 ce qui nous posait problème niveau calcul)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "selected-fraud",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "public-newcastle",
   "metadata": {},
   "source": [
    "### Opérations préalables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "organizational-glasgow",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "presidential-helicopter",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "formal-engineer",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "thorough-resource",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "nasty-hometown",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "\n",
    "def B_incl_cut(initial_eff_incl_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_incl_bkg*cut_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "educated-lithuania",
   "metadata": {},
   "outputs": [],
   "source": [
    "spline_MVA1_log = pickle.load(open('Spline_functions/MVA1_spline_log.pkl','rb'))\n",
    "spline_MVA2_log = pickle.load(open('Spline_functions/MVA2_spline_log.pkl','rb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alert-qatar",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "miniature-response",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "close-trace",
   "metadata": {},
   "source": [
    "### Programme permettant de calucler les valeurs de S, B et P en fonction des valeurs de MVA1 & MVA2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "checked-louis",
   "metadata": {},
   "source": [
    "##### Vérification des valeurs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "united-sending",
   "metadata": {},
   "source": [
    "cut_step = 0.00005\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.99\n",
    "max_cut_1_log = 9\n",
    "\n",
    "min_cut_1_log = -np.log(1 - min_cut_1)\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log)\n",
    "nb_bkg_events_1 = interpolate.splint(0.95, 9, spline_MVA1_log) # Valeurs extrémales def spline\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.99\n",
    "max_cut_2_log =  8\n",
    "\n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "min_cut_2_log = -np.log(1 - min_cut_2)\n",
    "nb_bkg_events_2 = interpolate.splint(0.95, 8, spline_MVA2_log) # Valeurs extrémales def spline\n",
    "\n",
    "#Parameters\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bkg = bb_df[bb_df[var2]> 0.95]  #Il faut que l'on considère le même cut de départ pour tous\n",
    "bkg = bkg[bkg[var1]> 0.95] # (pour les len ou pour les splines)\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(sig)\n",
    "nb_bkg_events = len(bkg)\n",
    "\n",
    "print('nb total ={} nb sig events = {} et nb bkg events = {}'.format(nb_total_events, nb_signal_events,nb_bkg_events))\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "print('eff sig {}'.format(initial_eff_signal))\n",
    "print('eff bkg {}'.format(initial_eff_incl_bkg))\n",
    "\n",
    "sig_bis = bc_df[bc_df[var2]> 0.99]\n",
    "sig_bis = sig_bis[sig_bis[var1]> 0.99]\n",
    "print('eff sig = {}'.format(len(sig_bis)/nb_total_events))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "appointed-discharge",
   "metadata": {},
   "source": [
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "s_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "b_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "\n",
    "cut_i1 = cut_1[0]\n",
    "cut_i2 = cut_2[0]\n",
    "print('cut_1 = {} cut_2 = {}'.format(cut_i1, cut_i2 ))\n",
    "\n",
    "cut_i1_log = -np.log(1-cut_i1)\n",
    "cut_i2_log = -np.log(1-cut_i2) #log\n",
    "\n",
    "df_signal_ = bc_df[bc_df[var1]>cut_i1]\n",
    "df_signal = df_signal_[df_signal_[var2]>cut_i2]\n",
    "\n",
    "nb_signal_both_cut = len(df_signal)\n",
    "nb_bkg_cut_i1 = interpolate.splint(cut_i1_log, max_cut_1_log, spline_MVA1_log) \n",
    "nb_bkg_cut_i2 = interpolate.splint(cut_i2_log, max_cut_2_log, spline_MVA2_log)\n",
    "print('nb bkg events MVA1 {}, nb bkg events MVA1 {}'.format(nb_bkg_events_1, nb_bkg_events_2))\n",
    "print('nb bkg events after MVA1 cut = {}, nb bkg events after MVA2 cut = {}'.format(nb_bkg_cut_i1, nb_bkg_cut_i2))\n",
    "\n",
    "\n",
    "signal_cut_eff = nb_signal_both_cut / nb_signal_events\n",
    "bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i2 / nb_bkg_events_2)\n",
    "\n",
    "print('sig_eff = {} et bkg_eff = {}'.format(signal_cut_eff, bkg_cut_eff))\n",
    "\n",
    "s = S_cut(initial_eff_incl_bkg, signal_cut_eff)\n",
    "b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "\n",
    "print('S(MVA) = {} et B(MVA) = {}'.format(s,b))\n",
    "\n",
    "print('P(MVA) = {}'.format(s/(s+b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "speaking-christianity",
   "metadata": {},
   "source": [
    "print('mva1 calcul intégrale = {}'.format(interpolate.splint(-np.log(1-0.95), 9, spline_MVA1_log)))\n",
    "print('mva1 calcul intégrale = {}'.format(interpolate.splint(-np.log(1-0.99), 9, spline_MVA1_log)))\n",
    "print('mva2 calcul intégrale = {}'.format(interpolate.splint(-np.log(1-0.95), 8, spline_MVA2_log)))\n",
    "print('mva2 calcul intégrale = {}'.format(interpolate.splint(-np.log(1-0.99), 8, spline_MVA2_log)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pleasant-colorado",
   "metadata": {},
   "source": [
    "##### Programme qui fonctionne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "hearing-sunrise",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,0)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.999065 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,1)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.99913 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,2)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9991949999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,3)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9992599999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,4)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9993249999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,5)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9993899999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,6)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9994549999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,7)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9995199999999999 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,8)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9995849999999998 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,9)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9996499999999998 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,10)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9997149999999998 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,11)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9997799999999998 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,12)\n",
      "B(MVA1,MVA2)=0 pour le cut MVA1 = 0.9998449999999998 et pour le cut MVA2 = 0.9996499999999998 ce qui correspond à la coordonées (10,13)\n"
     ]
    }
   ],
   "source": [
    "cut_step = 0.000065\n",
    "#100 valeurs donne un effet continu\n",
    "N_sig = 40000\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.999\n",
    "max_cut_1_log = 9\n",
    "\n",
    "min_cut_1_log = -np.log(1 - min_cut_1)\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log)\n",
    "nb_bkg_events_1 = interpolate.splint(0.95, 9, spline_MVA1_log) # Valeurs extrémales def spline\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.999\n",
    "max_cut_2_log = 8\n",
    "\n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "min_cut_2_log = -np.log(1 - min_cut_2)\n",
    "nb_bkg_events_2 = interpolate.splint(0.95, 8, spline_MVA2_log) # Valeurs extrémales def spline\n",
    "\n",
    "#Parameters\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bkg = bb_df[bb_df[var2]> 0.95]  #Il faut que l'on considère le même cut de départ pour tous\n",
    "bkg = bkg[bkg[var1]> 0.95] # (pour les len ou pour les splines)\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(sig)\n",
    "nb_bkg_events = len(bkg)\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "#print('eff sig {}'.format(initial_eff_signal))\n",
    "#print('eff bkg {}'.format(initial_eff_incl_bkg))\n",
    "\n",
    "#np.array()\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "s_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "b_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "   \n",
    "    cut_i1_log = -np.log(1 - cut_i1)\n",
    "    df_sig = bc_df[ bc_df[var1] > cut_i1 ]\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "        \n",
    "        cut_i2_log = -np.log(1-cut_i2) #log\n",
    "        df_signal = df_sig[df_sig[var2]>cut_i2]\n",
    "\n",
    "        nb_sig_cut_i1_i2 = len(df_signal)\n",
    "        nb_bkg_cut_i1 = interpolate.splint(cut_i1_log, max_cut_1_log, spline_MVA1_log) #log\n",
    "        nb_bkg_cut_i2 = interpolate.splint(cut_i2_log, max_cut_2_log, spline_MVA2_log) #log\n",
    "        # print('Integral value MVA1 = {}. MVA1cut = {}'.format(nb_bkg_cut_i1, cut_i1_log))\n",
    "        # print('Integral value MVA2 = {}. MVA2 cut = {}'.format(nb_bkg_cut_i2, cut_i2_log))\n",
    "        if nb_sig_cut_i1_i2\n",
    "        \n",
    "        signal_cut_eff = nb_sig_cut_i1_i2 / nb_signal_events\n",
    "        bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i2 / nb_bkg_events_2)\n",
    "\n",
    "        s = S_cut(initial_eff_signal, signal_cut_eff)\n",
    "        b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "        \n",
    "        if b==0 :\n",
    "            print('B(MVA1,MVA2)=0 pour le cut MVA1 = {} et pour le cut MVA2 = {} ce qui correspond à la coordonées ({},{})'.format(cut_i1,cut_i2,i2,i1))\n",
    "            ##### Vérification qu'il n'y a pas de valeurs de background égales à 0\n",
    "            \n",
    "        s_tab[i2,i1] = s\n",
    "        b_tab[i2,i1] = b\n",
    "        p_tab[i2,i1] = s/(s+b)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "appointed-emerald",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "announced-washington",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "academic-mineral",
   "metadata": {},
   "source": [
    "### Graphiques représentant les valeurs de S, B et P en fonctions des valeurs de MVA1 & MVA2 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "coated-feedback",
   "metadata": {},
   "source": [
    "##### Graphes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "colored-posting",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(p_tab, cmap='Greens', origin='lower', extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title('P(MVA1,MVA2)')\n",
    "plt.xlim(cut_1[0],cut_1[-1])\n",
    "plt.ylim(cut_2[0],cut_2[-1])\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "voluntary-rhythm",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(s_tab, cmap='Blues', origin='lower', extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title('S(MVA1,MVA2)')\n",
    "plt.xlim(cut_1[0],cut_1[-1])\n",
    "plt.ylim(cut_2[0],cut_2[-1])\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "waiting-topic",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(b_tab, cmap='Purples', origin='lower', extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "plt.title('B(MVA1,MVA2)')\n",
    "plt.xlim(cut_1[0],cut_1[-1])\n",
    "plt.ylim(cut_2[0],cut_2[-1])\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "quick-dublin",
   "metadata": {},
   "outputs": [],
   "source": [
    "b_tab.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "yellow-rolling",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(-np.log(1-cut_2[-1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "earlier-cause",
   "metadata": {},
   "source": [
    "##### Vérification des graphes en utilisant scatter plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecological-apple",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_step = 0.0005\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.99\n",
    "max_cut_1_log = 9\n",
    "\n",
    "min_cut_1_log = -np.log(1 - min_cut_1)\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log)\n",
    "nb_bkg_events_1 = interpolate.splint(0.95, 9, spline_MVA1_log) # Valeurs extrémales def spline\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.99\n",
    "max_cut_2_log = 8\n",
    "\n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "min_cut_2_log = -np.log(1 - min_cut_2)\n",
    "nb_bkg_events_2 = interpolate.splint(0.95, 8, spline_MVA2_log) # Valeurs extrémales def spline\n",
    "\n",
    "#Parameters\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bkg = bb_df[bb_df[var2]> 0.95]  #Il faut que l'on considère le même cut de départ pour tous\n",
    "bkg = bkg[bkg[var1]> 0.95] # (pour les len ou pour les splines)\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(sig)\n",
    "nb_bkg_events = len(bkg)\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "print('eff sig {}'.format(initial_eff_signal))\n",
    "print('eff bkg {}'.format(initial_eff_incl_bkg))\n",
    "\n",
    "#np.array()\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab=[]\n",
    "cut1_tab=[]\n",
    "cut2_tab=[]\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "   \n",
    "    cut_i1_log = -np.log(1 - cut_i1)\n",
    "    df_sig = bc_df[ bc_df[var1] > cut_i1 ]\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "        \n",
    "        cut_i2_log = -np.log(1-cut_i2) #log\n",
    "        df_signal = df_sig[df_sig[var2]>cut_i2]\n",
    "\n",
    "        nb_sig_cut_i1_i2 = len(df_signal)\n",
    "        nb_bkg_cut_i1 = interpolate.splint(cut_i1_log, max_cut_1_log, spline_MVA1_log) #log\n",
    "        nb_bkg_cut_i2 = interpolate.splint(cut_i2_log, max_cut_2_log, spline_MVA2_log) #log\n",
    "        # print('Integral value MVA1 = {}. MVA1cut = {}'.format(nb_bkg_cut_i1, cut_i1_log))\n",
    "       #  print('Integral value MVA2 = {}. MVA2 cut = {}'.format(nb_bkg_cut_i2, cut_i2_log))\n",
    "\n",
    "        signal_cut_eff = nb_sig_cut_i1_i2 / nb_signal_events\n",
    "        bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i2 / nb_bkg_events_2)\n",
    "\n",
    "        s = S_cut(initial_eff_signal, signal_cut_eff)\n",
    "        b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "        \n",
    "        cut1_tab.append(cut_i1)\n",
    "        cut2_tab.append(cut_i2)\n",
    "        p_tab.append(s/(s+b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "australian-bonus",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(cut1_tab, cut2_tab, c=p_tab)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "headed-silence",
   "metadata": {},
   "source": [
    "#### Best MVA_cut with best number of signal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "fitting-attempt",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_step = 0.00007\n",
    "#100 valeurs donne un effet continu\n",
    "\n",
    "#MVA1\n",
    "var1 = 'EVT_MVA1'\n",
    "min_cut_1 = 0.995\n",
    "max_cut_1_log = 9\n",
    "\n",
    "min_cut_1_log = -np.log(1 - min_cut_1)\n",
    "max_cut_1 = 1 - np.exp(-max_cut_1_log)\n",
    "nb_bkg_events_1 = interpolate.splint(0.95, 9, spline_MVA1_log) # Valeurs extrémales def spline\n",
    "\n",
    "#MVA2\n",
    "var2 = 'EVT_MVA2'\n",
    "min_cut_2 = 0.995\n",
    "max_cut_2_log = 8\n",
    "\n",
    "max_cut_2 = 1 - np.exp(-max_cut_2_log)\n",
    "min_cut_2_log = -np.log(1 - min_cut_2)\n",
    "nb_bkg_events_2 = interpolate.splint(0.95, 8, spline_MVA2_log) # Valeurs extrémales def spline\n",
    "\n",
    "#Parameters\n",
    "sig = bc_df[bc_df[var2]> 0.95]\n",
    "sig = sig[sig[var1]> 0.95]\n",
    "bkg = bb_df[bb_df[var2]> 0.95]  #Il faut que l'on considère le même cut de départ pour tous\n",
    "bkg = bkg[bkg[var1]> 0.95] # (pour les len ou pour les splines)\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(sig)\n",
    "nb_bkg_events = len(bkg)\n",
    "\n",
    "initial_eff_signal = nb_signal_events / nb_total_events\n",
    "initial_eff_incl_bkg = nb_bkg_events / nb_total_events\n",
    "\n",
    "#print('eff sig {}'.format(initial_eff_signal))\n",
    "#print('eff bkg {}'.format(initial_eff_incl_bkg))\n",
    "\n",
    "#np.array()\n",
    "cut_1 = np.arange(min_cut_1, max_cut_1, cut_step)\n",
    "cut_2 = np.arange(min_cut_2, max_cut_2, cut_step)\n",
    "p_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "s_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "b_tab = np.zeros((np.size(cut_2),np.size(cut_1)))\n",
    "\n",
    "#To help find a compromise between the purity and the number of signal events\n",
    "N_sig = 4000\n",
    "mva1 = []\n",
    "mva2 = []\n",
    "N_sig_list = []\n",
    "\n",
    "\n",
    "for i1, cut_i1 in enumerate(cut_1) :\n",
    "   \n",
    "    cut_i1_log = -np.log(1 - cut_i1)\n",
    "    df_sig = bc_df[ bc_df[var1] > cut_i1 ]\n",
    "    \n",
    "    for i2, cut_i2 in enumerate(cut_2) :\n",
    "        \n",
    "        cut_i2_log = -np.log(1-cut_i2) #log\n",
    "        df_signal = df_sig[df_sig[var2]>cut_i2]\n",
    "\n",
    "        nb_sig_cut_i1_i2 = len(df_signal)\n",
    "        nb_bkg_cut_i1 = interpolate.splint(cut_i1_log, max_cut_1_log, spline_MVA1_log) #log\n",
    "        nb_bkg_cut_i2 = interpolate.splint(cut_i2_log, max_cut_2_log, spline_MVA2_log) #log\n",
    "        # print('Integral value MVA1 = {}. MVA1cut = {}'.format(nb_bkg_cut_i1, cut_i1_log))\n",
    "        # print('Integral value MVA2 = {}. MVA2 cut = {}'.format(nb_bkg_cut_i2, cut_i2_log))\n",
    "        \n",
    "        signal_cut_eff = nb_sig_cut_i1_i2 / nb_signal_events\n",
    "        bkg_cut_eff = (nb_bkg_cut_i1 / nb_bkg_events_1) * (nb_bkg_cut_i2 / nb_bkg_events_2)\n",
    "\n",
    "        s = S_cut(initial_eff_signal, signal_cut_eff)\n",
    "        b = B_incl_cut(initial_eff_incl_bkg, bkg_cut_eff) \n",
    "        \n",
    "        if b==0 :\n",
    "            print('B(MVA1,MVA2)=0 pour le cut MVA1 = {} et pour le cut MVA2 = {} ce qui correspond à la coordonées ({},{})'.format(cut_i1,cut_i2,i2,i1))\n",
    "            ##### Vérification qu'il n'y a pas de valeurs de background égales à 0\n",
    "            \n",
    "        s_tab[i2,i1] = s\n",
    "        b_tab[i2,i1] = b\n",
    "        p_tab[i2,i1] = s/(s+b)\n",
    "        \n",
    "        #\n",
    "        if nb_sig_cut_i1_i2 > N_sig :\n",
    "            mva1.append(cut_i1 + cut_step/2)\n",
    "            mva2.append(cut_i2 + cut_step/2)\n",
    "            N_sig_list.append(nb_sig_cut_i1_i2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "billion-sustainability",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.999035, 0.999035, 0.999035, 0.999035, 0.999035, 0.999105, 0.999105, 0.999105, 0.999105, 0.999105, 0.999175, 0.999175, 0.999175, 0.999175, 0.999175, 0.999245, 0.999245, 0.999245, 0.999245, 0.999245, 0.9993150000000001, 0.9993150000000001, 0.9993150000000001, 0.9993150000000001, 0.9993850000000001, 0.9993850000000001, 0.9993850000000001, 0.9993850000000001, 0.9994550000000001, 0.9994550000000001, 0.9994550000000001, 0.9994550000000001, 0.9995250000000001, 0.9995250000000001, 0.9995250000000001, 0.9995250000000001, 0.9995950000000001, 0.9995950000000001, 0.9995950000000001, 0.9995950000000001, 0.9996650000000001, 0.9996650000000001, 0.9996650000000001, 0.9997350000000002, 0.9997350000000002, 0.9997350000000002, 0.9998050000000002, 0.9998050000000002]\n",
      "[0.999035, 0.999105, 0.999175, 0.999245, 0.9993150000000001, 0.999035, 0.999105, 0.999175, 0.999245, 0.9993150000000001, 0.999035, 0.999105, 0.999175, 0.999245, 0.9993150000000001, 0.999035, 0.999105, 0.999175, 0.999245, 0.9993150000000001, 0.999035, 0.999105, 0.999175, 0.999245, 0.999035, 0.999105, 0.999175, 0.999245, 0.999035, 0.999105, 0.999175, 0.999245, 0.999035, 0.999105, 0.999175, 0.999245, 0.999035, 0.999105, 0.999175, 0.999245, 0.999035, 0.999105, 0.999175, 0.999035, 0.999105, 0.999175, 0.999035, 0.999105]\n"
     ]
    }
   ],
   "source": [
    "print(mva1)\n",
    "print(mva2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "sonic-paste",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "\n",
    "nb_sig = plt.scatter(mva1, mva2, c=N_sig_list, cmap='plasma_r', s=15, label='nb sig events $>$ {}'.format(N_sig))\n",
    "cb_nb_sig = plt.colorbar(nb_sig)\n",
    "cb_nb_sig.set_label('Number of signal events $>$ {}'.format(N_sig))\n",
    "\n",
    "purity = plt.imshow(p_tab, cmap='Greens', origin='lower', extent=(cut_1[0], cut_1[-1], cut_2[0], cut_2[-1])) #(vmin=0, vmax=0.01)\n",
    "cb_purity = plt.colorbar(purity)\n",
    "cb_purity.set_label('P(MVA1,MVA2)')\n",
    "\n",
    "plt.xlim(cut_1[0],cut_1[-1])\n",
    "plt.ylim(cut_2[0],cut_2[-1])\n",
    "plt.xlabel('Value of the MVA1 cut')\n",
    "plt.ylabel('Value of the MVA2 cut')\n",
    "#plt.title('P(MVA1,MVA2)')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "focal-warning",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
