{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "packed-winner",
   "metadata": {},
   "source": [
    "# Déterminer le cut le plus efficient sur les valeurs de MVA2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "micro-attack",
   "metadata": {},
   "source": [
    "On est interessés par MVA2 car l'histogramme de B+ pour ce paramètre différait pas mal de celui de Bc+"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "honest-bottle",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "prospective-maintenance",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "Bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "critical-unemployment",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_df = Bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "Bu_df = Bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "pursuant-franklin",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "conscious-watershed",
   "metadata": {},
   "source": [
    "#### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "absolute-pledge",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre de Z0 produits\n",
    "N_Z0 = 5*10**(12)\n",
    "\n",
    "#Brancing fraction Z -> b bbar\n",
    "BF_Zbb = 0.1512\n",
    "\n",
    "#Production rate of Bc+ and B+ mesons\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "\n",
    "#Branching fraction Bc+ -> tau+ nu , B+ -> tau+ nu and tau -> 3pions\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "social-interview",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre total d'évènements (ie de collision e+e-)\n",
    "N_gen = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "\n",
    "#Nombre total d'évènements dans l'arbre\n",
    "N_evn = len(Bc_df['EVT_MVA1'])\n",
    "\n",
    "#Initial efficiency\n",
    "initial_eff = N_evn/N_gen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "consistent-monroe",
   "metadata": {},
   "source": [
    "## Youhou"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "attractive-connection",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff*mva_eff\n",
    "def B_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff*mva_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "after-platinum",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "cut = 0.7\n",
    "df_bc = Bc_df[Bc_df['EVT_MVA2']> cut]\n",
    "print(Bc_df['EVT_MVA2'].max())\n",
    "print(Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "related-politics",
   "metadata": {},
   "outputs": [],
   "source": [
    "max(Bc_df['EVT_MVA2'].max(),Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "descending-saver",
   "metadata": {},
   "source": [
    "##### P(MVA) de 0.6 à 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "executive-privilege",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.6900000000000001, 0.7000000000000001, 0.7100000000000001, 0.7200000000000001, 0.7300000000000001, 0.7400000000000001, 0.7500000000000001, 0.7600000000000001, 0.7700000000000001, 0.7800000000000001, 0.7900000000000001, 0.8000000000000002, 0.8100000000000002, 0.8200000000000002, 0.8300000000000002, 0.8400000000000002, 0.8500000000000002, 0.8600000000000002, 0.8700000000000002, 0.8800000000000002, 0.8900000000000002, 0.9000000000000002, 0.9100000000000003, 0.9200000000000003, 0.9300000000000003, 0.9400000000000003, 0.9500000000000003, 0.9600000000000003, 0.9700000000000003, 0.9800000000000003, 0.9900000000000003]\n",
      "[0.2154758080115056, 0.2169152205907947, 0.21838930145930346, 0.21993082551680532, 0.22151573761891594, 0.22311619461585194, 0.22479802058705708, 0.2265501821040836, 0.2283478145777627, 0.23022897205274553, 0.23216620288918055, 0.23419452829512083, 0.23629696366102645, 0.23851918420112103, 0.24081156507569748, 0.24324946592384214, 0.24581603562970444, 0.2485582849489587, 0.25139028622040405, 0.254392112039598, 0.25761620552070236, 0.26104926262454364, 0.26475853177660874, 0.26879971606129466, 0.27314790160360963, 0.2778114110065969, 0.28301743834483517, 0.2887177796727469, 0.29501541370020745, 0.30208515549807946, 0.31009269206510987, 0.3193190833011861, 0.3299667145283145, 0.34263702961951453, 0.35799363692837977, 0.37738711911194367, 0.40260957445788464, 0.43791750363650916, 0.4924115181214034, 0.5945881074479379]\n"
     ]
    }
   ],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut)\n",
    "print(l_p)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stupid-madonna",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.01 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "turned-removal",
   "metadata": {},
   "outputs": [],
   "source": [
    "##### P(MVA) de 0.9 à 1 avec un pas de 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exceptional-bargain",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.001\n",
    "mva_cut = 0.95\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.001 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "creative-ballot",
   "metadata": {},
   "source": [
    "#### Cut for MVA1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "certified-apparatus",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.6900000000000001, 0.7000000000000001, 0.7100000000000001, 0.7200000000000001, 0.7300000000000001, 0.7400000000000001, 0.7500000000000001, 0.7600000000000001, 0.7700000000000001, 0.7800000000000001, 0.7900000000000001, 0.8000000000000002, 0.8100000000000002, 0.8200000000000002, 0.8300000000000002, 0.8400000000000002, 0.8500000000000002, 0.8600000000000002, 0.8700000000000002, 0.8800000000000002, 0.8900000000000002, 0.9000000000000002, 0.9100000000000003, 0.9200000000000003, 0.9300000000000003, 0.9400000000000003, 0.9500000000000003, 0.9600000000000003, 0.9700000000000003, 0.9800000000000003, 0.9900000000000003]\n",
      "[0.2154758080115056, 0.2158600374525342, 0.21626159650832896, 0.21669487827900177, 0.21715160652532425, 0.21761146502180786, 0.21810934997957004, 0.21861787026262564, 0.2191580057748682, 0.21972512899326166, 0.2203464573195695, 0.22096790506896719, 0.22161804258870138, 0.22231532298464718, 0.22305074916300738, 0.22382780504549882, 0.2246559247328424, 0.22552620672582854, 0.22646810171465534, 0.22747568896148035, 0.2285819268702514, 0.22977097424219753, 0.23101681799451756, 0.23239195997250284, 0.23389803002240847, 0.23550527902240073, 0.23730004160141271, 0.23926965803675573, 0.24148940752291886, 0.24398308738084762, 0.24681887067034386, 0.2500156676318429, 0.253792732291671, 0.25833746125774265, 0.2638181624773751, 0.27065862311482664, 0.27974527234135876, 0.29238458697639186, 0.312322208792901, 0.35285335562881665]\n"
     ]
    }
   ],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "l_cut1 = []\n",
    "l_p1 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut1.append(mva_cut)\n",
    "    l_p1.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut1)\n",
    "print(l_p1)\n",
    "\n",
    "#plt.figure()\n",
    "#plt.plot(l_cut1, l_p1, color='#3182bd')\n",
    "#plt.xlabel('Value of the MVA1 cut (0.01 step)')\n",
    "#plt.ylabel('P(MVA1)')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "overall-series",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max_1 = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "mva_max_2 = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "mva_max = max(mva_max_1, mva_max_2)\n",
    "\n",
    "l_cut_all = []\n",
    "l_p_1 = []\n",
    "l_p_2 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc_1 = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu_1 = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    df_bc_2 = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu_2 = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc_1 = len(df_bc_1)/N_evn\n",
    "    mva_eff_bu_1 = len(df_bu_1)/N_evn\n",
    "    \n",
    "    mva_eff_bc_2 = len(df_bc_2)/N_evn\n",
    "    mva_eff_bu_2 = len(df_bu_2)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s_1 = S_MVA(mva_eff_bc_1)\n",
    "    b_1 = B_MVA(mva_eff_bu_1)\n",
    "    p_1 = s_1/(s_1+b_1)\n",
    "    \n",
    "    s_2 = S_MVA(mva_eff_bc_2)\n",
    "    b_2 = B_MVA(mva_eff_bu_2)\n",
    "    p_2 = s_2/(s_2+b_2)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut_all.append(mva_cut)\n",
    "    l_p_1.append(p_1)\n",
    "    l_p_2.append(p_2)\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "special-battlefield",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd', label='P(MVA2)')\n",
    "plt.plot(l_cut1, l_p1, color=\"#2ca25f\", label='P(MVA1)')\n",
    "plt.xlabel('Value of the MVA cut (0.01 step)')\n",
    "plt.ylabel('P(MVA)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "descending-bermuda",
   "metadata": {},
   "source": [
    "### Cut sur la distance PV et 3pions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "resident-litigation",
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = \"EVT_CandVtxFD\"\n",
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df[variable].max(), Bu_df[variable].max())\n",
    "l_cut1 = []\n",
    "l_p1 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut1.append(mva_cut)\n",
    "    l_p1.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut1)\n",
    "print(l_p1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
