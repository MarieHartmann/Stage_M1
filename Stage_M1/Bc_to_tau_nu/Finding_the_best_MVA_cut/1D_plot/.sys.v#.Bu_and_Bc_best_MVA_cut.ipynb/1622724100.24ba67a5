{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "russian-emission",
   "metadata": {},
   "source": [
    "# Déterminer le cut le plus efficient sur les valeurs de MVA2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "canadian-translation",
   "metadata": {},
   "source": [
    "On est interessés par MVA2 car l'histogramme de B+ pour ce paramètre différait pas mal de celui de Bc+"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "opponent-kentucky",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "generic-rally",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "Bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cardiovascular-schema",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_df = Bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "Bu_df = Bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "diverse-variable",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "crude-strategy",
   "metadata": {},
   "source": [
    "#### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "false-armenia",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre de Z0 produits\n",
    "N_Z0 = 5*10**(12)\n",
    "\n",
    "#Brancing fraction Z -> b bbar\n",
    "BF_Zbb = 0.1512\n",
    "\n",
    "#Production rate of Bc+ and B+ mesons\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "\n",
    "#Branching fraction Bc+ -> tau+ nu , B+ -> tau+ nu and tau -> 3pions\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ethical-russian",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre total d'évènements (ie de collision e+e-)\n",
    "N_gen = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "\n",
    "#Nombre total d'évènements dans l'arbre\n",
    "N_evn = len(Bc_df['EVT_MVA1'])\n",
    "\n",
    "#Initial efficiency\n",
    "initial_eff = N_evn/N_gen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "raising-collect",
   "metadata": {},
   "source": [
    "## Youhou"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "impossible-yield",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff*mva_eff\n",
    "def B_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff*mva_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "crucial-entertainment",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "cut = 0.7\n",
    "df_bc = Bc_df[Bc_df['EVT_MVA2']> cut]\n",
    "print(Bc_df['EVT_MVA2'].max())\n",
    "print(Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "favorite-sewing",
   "metadata": {},
   "outputs": [],
   "source": [
    "max(Bc_df['EVT_MVA2'].max(),Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "twelve-maine",
   "metadata": {},
   "source": [
    "##### P(MVA) de 0.6 à 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dying-gregory",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut)\n",
    "print(l_p)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "authorized-study",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.01 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "unavailable-bulgaria",
   "metadata": {},
   "outputs": [],
   "source": [
    "##### P(MVA) de 0.9 à 1 avec un pas de 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "guided-quilt",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pas_cut = 0.00005\n",
    "mva_cut = 0.995\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.0005 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "infrared-mandate",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Text' object has no property 's'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-3109df90c107>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_cut\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ml_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#3182bd'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Value of the MVA2 cut (0.0005 step)'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'P(MVA2)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mxlabel\u001b[0;34m(xlabel, fontdict, labelpad, loc, **kwargs)\u001b[0m\n\u001b[1;32m   3113\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0m_copy_docstring_and_deprecators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3114\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontdict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabelpad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3115\u001b[0;31m     return gca().set_xlabel(\n\u001b[0m\u001b[1;32m   3116\u001b[0m         \u001b[0mxlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontdict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfontdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabelpad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabelpad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3117\u001b[0m         **kwargs)\n",
      "\u001b[0;32m/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mset_xlabel\u001b[0;34m(self, xlabel, fontdict, labelpad, loc, **kwargs)\u001b[0m\n\u001b[1;32m    245\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'right'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhorizontalalignment\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'right'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 247\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_label_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mset_label_text\u001b[0;34m(self, label, fontdict, **kwargs)\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfontdict\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1565\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfontdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1566\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1567\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1568\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, kwargs)\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0;31m# Update bbox last, as it depends on font properties.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m         \u001b[0mbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentinel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 179\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    180\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbbox\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msentinel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_bbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m    994\u001b[0m                     \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"set_{k}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    995\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 996\u001b[0;31m                         raise AttributeError(f\"{type(self).__name__!r} object \"\n\u001b[0m\u001b[1;32m    997\u001b[0m                                              f\"has no property {k!r}\")\n\u001b[1;32m    998\u001b[0m                     \u001b[0mret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'Text' object has no property 's'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.scatter(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.0005 step)',s=0.5)\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "spatial-toilet",
   "metadata": {},
   "source": [
    "#### Cut for MVA1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "nominated-story",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "l_cut1 = []\n",
    "l_p1 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut1.append(mva_cut)\n",
    "    l_p1.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut1)\n",
    "print(l_p1)\n",
    "\n",
    "#plt.figure()\n",
    "#plt.plot(l_cut1, l_p1, color='#3182bd')\n",
    "#plt.xlabel('Value of the MVA1 cut (0.01 step)')\n",
    "#plt.ylabel('P(MVA1)')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "solved-albert",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max_1 = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "mva_max_2 = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "mva_max = max(mva_max_1, mva_max_2)\n",
    "\n",
    "l_cut_all = []\n",
    "l_p_1 = []\n",
    "l_p_2 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc_1 = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu_1 = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    df_bc_2 = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu_2 = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc_1 = len(df_bc_1)/N_evn\n",
    "    mva_eff_bu_1 = len(df_bu_1)/N_evn\n",
    "    \n",
    "    mva_eff_bc_2 = len(df_bc_2)/N_evn\n",
    "    mva_eff_bu_2 = len(df_bu_2)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s_1 = S_MVA(mva_eff_bc_1)\n",
    "    b_1 = B_MVA(mva_eff_bu_1)\n",
    "    p_1 = s_1/(s_1+b_1)\n",
    "    \n",
    "    s_2 = S_MVA(mva_eff_bc_2)\n",
    "    b_2 = B_MVA(mva_eff_bu_2)\n",
    "    p_2 = s_2/(s_2+b_2)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut_all.append(mva_cut)\n",
    "    l_p_1.append(p_1)\n",
    "    l_p_2.append(p_2)\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "amber-disabled",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd', label='P(MVA2)')\n",
    "plt.plot(l_cut1, l_p1, color=\"#2ca25f\", label='P(MVA1)')\n",
    "plt.xlabel('Value of the MVA cut (0.01 step)')\n",
    "plt.ylabel('P(MVA)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "generous-spare",
   "metadata": {},
   "source": [
    "### Cut sur la distance PV et 3pions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "talented-dynamics",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Variables à définir\n",
    "variable = \"EVT_CandVtxFD\"\n",
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "\n",
    "#Initialisation automatique\n",
    "mva_max = max(Bc_df[variable].max(), Bu_df[variable].max())\n",
    "l_cut_Vt = []\n",
    "l_p_Vt = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df[variable]> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df[variable]> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut_Vt.append(mva_cut)\n",
    "    l_p_Vt.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut_Vt)\n",
    "print(l_p_Vt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "marine-christianity",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
