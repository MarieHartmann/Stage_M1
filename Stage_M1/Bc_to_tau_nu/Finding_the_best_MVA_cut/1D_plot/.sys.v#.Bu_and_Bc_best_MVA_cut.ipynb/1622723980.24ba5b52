{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "hybrid-philosophy",
   "metadata": {},
   "source": [
    "# Déterminer le cut le plus efficient sur les valeurs de MVA2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "indoor-drunk",
   "metadata": {},
   "source": [
    "On est interessés par MVA2 car l'histogramme de B+ pour ce paramètre différait pas mal de celui de Bc+"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "premier-relaxation",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "noticed-reggae",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "Bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "nominated-plant",
   "metadata": {},
   "outputs": [],
   "source": [
    "Bc_df = Bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "Bu_df = Bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fantastic-auction",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "velvet-founder",
   "metadata": {},
   "source": [
    "#### Paramètres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "greatest-profile",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre de Z0 produits\n",
    "N_Z0 = 5*10**(12)\n",
    "\n",
    "#Brancing fraction Z -> b bbar\n",
    "BF_Zbb = 0.1512\n",
    "\n",
    "#Production rate of Bc+ and B+ mesons\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "\n",
    "#Branching fraction Bc+ -> tau+ nu , B+ -> tau+ nu and tau -> 3pions\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "continent-composite",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nombre total d'évènements (ie de collision e+e-)\n",
    "N_gen = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "\n",
    "#Nombre total d'évènements dans l'arbre\n",
    "N_evn = len(Bc_df['EVT_MVA1'])\n",
    "\n",
    "#Initial efficiency\n",
    "initial_eff = N_evn/N_gen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "catholic-mouth",
   "metadata": {},
   "source": [
    "## Youhou"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "mature-insert",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff*mva_eff\n",
    "def B_MVA(mva_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff*mva_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dense-locator",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "cut = 0.7\n",
    "df_bc = Bc_df[Bc_df['EVT_MVA2']> cut]\n",
    "print(Bc_df['EVT_MVA2'].max())\n",
    "print(Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "saved-spouse",
   "metadata": {},
   "outputs": [],
   "source": [
    "max(Bc_df['EVT_MVA2'].max(),Bu_df['EVT_MVA2'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "inappropriate-combine",
   "metadata": {},
   "source": [
    "##### P(MVA) de 0.6 à 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "every-grade",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut)\n",
    "print(l_p)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "greenhouse-memorabilia",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.01 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "affected-pearl",
   "metadata": {},
   "outputs": [],
   "source": [
    "##### P(MVA) de 0.9 à 1 avec un pas de 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "average-white",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pas_cut = 0.0005\n",
    "mva_cut = 0.99\n",
    "mva_max = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut.append(mva_cut)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd')\n",
    "plt.xlabel('Value of the MVA2 cut (0.0005 step)')\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recent-proposal",
   "metadata": {},
   "source": [
    "#### Cut for MVA1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "favorite-manhattan",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "l_cut1 = []\n",
    "l_p1 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut1.append(mva_cut)\n",
    "    l_p1.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut1)\n",
    "print(l_p1)\n",
    "\n",
    "#plt.figure()\n",
    "#plt.plot(l_cut1, l_p1, color='#3182bd')\n",
    "#plt.xlabel('Value of the MVA1 cut (0.01 step)')\n",
    "#plt.ylabel('P(MVA1)')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "unlimited-catholic",
   "metadata": {},
   "outputs": [],
   "source": [
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "mva_max_1 = max(Bc_df['EVT_MVA1'].max(), Bu_df['EVT_MVA1'].max())\n",
    "mva_max_2 = max(Bc_df['EVT_MVA2'].max(), Bu_df['EVT_MVA2'].max())\n",
    "mva_max = max(mva_max_1, mva_max_2)\n",
    "\n",
    "l_cut_all = []\n",
    "l_p_1 = []\n",
    "l_p_2 = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc_1 = Bc_df[Bc_df['EVT_MVA1']> mva_cut]\n",
    "    df_bu_1 = Bu_df[Bu_df['EVT_MVA1']> mva_cut]\n",
    "    \n",
    "    df_bc_2 = Bc_df[Bc_df['EVT_MVA2']> mva_cut]\n",
    "    df_bu_2 = Bu_df[Bu_df['EVT_MVA2']> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc_1 = len(df_bc_1)/N_evn\n",
    "    mva_eff_bu_1 = len(df_bu_1)/N_evn\n",
    "    \n",
    "    mva_eff_bc_2 = len(df_bc_2)/N_evn\n",
    "    mva_eff_bu_2 = len(df_bu_2)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s_1 = S_MVA(mva_eff_bc_1)\n",
    "    b_1 = B_MVA(mva_eff_bu_1)\n",
    "    p_1 = s_1/(s_1+b_1)\n",
    "    \n",
    "    s_2 = S_MVA(mva_eff_bc_2)\n",
    "    b_2 = B_MVA(mva_eff_bu_2)\n",
    "    p_2 = s_2/(s_2+b_2)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut_all.append(mva_cut)\n",
    "    l_p_1.append(p_1)\n",
    "    l_p_2.append(p_2)\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "elegant-soldier",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(l_cut, l_p, color='#3182bd', label='P(MVA2)')\n",
    "plt.plot(l_cut1, l_p1, color=\"#2ca25f\", label='P(MVA1)')\n",
    "plt.xlabel('Value of the MVA cut (0.01 step)')\n",
    "plt.ylabel('P(MVA)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alpha-vacuum",
   "metadata": {},
   "source": [
    "### Cut sur la distance PV et 3pions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "virgin-insulation",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Variables à définir\n",
    "variable = \"EVT_CandVtxFD\"\n",
    "pas_cut = 0.01\n",
    "mva_cut = 0.6\n",
    "\n",
    "#Initialisation automatique\n",
    "mva_max = max(Bc_df[variable].max(), Bu_df[variable].max())\n",
    "l_cut_Vt = []\n",
    "l_p_Vt = []\n",
    "\n",
    "while (mva_cut < mva_max) :\n",
    "\n",
    "    #apply the cut \n",
    "    df_bc = Bc_df[Bc_df[variable]> mva_cut]\n",
    "    df_bu = Bu_df[Bu_df[variable]> mva_cut]\n",
    "    \n",
    "    #compute the cut efficiency\n",
    "    mva_eff_bc = len(df_bc)/N_evn\n",
    "    mva_eff_bu = len(df_bu)/N_evn\n",
    "    #print('efficiency')\n",
    "    #print(mva_eff_bc)\n",
    "    #print(mva_eff_bu)\n",
    "    \n",
    "    #compute the S and B values\n",
    "    s = S_MVA(mva_eff_bc)\n",
    "    b = B_MVA(mva_eff_bu)\n",
    "    p = s/(s+b)\n",
    "    #print('signal and background')\n",
    "    #print(s)\n",
    "    #print(b)\n",
    "    #print(' ')\n",
    "    \n",
    "    #store them in a list with the cut value\n",
    "    l_cut_Vt.append(mva_cut)\n",
    "    l_p_Vt.append(s/(s+b))\n",
    "    \n",
    "    #set the next mva cut value\n",
    "    mva_cut += pas_cut\n",
    "      \n",
    "\n",
    "print(l_cut_Vt)\n",
    "print(l_p_Vt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "junior-bacteria",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
