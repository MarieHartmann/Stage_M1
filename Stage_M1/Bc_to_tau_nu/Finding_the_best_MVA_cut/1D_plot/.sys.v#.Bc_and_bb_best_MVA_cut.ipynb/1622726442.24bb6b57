{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "republican-rally",
   "metadata": {},
   "source": [
    "# Recherche du meilleur cut sur les valeurs de MVA avec $Z^0 \\rightarrow b\\bar{b}$ comme background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "assured-anxiety",
   "metadata": {},
   "source": [
    "#### Chargement des données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "controversial-ghana",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "p8_ee_Zbb_ecm91_EvtGen.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "corresponding-covering",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "worst-logic",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "monthly-europe",
   "metadata": {},
   "source": [
    "#### Initialisation des variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "demographic-mozambique",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "f_Bc = 0.0004\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "together-wisdom",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_nb_gen = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_signal_events = len(bc_df['EVT_MVA1'])\n",
    "nb_bkg_events = len(bb_df['EVT_MVA1'])\n",
    "\n",
    "initial_eff_signal = nb_signal_events/total_nb_gen\n",
    "initial_eff_bkg = nb_bkg_events/total_nb_gen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "micro-writing",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4594148\n",
      "186757\n"
     ]
    }
   ],
   "source": [
    "print(len(bc_df['EVT_MVA1']))\n",
    "print(len(bb_df['EVT_MVA1']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "hundred-individual",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_cut(cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "def B_incl_cut(cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_bkg*cut_eff"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "roman-variation",
   "metadata": {},
   "source": [
    "#### Analyse des données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "authentic-rubber",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "expression cannot contain assignment, perhaps you meant \"==\"? (<ipython-input-15-d4fd4c390ba0>, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-15-d4fd4c390ba0>\"\u001b[0;36m, line \u001b[0;32m10\u001b[0m\n\u001b[0;31m    print('Il y a au total {} points'.format(round((max_cut_value-cut_value)/cut_step = 0.0005)))\u001b[0m\n\u001b[0m                                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m expression cannot contain assignment, perhaps you meant \"==\"?\n"
     ]
    }
   ],
   "source": [
    "cut_step = 0.0005\n",
    "cut_value = 0.9\n",
    "var = 'EVT_MVA2'\n",
    "\n",
    "max_cut_value = max(bc_df[var].max(), bb_df[var].max())\n",
    "l_cut = []\n",
    "l_p = []\n",
    "\n",
    "\n",
    "print('Il y a au total {} points'.format(round((max_cut_value-cut_value)/cut_step)))\n",
    "\n",
    "while (cut_value < max_cut_value) :\n",
    "\n",
    "    df_signal = bc_df[bc_df[var]> cut_value]\n",
    "    df_bkg = bb_df[bb_df[var]> cut_value]\n",
    "\n",
    "    cut_eff_signal = len(df_signal)/nb_signal_events\n",
    "    cut_eff_bkg = len(df_bkg)/nb_bkg_events\n",
    "\n",
    "    s = S_cut(cut_eff_signal)\n",
    "    b = B_incl_cut(cut_eff_bkg)\n",
    "\n",
    "    l_cut.append(cut_value)\n",
    "    l_p.append(s/(s+b))\n",
    "    \n",
    "    cut_value += cut_step\n",
    "\n",
    "plt.figure()\n",
    "plt.scatter(l_cut, l_p, color='#3182bd', s=1)\n",
    "plt.xlabel('Value of the MVA2 cut ({}step)'.format(cut_step))\n",
    "plt.ylabel('P(MVA2)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "anticipated-scientist",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
