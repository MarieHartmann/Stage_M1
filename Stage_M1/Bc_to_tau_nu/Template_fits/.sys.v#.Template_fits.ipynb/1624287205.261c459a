{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "anonymous-mixture",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/releases/Python/3.8.6-3199b/x86_64-centos7-gcc8-opt/lib/python3.8/_collections_abc.py:832: MatplotlibDeprecationWarning: Support for setting the 'text.latex.preamble' or 'pgf.preamble' rcParam to a list of strings is deprecated since 3.3 and will be removed two minor releases later; set it to a single string instead.\n",
      "  self[key] = other[key]\n"
     ]
    }
   ],
   "source": [
    "import pandas\n",
    "import uproot\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.interpolate as interpolate\n",
    "import pickle\n",
    "\n",
    "from matplotlib import rc\n",
    "rc('font',**{'family':'serif','serif':['Roman']})\n",
    "rc('text', usetex=True)\n",
    "params= {'text.latex.preamble' : [r'\\usepackage{amsmath}']}\n",
    "plt.rcParams.update(params)\n",
    "plt.rcParams['text.latex.preamble'] = r\"\\usepackage{bm} \\usepackage{amsmath}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "synthetic-designation",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root')['events']\n",
    "bb_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen.root')['events']\n",
    "bu_tree = uproot.open('/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bu2TauNuTAUHADNU.root')['events']\n",
    "tree_gen = uproot.open(\"/eos/experiment/fcc/ee/analyses/case-studies/flavour/Bc2TauNu/flatNtuples/spring2021/prod_04/Analysis_stage2/p8_ee_Zbb_ecm91_EvtGen_Bc2TauNuTAUHADNU.root\")[\"metadata\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "sexual-alloy",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_df = bc_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bu_df = bu_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "bb_df = bb_tree.arrays(library=\"pd\", how=\"zip\", filter_name=[\"EVT_*\"])\n",
    "df_gen = tree_gen.arrays(library=\"pd\", how=\"zip\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "tender-render",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_Z0 = 5*10**(12)\n",
    "BF_Zbb = 0.1512\n",
    "f_Bc = 0.0004\n",
    "f_Bu = 0.43\n",
    "BF_Bctaunu = 0.0194\n",
    "BF_Butaunu = 1.09*10**(-4)\n",
    "BF_tau3pion = 0.0931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "saved-diameter",
   "metadata": {},
   "outputs": [],
   "source": [
    "spline_MVA1_log = pickle.load(open('../Finding_the_best_MVA_cut/2D_plot/Spline_functions/MVA1_spline_log.pkl','rb'))\n",
    "spline_MVA2_log = pickle.load(open('../Finding_the_best_MVA_cut/2D_plot/Spline_functions/MVA2_spline_log.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "restricted-defeat",
   "metadata": {},
   "outputs": [],
   "source": [
    "def S_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bc*BF_Bctaunu*BF_tau3pion*initial_eff_signal*cut_eff\n",
    "\n",
    "def B_incl_cut(initial_eff_incl_bkg, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*initial_eff_incl_bkg*cut_eff\n",
    "\n",
    "def B_cut(initial_eff_signal, cut_eff) :\n",
    "    return N_Z0*BF_Zbb*2*f_Bu*BF_Butaunu*BF_tau3pion*initial_eff_signal*cut_eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "knowing-engineering",
   "metadata": {},
   "outputs": [],
   "source": [
    "var1 = 'EVT_MVA1'\n",
    "var2 = 'EVT_MVA2'\n",
    "\n",
    "MVA1_cut_log = -np.log(1-0.95)\n",
    "MVA2_cut_log = -np.log(1-0.95)\n",
    "max_cut_1_log = 9\n",
    "max_cut_2_log = 8\n",
    "\n",
    "bc_init = bc_df[bc_df[var2]> 0.95]\n",
    "bc_init = bc_init[bc_init[var1]> 0.95]\n",
    "bu_init = bu_df[bu_df[var2]> 0.95]\n",
    "bu_init = bu_init[bu_init[var1]> 0.95]\n",
    "bb_init = bb_df[bb_df[var2]> 0.95]\n",
    "bb_init = bb_init[bb_init[var1]> 0.95]\n",
    "\n",
    "nb_total_events = df_gen.iloc[0][\"eventsProcessed\"]\n",
    "nb_bc_init = len(bc_init)\n",
    "nb_bu_init = len(bu_init)\n",
    "nb_bb_init = len(bb_init)\n",
    "nb_bb1_init = interpolate.splint(MVA1_cut_log, max_cut_1_log, spline_MVA1_log)\n",
    "nb_bb2_init = interpolate.splint(MVA2_cut_log, max_cut_2_log, spline_MVA2_log)\n",
    "\n",
    "initial_eff_bc = nb_bc_init / nb_total_events\n",
    "initial_eff_bu = nb_bu_init / nb_total_events\n",
    "initial_eff_bb = nb_bb_init / nb_total_events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "communist-keyboard",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_MVA1_cut = 0.99986\n",
    "best_MVA2_cut = 0.99634\n",
    "\n",
    "best_MVA1_cut_log = -np.log(1-best_MVA1_cut)\n",
    "best_MVA2_cut_log = -np.log(1-best_MVA2_cut)\n",
    "max_cut_1_log = 9\n",
    "max_cut_2_log = 8\n",
    "\n",
    "bu_cut = bu_df[bu_df['EVT_MVA1'] > best_MVA1_cut]\n",
    "bu_cut = bu_cut[bu_cut['EVT_MVA2'] > best_MVA2_cut]\n",
    "bc_cut = bc_df[bc_df['EVT_MVA1'] > best_MVA1_cut]\n",
    "bc_cut = bc_cut[bc_cut['EVT_MVA2'] > best_MVA2_cut]\n",
    "bb_cut = bb_df[bb_df['EVT_MVA1'] > best_MVA1_cut]\n",
    "bb_cut = bb_cut[bb_cut['EVT_MVA2'] > best_MVA2_cut]\n",
    "\n",
    "nb_bc_cut = len(bc_cut)\n",
    "nb_bu_cut = len(bu_cut)\n",
    "nb_bb_cut_i1 = interpolate.splint(best_MVA1_cut_log, max_cut_1_log, spline_MVA1_log)\n",
    "nb_bb_cut_i2 = interpolate.splint(best_MVA2_cut_log, max_cut_2_log, spline_MVA2_log)\n",
    "\n",
    "eff_bc = nb_bc_cut/nb_bc_init \n",
    "eff_bu = nb_bu_cut/nb_bu_init \n",
    "eff_bb = (nb_bb_cut_i1/nb_bb1_init) * (nb_bb_cut_i2/nb_bb2_init)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "superb-interaction",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_BC = S_cut(initial_eff_bc, eff_bc)\n",
    "N_BU = B_cut(initial_eff_bu, eff_bu)\n",
    "N_BB = B_incl_cut(initial_eff_bb, eff_bb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "threaded-melissa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4009.2649482816005\n",
      "241.47796710240002\n",
      "3615.187009498297\n"
     ]
    }
   ],
   "source": [
    "print(N_BC)\n",
    "print(N_BU)\n",
    "print(N_BB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "subject-grenada",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "variable = 'EVT_ThrustEmax_E'\n",
    "\n",
    "nb_bins = 50\n",
    "min_bin = 20\n",
    "max_bin = 52\n",
    "\n",
    "name_bc = r\"$B_c^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bu = r\"$B^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bb = r\"Inclusive background $Z^0 \\rightarrow b\\bar{b}$\"\n",
    "\n",
    "counts_bc, bins_bc = np.histogram(bc_init[variable], bins = nb_bins, range = (min_bin, max_bin))\n",
    "counts_bu, bins_bu = np.histogram(bu_init[variable], bins = nb_bins, range = (min_bin, max_bin))\n",
    "counts_bb, bins_bb = np.histogram(bb_init[variable], bins = nb_bins, range = (min_bin, max_bin))\n",
    "\n",
    "counts_bc = (counts_bc/np.sum(counts_bc)) * N_BC\n",
    "counts_bu = (counts_bu/np.sum(counts_bu)) * N_BU\n",
    "counts_bb = (counts_bb/np.sum(counts_bb)) * N_BB\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bins_bc[:-1], bins_bc, weights=counts_bc, histtype='step', color= \"#1c9099\", label=name_bc)\n",
    "plt.hist(bins_bu[:-1], bins_bu, weights=counts_bu, histtype='step', color= \"#a6bddb\", label=name_bu)\n",
    "plt.hist(bins_bb[:-1], bins_bb, weights=counts_bb, histtype='step', color= \"#756bb1\", label=name_bb)\n",
    "plt.legend()\n",
    "plt.xlim(min_bin,max_bin)\n",
    "plt.xlabel(\"Hemisphere maximum energy [GeV]\")\n",
    "plt.ylabel(\"Number of events / {} GeV\".format(round((max_bin-min_bin)/nb_bins,3)))\n",
    "plt.show()\n",
    "\n",
    "x = [bins_bc[:-1], bins_bu[:-1], bins_bb[:-1]]\n",
    "bins = bins_bc\n",
    "weights = [counts_bb, counts_bu, counts_bc]\n",
    "colour = [\"#756bb1\",\"#a6bddb\",\"#1c9099\"]\n",
    "name = [name_bb, name_bu, name_bc]\n",
    "\n",
    "plt.figure()\n",
    "counts, bin_edges, _ = plt.hist(x, bins, weights=weights, color=colour, label=name, stacked=True)\n",
    "bin_centres = (bin_edges[:-1]+ bin_edges[1:])/2\n",
    "err = np.sqrt(counts[2])\n",
    "plt.errorbar(bin_centres, counts[2], yerr=err, fmt='o', color='k', markersize=2)\n",
    "\n",
    "plt.xlim(min_bin,max_bin)\n",
    "plt.xlabel(\"Hemisphere maximum energy [GeV]\")\n",
    "plt.ylabel(\"Number of events / {} GeV\".format(round((max_bin-min_bin)/nb_bins,3)))\n",
    "plt.legend()\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "single-ethics",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dutch-spotlight",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: zfit in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (0.6.6)\n",
      "Collecting iminuit>=2.3\n",
      "  Downloading iminuit-2.6.1-cp38-cp38-manylinux2010_x86_64.whl (317 kB)\n",
      "\u001b[K     |████████████████████████████████| 317 kB 6.6 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: tensorflow~=2.4 in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (2.5.0)\n",
      "Requirement already satisfied: pandas in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from zfit) (1.2.2)\n",
      "Requirement already satisfied: colorlog in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (5.0.1)\n",
      "Requirement already satisfied: nlopt in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (2.7.0)\n",
      "Requirement already satisfied: dotmap in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (1.3.23)\n",
      "Requirement already satisfied: numdifftools in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (0.9.39)\n",
      "Requirement already satisfied: numpy>=1.16 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from zfit) (1.18.2)\n",
      "Requirement already satisfied: ordered-set in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (4.0.2)\n",
      "Requirement already satisfied: scipy>=1.2 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from zfit) (1.5.1)\n",
      "Requirement already satisfied: tensorflow-addons in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (0.13.0)\n",
      "Requirement already satisfied: colorama in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (0.4.4)\n",
      "Requirement already satisfied: texttable in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (1.6.3)\n",
      "Requirement already satisfied: uproot<5,>=4 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from zfit) (4.0.1)\n",
      "Requirement already satisfied: tabulate in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from zfit) (0.8.9)\n",
      "Requirement already satisfied: colored in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (1.4.2)\n",
      "Requirement already satisfied: tensorflow-probability~=0.12 in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from zfit) (0.12.2)\n",
      "Requirement already satisfied: keras-nightly~=2.5.0.dev in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (2.5.0.dev2021032900)\n",
      "Requirement already satisfied: keras-preprocessing~=1.1.2 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (1.1.2)\n",
      "Requirement already satisfied: flatbuffers~=1.12.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (1.12.0)\n",
      "Collecting gast==0.4.0\n",
      "  Downloading gast-0.4.0-py3-none-any.whl (9.8 kB)\n",
      "Collecting tensorflow-estimator<2.6.0,>=2.5.0rc0\n",
      "  Downloading tensorflow_estimator-2.5.0-py2.py3-none-any.whl (462 kB)\n",
      "\u001b[K     |████████████████████████████████| 462 kB 8.0 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting six~=1.15.0\n",
      "  Downloading six-1.15.0-py2.py3-none-any.whl (10 kB)\n",
      "Requirement already satisfied: google-pasta~=0.2 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (0.2.0)\n",
      "Collecting grpcio~=1.34.0\n",
      "  Downloading grpcio-1.34.1-cp38-cp38-manylinux2014_x86_64.whl (4.0 MB)\n",
      "\u001b[K     |████████████████████████████████| 4.0 MB 13.8 MB/s eta 0:00:01     |████████                        | 983 kB 13.8 MB/s eta 0:00:01     |█████████████████████████       | 3.1 MB 13.8 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: protobuf>=3.9.2 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (3.17.3)\n",
      "Requirement already satisfied: astunparse~=1.6.3 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (1.6.3)\n",
      "Collecting h5py~=3.1.0\n",
      "  Downloading h5py-3.1.0-cp38-cp38-manylinux1_x86_64.whl (4.4 MB)\n",
      "\u001b[K     |████████████████████████████████| 4.4 MB 36.1 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting wheel~=0.35\n",
      "  Downloading wheel-0.36.2-py2.py3-none-any.whl (35 kB)\n",
      "Collecting opt-einsum~=3.3.0\n",
      "  Downloading opt_einsum-3.3.0-py3-none-any.whl (65 kB)\n",
      "\u001b[K     |████████████████████████████████| 65 kB 6.6 MB/s  eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: typing-extensions~=3.7.4 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (3.7.4.3)\n",
      "Collecting tensorboard~=2.5\n",
      "  Downloading tensorboard-2.5.0-py3-none-any.whl (6.0 MB)\n",
      "\u001b[K     |████████████████████████████████| 6.0 MB 53.5 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: termcolor~=1.1.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (1.1.0)\n",
      "Requirement already satisfied: absl-py~=0.10 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow~=2.4->zfit) (0.11.0)\n",
      "Collecting numpy>=1.16\n",
      "  Downloading numpy-1.19.5-cp38-cp38-manylinux2010_x86_64.whl (14.9 MB)\n",
      "\u001b[K     |████████████████████████████████| 14.9 MB 45.4 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting wrapt~=1.12.1\n",
      "  Downloading wrapt-1.12.1.tar.gz (27 kB)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (0.4.1)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (1.7.0)\n",
      "Requirement already satisfied: markdown>=2.6.8 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (3.1.1)\n",
      "Requirement already satisfied: setuptools>=41.0.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (44.1.0)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (2.22.0)\n",
      "Requirement already satisfied: google-auth<2,>=1.6.3 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (1.6.3)\n",
      "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (0.6.1)\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorboard~=2.5->tensorflow~=2.4->zfit) (0.15.4)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow~=2.4->zfit) (0.2.5)\n",
      "Requirement already satisfied: rsa>=3.1.4 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow~=2.4->zfit) (4.0)\n",
      "Requirement already satisfied: cachetools>=2.0.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow~=2.4->zfit) (3.1.1)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow~=2.4->zfit) (1.2.0)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.1 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow~=2.4->zfit) (0.4.5)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow~=2.4->zfit) (3.0.4)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow~=2.4->zfit) (2.8)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow~=2.4->zfit) (1.25.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow~=2.4->zfit) (2019.3.9)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow~=2.4->zfit) (3.0.1)\n",
      "Requirement already satisfied: cloudpickle>=1.3 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow-probability~=0.12->zfit) (1.6.0)\n",
      "Requirement already satisfied: decorator in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow-probability~=0.12->zfit) (4.3.2)\n",
      "Requirement already satisfied: dm-tree in /eos/home-m/mahartma/.local/lib/python3.8/site-packages (from tensorflow-probability~=0.12->zfit) (0.1.6)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from pandas->zfit) (2.8.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from pandas->zfit) (2019.1)\n",
      "Requirement already satisfied: typeguard>=2.7 in /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-opt/lib/python3.8/site-packages (from tensorflow-addons->zfit) (2.7.0)\n",
      "Building wheels for collected packages: wrapt\n",
      "  Building wheel for wrapt (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for wrapt: filename=wrapt-1.12.1-cp38-cp38-linux_x86_64.whl size=82107 sha256=114d6cd7f057cc18ca4bb69b67b043bb3e66e3012485d0ee9793a748ddfcc1d6\n",
      "  Stored in directory: /tmp/mahartma/.cache/pip/wheels/5f/fd/9e/b6cf5890494cb8ef0b5eaff72e5d55a70fb56316007d6dfe73\n",
      "Successfully built wrapt\n",
      "Installing collected packages: six, wheel, numpy, grpcio, wrapt, tensorflow-estimator, tensorboard, opt-einsum, h5py, gast, iminuit\n",
      "\u001b[33m  WARNING: The script wheel is installed in '/eos/user/m/mahartma/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\n",
      "\u001b[33m  WARNING: The scripts f2py, f2py3 and f2py3.8 are installed in '/eos/user/m/mahartma/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\n",
      "\u001b[33m  WARNING: The script tensorboard is installed in '/eos/user/m/mahartma/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "torch 1.7.0a0 requires dataclasses, which is not installed.\n",
      "virtualenv 20.4.3 requires distlib<1,>=0.3.1, but you have distlib 0.2.9 which is incompatible.\n",
      "tensorflow-cpu 2.3.0 requires gast==0.3.3, but you have gast 0.4.0 which is incompatible.\n",
      "tensorflow-cpu 2.3.0 requires h5py<2.11.0,>=2.10.0, but you have h5py 3.1.0 which is incompatible.\n",
      "tensorflow-cpu 2.3.0 requires numpy<1.19.0,>=1.16.0, but you have numpy 1.19.5 which is incompatible.\n",
      "tensorflow-cpu 2.3.0 requires scipy==1.4.1, but you have scipy 1.5.1 which is incompatible.\n",
      "tensorflow-cpu 2.3.0 requires tensorflow-estimator<2.4.0,>=2.3.0, but you have tensorflow-estimator 2.5.0 which is incompatible.\n",
      "astroid 2.3.3 requires wrapt==1.11.*, but you have wrapt 1.12.1 which is incompatible.\n",
      "archspec 0.1.2 requires click<8.0,>=7.1.2, but you have click 7.0 which is incompatible.\u001b[0m\n",
      "Successfully installed gast-0.4.0 grpcio-1.34.1 h5py-3.1.0 iminuit-2.6.1 numpy-1.19.5 opt-einsum-3.3.0 six-1.15.0 tensorboard-2.5.0 tensorflow-estimator-2.5.0 wheel-0.36.2 wrapt-1.12.1\n"
     ]
    }
   ],
   "source": [
    "!pip install zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "infectious-burke",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fundamental-sharing",
   "metadata": {},
   "outputs": [],
   "source": [
    "nb_bins = 50\n",
    "min_bin = 20\n",
    "max_bin = 52\n",
    "\n",
    "var = 'EVT_ThrustEmax_E'\n",
    "\n",
    "name_bc = r\"$B_c^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bu = r\"$B^+ \\rightarrow \\tau^+ \\nu_\\tau$\"\n",
    "name_bb = r\"Inclusive background $Z^0 \\rightarrow b\\bar{b}$\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-celtic",
   "metadata": {},
   "source": [
    "##### Toy samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "superior-allah",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_process1 = bc_init[var]\n",
    "sample_process2 = bu_init[var]\n",
    "sample_process3 = bb_init[var]\n",
    "\n",
    "sample_to_fit = np.concatenate([sample_process1, sample_process2, sample_process3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "electronic-briefs",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_hist, bin_edges = np.histogram(sample_to_fit, \n",
    "                                      bins = nb_bins, \n",
    "                                      range = (min_bin, max_bin) \n",
    "                                     )\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bin_edges[:-1], bins=bin_edges, weights = sample_hist)\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "minus-evolution",
   "metadata": {},
   "source": [
    "##### Building the templates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "incorporate-absorption",
   "metadata": {},
   "outputs": [],
   "source": [
    "simulated_sample_process1 = bc_init[var] #bc\n",
    "simulated_sample_process2 = bu_init[var] #bu\n",
    "simulated_sample_process3 = bb_init[var] #bb\n",
    "\n",
    "template_process1, _ = np.histogram(simulated_sample_process1, bins = bin_edges)\n",
    "template_process2, _ = np.histogram(simulated_sample_process2, bins = bin_edges)\n",
    "template_process3, _ = np.histogram(simulated_sample_process3, bins = bin_edges)\n",
    "\n",
    "# Normalisation\n",
    "template_process1 = template_process1/np.sum(template_process1)\n",
    "template_process2 = template_process2/np.sum(template_process2)\n",
    "template_process3 = template_process3/np.sum(template_process3)\n",
    "\n",
    "plt.figure()\n",
    "plt.hist(bins_edges[:-1], bins_edges, weights=template_process1, histtype='step', color= \"#1c9099\", label=name_bc)\n",
    "plt.hist(bins_edges[:-1], bins_edges, weights=template_process2, histtype='step', color= \"#a6bddb\", label=name_bu)\n",
    "plt.hist(bins_edges[:-1], bins_edges, weights=template_process3, histtype='step', color= \"#756bb1\", label=name_bb)\n",
    "plt.legend()\n",
    "plt.xlim(min_bin,max_bin)\n",
    "plt.xlabel(\"Hemisphere maximum energy [GeV]\")\n",
    "plt.ylabel(\"Number of events / {} GeV\".format(round((max_bin-min_bin)/nb_bins,3)))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "impossible-forward",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
